/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        5 January 2009*//* CoreGraphics - CGColorSpace.h * Copyright (c) 1999-2006 Apple Computer, Inc. * All rights reserved.*/#if ndef _DEFINEDINCARBON#define CGColorSpaceRef as pointer#endifinclude "CoreGraphics:CGDataProvider.incl"#if ndef _DEFINEDINCARBON/* Color rendering intents. */begin enum not output_kCGRenderingIntentDefault_kCGRenderingIntentAbsoluteColorimetric_kCGRenderingIntentRelativeColorimetric_kCGRenderingIntentPerceptual_kCGRenderingIntentSaturationend enum#define CGColorRenderingIntent as UInt32/* The model of a color space. */begin enum not output_kCGColorSpaceModelUnknown    = -1 _kCGColorSpaceModelMonochrome_kCGColorSpaceModelRGB_kCGColorSpaceModelCMYK_kCGColorSpaceModelLab_kCGColorSpaceModelDeviceN_kCGColorSpaceModelIndexed_kCGColorSpaceModelPatternend enum#define CGColorSpaceModel as UInt32/* The name of the "Generic" gray color space. */system CFStringRef kCGColorSpaceGenericGray// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* The name of the "Generic" RGB color space. */system CFStringRef kCGColorSpaceGenericRGB// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* The name of the "Generic" CMYK color space. */system CFStringRef kCGColorSpaceGenericCMYK// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* The name of the "Generic" linear RGB color space. This is the same as* "kCGColorSpaceGenericRGB" but with a 1.0 gamma. */system CFStringRef kCGColorSpaceGenericRGBLinear// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* The name of the Adobe RGB (1998) color space. For more information, see * "Adobe RGB (1998) Color Image Encoding", Version 2005-05, Adobe Systems* Inc. (http://www.adobe.com). */system CFStringRef kCGColorSpaceAdobeRGB1998// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* The name of the sRGB color space. The capitalization in the name, while * strictly inaccurate, avoids interpretational ambiguity. For more * information, see IEC 61966-2-1 (1999-10): "Multimedia systems and * equipment - Colour measurement and management - Part 2-1: Colour* management - Default RGB colour space - sRGB". */system CFStringRef kCGColorSpaceSRGB// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Create a DeviceGray color space. */toolbox fn CGColorSpaceCreateDeviceGray = CGColorSpaceRef/* Create a DeviceRGB color space. */toolbox fn CGColorSpaceCreateDeviceRGB = CGColorSpaceRef/* Create a DeviceCMYK color space. */toolbox fn CGColorSpaceCreateDeviceCMYK = CGColorSpaceRef/* Create a calibrated gray color space. `whitePoint' is an array of 3 * numbers specifying the tristimulus value, in the CIE 1931 XYZ-space, of * the diffuse white point. `blackPoint' is an array of 3 numbers * specifying the tristimulus value, in CIE 1931 XYZ-space, of the diffuse* black point. `gamma' defines the gamma for the gray component. */// CG_EXTERN CGColorSpaceRef CGColorSpaceCreateCalibratedGray(const CGFloat whitePoint[3], const CGFloat blackPoint[3], CGFloat gamma);toolbox fn CGColorSpaceCreateCalibratedGray( pointer whitePoint, pointer blackPoint, CGFloat gamma ) = CGColorSpaceRef/* Create a calibrated RGB color space. `whitePoint' is an array of 3 * numbers specifying the tristimulus value, in the CIE 1931 XYZ-space, of * the diffuse white point. `blackPoint' is an array of 3 numbers * specifying the tristimulus value, in CIE 1931 XYZ-space, of the diffuse * black point. `gamma' is an array of 3 numbers specifying the gamma for * the red, green, and blue components of the color space. `matrix' is an * array of 9 numbers specifying the linear interpretation of the * gamma-modified RGB values of the color space with respect to the final* XYZ representation. */// CG_EXTERN CGColorSpaceRef CGColorSpaceCreateCalibratedRGB(const CGFloat whitePoint[3], const CGFloat blackPoint[3], const CGFloat gamma[3], const CGFloat matrix[9]);toolbox fn CGColorSpaceCreateCalibratedRGB( pointer whitePoint, pointer blackPoint, pointer gamma, pointer matrix ) = CGColorSpaceRef/* Create an L*a*b* color space. `whitePoint' is an array of 3 numbers * specifying the tristimulus value, in the CIE 1931 XYZ-space, of the * diffuse white point. `blackPoint' is an array of 3 numbers specifying * the tristimulus value, in CIE 1931 XYZ-space, of the diffuse black * point. `range' is an array of four numbers specifying the range of valid* values for the a* and b* components of the color space. */// CG_EXTERN CGColorSpaceRef CGColorSpaceCreateLab(const CGFloat whitePoint[3], const CGFloat blackPoint[3], const CGFloat range[4]);toolbox fn CGColorSpaceCreateLab( pointer whitePoint, pointer blackPoint, pointer range ) = CGColorSpaceRef/* Create an ICC-based color space. `nComponents' specifies the number of * color components in the color space defined by the ICC profile data. * This must match the number of components actually in the ICC profile, * and must be 1, 3, or 4. `range' is an array of 2*nComponents numbers * specifying the minimum and maximum valid values of the corresponding * color components, so that for color component k, range[2*k] <= c[k] <= * range[2*k+1], where c[k] is the k'th color component. `profile' is a * data provider specifying the ICC profile. `alternate' specifies an * alternate color space to be used in case the ICC profile is not * supported. It must have `nComponents' color components. If `alternate' * is NULL, then the color space used will be DeviceGray, DeviceRGB, or * DeviceCMYK, depending on whether `nComponents' is 1, 3, or 4,* respectively. */toolbox fn CGColorSpaceCreateICCBased( UInt32 nComponents, const CGFloat *range, CGDataProviderRef profile, CGColorSpaceRef alternate ) = CGColorSpaceRef/* Create an indexed color space. A sample value in an indexed color space * is treated as an index into the color table of the color space. `base' * specifies the base color space in which the values in the color table * are to be interpreted. `lastIndex' is an integer which specifies the * maximum valid index value; it must be less than or equal to 255. * `colorTable' is an array of m * (lastIndex + 1) bytes, where m is the * number of color components in the base color space. Each byte is an * unsigned integer in the range 0 to 255 that is scaled to the range of* the corresponding color component in the base color space. */// CG_EXTERN CGColorSpaceRef CGColorSpaceCreateIndexed(CGColorSpaceRef baseSpace, size_t lastIndex, const unsigned char *colorTable);toolbox fn CGColorSpaceCreateIndexed( CGColorSpaceRef baseSpace, UInt32 lastIndex, pointer colorTable ) = CGColorSpaceRef/* Create a pattern color space. `baseSpace' is the underlying color space * of the pattern color space. For colored patterns, `baseSpace' should be * NULL; for uncolored patterns, `baseSpace' specifies the color space of* colors which will be painted through the pattern. */toolbox fn CGColorSpaceCreatePattern( CGColorSpaceRef baseSpace ) = CGColorSpaceRef/* Create a color space using `ref', a platform-specific color space* reference. For MacOS X, `ref' should be a CMProfileRef. */// CG_EXTERN CGColorSpaceRef CGColorSpaceCreateWithPlatformColorSpace(void *ref);toolbox fn CGColorSpaceCreateWithPlatformColorSpace( pointer ref ) = CGColorSpaceRef/* Create a color space using `name' as the identifier for the color* space. */toolbox fn CGColorSpaceCreateWithName( CFStringRef name ) = CGColorSpaceRef// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Equivalent to `CFRetain(space)', except it doesn't crash (as CFRetain* does) if `space' is NULL. */toolbox fn CGColorSpaceRetain( CGColorSpaceRef space ) = CGColorSpaceRef/* Equivalent to `CFRelease(space)', except it doesn't crash (as CFRelease* does) if `space' is NULL. */toolbox CGColorSpaceRelease( CGColorSpaceRef space )/* Return the CFTypeID for CGColorSpaces. */toolbox fn CGColorSpaceGetTypeID = CFTypeID// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Return the number of color components in the color space `space'. */toolbox fn CGColorSpaceGetNumberOfComponents( CGColorSpaceRef space ) = UInt32/* Return the color space model of `space'. */toolbox fn CGColorSpaceGetModel( CGColorSpaceRef space ) = CGColorSpaceModel// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the base color space of `space' if `space' is a pattern or * indexed color space; otherwise, return NULL. To determine whether a * color space is an indexed or pattern color space, use* `CGColorSpaceGetModel'. */toolbox fn CGColorSpaceGetBaseColorSpace( CGColorSpaceRef space ) = CGColorSpaceRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the number of entries in the color table of `space' if `space' is * an indexed color space; otherwise, return 0. To determine whether a* color space is an indexed color space, use `CGColorSpaceGetModel'. */toolbox fn CGColorSpaceGetColorTableCount( CGColorSpaceRef space ) = UInt32// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Copy the entries in the color table of `space' to `table' if `space' is * an indexed color space; otherwise, do nothing. The array pointed to by * `table' should be at least as large as the number of entries in the * color table; the returned data is in the same format as that passed to * `CGColorSpaceCreateIndexed'. To determine whether a color space is an* indexed color space, use `CGColorSpaceGetModel'. */// CG_EXTERN void CGColorSpaceGetColorTable(CGColorSpaceRef space, unsigned char *table) AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;toolbox CGColorSpaceGetColorTable( CGColorSpaceRef space, pointer table )// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return a copy of the ICC profile of `space', or NULL if the color space* doesn't have an ICC profile. */toolbox fn CGColorSpaceCopyICCProfile( CGColorSpaceRef space ) = CFDataRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;#endif// _DEFINEDINCARBON