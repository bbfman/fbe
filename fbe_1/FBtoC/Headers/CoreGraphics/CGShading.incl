/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        5 January 2009*//* CoreGraphics - CGShading.h * Copyright (c) 2001-2006 Apple Computer, Inc. * All rights reserved.*/#if ndef _DEFINEDINCARBON#define CGShadingRef as pointer#endifinclude "CoreGraphics:CGFunction.incl"#if ndef _DEFINEDINCARBON//#define CGShadingRef as pointer/*! @function CGShadingGetTypeID * Return the CFTypeID for CGShadingRefs.*/toolbox fn CGShadingGetTypeID = CFTypeID// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/*! @function CGShadingCreateAxial * * Create a shading defining a color blend which varies along a linear axis * between two endpoints and extends indefinitely perpendicular to that * axis. The shading may optionally extend beyond either endpoint by * continuing the boundary colors indefinitely. * * @param colorspace * The colorspace in which color values are expressed. * @param start * The starting point of the axis, in the shading's target coordinate space. * @param end * The ending point of the axis, in the shading's target coordinate space. * @param function * A 1-in, N-out function, where N is one more (for alpha) than the * number of color components in the shading's colorspace. The input * value 0 corresponds to the color at the starting point of the shading; * the input value 1 corresponds to the color at the ending point of the * shading. * @param extendStart * A boolean specifying whether to extend the shading beyond the starting * point of the axis. * @param extendEnd * A boolean specifying whether to extend the shading beyond the ending * point of the axis.*/toolbox fn CGShadingCreateAxial( CGColorSpaceRef colorspace, CGPoint start, CGPoint end, CGFunctionRef function, Boolean extendStart, Boolean extendEnd ) = CGShadingRef // AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/*! @function CGShadingCreateRadial * * Create a shading defining a color blend which varies between two * circles. The shading may optionally extend beyond either circle by * continuing the boundary colors. * * @param colorspace * The colorspace in which color values are expressed. * @param start * The center of the starting circle, in the shading's target coordinate * space. * @param startRadius * The radius of the starting circle, in the shading's target coordinate * space. * @param end * The center of the ending circle, in the shading's target coordinate * space. * @param endRadius * The radius of the ending circle, in the shading's target coordinate * space. * @param function * A 1-in, N-out function, where N is one more (for alpha) than the * number of color components in the shading's colorspace. The input * value 0 corresponds to the color of the starting circle; the input * value 1 corresponds to the color of the ending circle. * @param extendStart * A boolean specifying whether to extend the shading beyond the starting * circle. * @param extendEnd * A boolean specifying whether to extend the shading beyond the ending * circle.*/toolbox fn CGShadingCreateRadial( CGColorSpaceRef colorspace, CGPoint start, CGFloat startRadius, CGPoint end, CGFloat endRadius, CGFunctionRef function, Boolean extendStart, Boolean extendEnd ) = CGShadingRef // AVAILABLE_MAC_OS_X_VERSION_10_2_AND_/*! @function CGShadingRetain * * Equivalent to <tt>CFRetain(shading)</tt>.*/toolbox fn CGShadingRetain( CGShadingRef shading ) = CGShadingRef // AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/*! @function CGShadingRelease * * Equivalent to <tt>CFRelease(shading)</tt>.*/toolbox CGShadingRelease( CGShadingRef shading ) // AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;#endif// _DEFINEDINCARBON