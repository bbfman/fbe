/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        2 January 2009*//* * CTFontTrait.h * CoreText * * Copyright (c) 2006-2007 Apple Inc. All rights reserved. **//*! @header CTFontTraits @abstract This header defines constants for font traits. @discussion The constants defined in this header are for use in determining normalized and symbolic stylistic font traits from the font reference.*/#if ndef _DEFINEDINCARBON/*! @defined kCTFontSymbolicTrait @abstract Dictionary key to access the symbolic traits value. @discussion Use this key to access the symbolic traits value from the font traits dictionary. The value is returned as a CFNumberRef.*/system CFStringRef kCTFontSymbolicTrait/*! @defined kCTFontWeightTrait @abstract Dictionary key to access the weight trait value. @discussion Use this key to access the normalized weigth trait from the font traits dictionary. The value returned is a CFNumberRef representing a float value between -1.0 and 1.0 for normalized weight. The value of 0.0 corresponds to the regular or medium font weight.*/system CFStringRef kCTFontWeightTrait/*! @defined kCTFontWidthTrait @abstract Dictionary key to access the width (condense/expand) trait value. @discussion Use this key to access the normalized proportion trait from the font traits dictionary. This value corresponds to the relative inter-glyph spacing for a given font. The value returned is a  CFNumberRef representing a float between -1.0 and 1.0. The value of 0.0 corresponds to regular glyph spacing while negative values represent condensed glyph spacing.*/system CFStringRef kCTFontWidthTrait/*!  {20090102} @defined kCTFontSlantTrait  {20090102} @abstract Dictionary key to access the slant trait value. @discussion Use this key to access the normalized slant angle from the font traits dictionary. The value returned is a CFNumberRef representing a float value between -1.0 and 1.0 for normalized slant angle. The value or 0.0 corresponds to 0 degree clockwise rotation from the vertical and 1.0 corresponds to 30 degrees clockwise rotation.*/system CFStringRef kCTFontSlantTrait/*! @const kCTFontClassMaskShift @abstract The font class shift. @discussion This is used to shift the font class to the upper most 4 bits of the symbolic traits.*/begin enum_kCTFontClassMaskShift = 28end enum/*! @enum CTFontSymbolicTraits @abstract Symbolic representation of stylistic font attributes. @discussion CTFontSymbolicTraits symbolically describes stylistic aspects  of a font. The upper 16 bits is used to describe appearance of the  font whereas the lower 16 bits for typeface. The font appearance  information represented by the upper 16 bits can be used for  stylistic font matching. @constant kCTFontClassMaskShift  Shift value to reserve the upper most 4 bits for the font class.*/begin enum_kCTFontItalicTrait      = (1 << 0)  // Additional detail available via kCTFontSlantTrait _kCTFontBoldTrait        = (1 << 1)  // Additional detail available via kCTFontWeightTrait_kCTFontExpandedTrait    = (1 << 5)  // Expanded and condensed traits are mutually exclusive_kCTFontCondensedTrait   = (1 << 6)  // Additional detail available via kCTFontWidthTrait_kCTFontMonoSpaceTrait   = (1 << 10)  // Use fixed-pitch glyphs if available. May have multiple glyph advances (most CJK glyphs may contain two spaces)_kCTFontVerticalTrait    = (1 << 11)  // Use vertical glyph variants and metrics_kCTFontUIOptimizedTrait = (1 << 12)  // Synthesize appropriate attributes for UI rendering such as control titles if necessary                         _kCTFontClassMaskTrait   = (15 << _kCTFontClassMaskShift) // Mask for the font classend enum#define CTFontSymbolicTraits as UInt32/*! @enum CTFontStylisticClass @abstract Stylistic class values. @discussion CTFontStylisticClass classifies certain stylistic qualities of the font. These values correspond closely to the font class  values in the OpenType 'OS/2' table. The class values are bundled in the upper four bits of the CTFontSymbolicTraits and can be obtained via the kCTFontClassMaskTrait.*/begin enum_kCTFontUnknownClass            = (0 << _kCTFontClassMaskShift) _kCTFontOldStyleSerifsClass     = (1 << _kCTFontClassMaskShift) _kCTFontTransitionalSerifsClass = (2 << _kCTFontClassMaskShift) _kCTFontModernSerifsClass       = (3 << _kCTFontClassMaskShift) _kCTFontClarendonSerifsClass    = (4 << _kCTFontClassMaskShift) _kCTFontSlabSerifsClass         = (5 << _kCTFontClassMaskShift) _kCTFontFreeformSerifsClass     = (7 << _kCTFontClassMaskShift) _kCTFontSansSerifClass          = (8 << _kCTFontClassMaskShift) _kCTFontOrnamentalsClass        = (9 << _kCTFontClassMaskShift) _kCTFontScriptsClass            = (10 << _kCTFontClassMaskShift) _kCTFontSymbolicClass           = (12 << _kCTFontClassMaskShift)end enum#define CTFontStylisticClass as UInt32#endif// _DEFINEDINCARBON