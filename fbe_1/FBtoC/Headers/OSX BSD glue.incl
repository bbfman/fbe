// last mod  RP   7 Aug 2004 // fixes for FBtoC 11 August 2007/*"Definitions" of some BSD system functions.popen, pclose and fgetc are currently in Subs UNIX Shell.incland are not repeated here. Subs UNIX Shell.incl also contains the utilitiesCreateBundleForFramework and GetMachFunctionFromBundle.*/include "Tlbx StdCLib.incl"include "OSX termios.incl"include "OSX fcntl.incl"local fn FBXInitBSDSystemFramework'~'1// load System.framework bundle, where most UNIX/BSD routines liveif gSysBundle = 0 then gSysBundle = fn CreateBundleForFramework( "System.framework" )/*//  Mach-O function pointerssnipped for FBtoC*/end fn// moved to OSX termios.incl/*#if ndef _DEFINEDINCARBON#define speed_t as long#define pid_t as long#endif#if def _PASSTHROUGHFUNCTION#include <unistd.h>#include <termios.h>typedef struct termios termios;#include <util.h>#endif*///int tcgetattr(int fd, struct termios *t);toolbox fn tcgetattr( SInt32 fd, pointer t) = long// int tcsetattr(int fd, int action, const struct termios *t);toolbox fn tcsetattr( SInt32 fd, SInt32 action, pointer t ) = long//int cfsetspeed(struct termios *t, speed_t speed);//The cfsetspeed function sets both the input and output baud rate in the// termios structure referenced by t to speed.toolbox fn cfsetspeed( pointer t, speed_t speed) = long// speed_t cfgetispeed(const struct termios *t);// The cfgetispeed function returns the input baud rate in the termios//  structure referenced by t.toolbox fn cfgetispeed( pointer t ) = long//void cfmakeraw(struct termios *t);// The cfmakeraw function sets the flags stored in the termios structure to// a state disabling all input and output processing, giving a ``raw I/O// path.''toolbox cfmakeraw( pointer t )//int execv (const char *filename, char *const argv[])toolbox fn execv( const char *filename, char ** argv ) = long// pid_t fork (void)toolbox fn fork() = long// int pipe (int filedes[2])//On successful creation of the pipe, zero is returned. Otherwise, a value//of -1 is returned and the variable errno set to indicate the error.toolbox fn pipe( long * filedes ) = long//int dup2 (int old, int new)toolbox fn dup2( long old, long new ) = long//int fileno (FILE *stream)toolbox fn fileno( ptr stream ) = long/* pid_t waitpid (pid_t pid, int *status-ptr, int options)The waitpid function is used to request status information from a child process whoseprocess ID is pid. Normally, the calling process is suspended until the child processmakes status information available by terminating.*/toolbox fn waitpid (pid_t pid, SInt32 *status_ptr, SInt32 options) = long/*void exit (int status)The _exit function is the primitive for causing a process to terminate with status status.Calling this function does not execute cleanup functions registered with atexitor on_exit.*/local fn e_xit( status as SInt32 )beginCCode  _exit( (int)status );endCend fn// pid_t forkpty(int *amaster, char *name, struct termios *termp, struct winsize *winp);toolbox fn forkpty( SInt32 *amaster, pointer name, pointer termp,  pointer winp ) = long// int isatty(int fd);toolbox fn isatty( long fd  ) = long//  char * ttyname(int fd);toolbox fn ttyname( long fd ) = pointer