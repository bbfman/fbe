// IOKitLib.h    RP 30 Aug 2002// a jumble of typedefs and defines from other headers#if ndef _DEFINEDINCARBON#define kern_return_t as long// see kern_return.h// see IOTypes.h#define mach_port_t          as long#define io_object_t          as mach_port_t#define io_iterator_t        as io_object_t#define io_registry_entry_t  as io_object_t#define IOOptionBits         as UInt32#endif // _DEFINEDINCARBON_MACHPORTNULL = 0 //  port.h_KERNSUCCESS  = 0 //  kern_return.h_KERNFAILURE  = 5 //  kern_return.hinclude "Tlbx CFDictionary.incl" // CFDictionary.htoolbox fn IOServiceMatching( const char * name ) = CFMutableDictionaryReftoolbox fn IOMasterPort( mach_port_t bootstrapPort, mach_port_t * masterPort ) = kern_return_ttoolbox fn IOServiceGetMatchingServices( mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t * existing ) = kern_return_ttoolbox fn IOIteratorNext(io_iterator_t iterator ) = io_object_ttoolbox fn IORegistryEntryCreateCFProperty( io_registry_entry_t entry, CFStringRef  key, CFAllocatorRef  allocator, IOOptionBits  options ) = CFTypeReftoolbox fn IOObjectRelease( io_object_t object ) = kern_return_t#if 0/* * IOKit user library *//* * Matching dictionary creation helpers *//*! @function IOServiceMatching    @abstract Create a matching dictionary that specifies an IOService class match.    @discussion A very common matching criteria for IOService is based on its class.    IOServiceMatching will create a matching dictionary that specifies any IOService of a class, or its subclasses.     The class is specified by C-string name.    @param name The class name, as a const C-string. Class matching is successful on IOService's of this class or any subclass.    @result The matching dictionary created, is returned on success, or zero on failure.       The dictionary is commonly passed to IOServiceGetMatchingServices or IOServiceAddNotification which will consume a reference,       otherwise it should be released with CFRelease by the caller. */CFMutableDictionaryRefIOServiceMatching( const char * name );/*! @function IOMasterPort    @abstract Returns the mach port used to initiate communication with IOKit.    @discussion Functions that don't specify an existing object require the IOKit master port to be passed. This function obtains that port.    @param bootstrapPort Pass MACH_PORT_NULL for the default.    @param masterPort The master port is returned.    @result A kern_return_t error code. */kern_return_tIOMasterPort( mach_port_t bootstrapPort,       mach_port_t * masterPort );/*! @function IOServiceGetMatchingServices    @abstract Look up registered IOService objects that match a matching dictionary.    @discussion This is the preferred method of finding IOService objects currently registered by IOKit. IOServiceAddMatchingNotification can also supply this information and install a notification of new IOServices. The matching informationÂused in the matching dictionary may vary depending on the class of service being looked up.    @param masterPort The master port obtained from IOMasterPort().    @param matching A CF dictionary containing matching information, of which one reference is consumed by this function. IOKitLib can contruct matching dictionaries for common criteria with helper functions such as IOServiceMatching, IOServiceNameMtchng, IOBSDNameMatching, IOOpenFirmwarePathMatching.    @param existing An iterator handle is returned on success, and should be released by the caller when the iteration is finished.    @result A kern_return_t error code. */kern_return_tIOServiceGetMatchingServices( mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t * existing );/* * IOIterator, subclass of IOObject *//*! @function IOIteratorNext    @abstract Returns the next object in an iteration.    @discussion This function returns the next object in an iteration, or zero if no more remain or the iterator is invalid.    @param iterator An IOKit iterator handle.    @result If the iterator handle is valid, the next element in the iteration is returned, otherwise zero is returned. The element should be released by the caller when it is finished. */io_object_tIOIteratorNext( io_iterator_t iterator );/*! @function IORegistryEntryCreateCFProperty    @abstract Create a CF representation of a registry entry's property.    @discussion This function creates an instantaneous snapshot of a registry entry property, creating a CF container analogue in the caller's task. Not every object available in the kernel is represented as a CF container; currently OSDictionary,ÂOSArray, OSSet, OSSymbol, OSString, OSData, OSNumber, OSBoolean are created as their CF counterparts.     @param entry The registry entry handle whose property to copy.    @param key A CFString specifying the property name.    @param allocator The CF allocator to use when creating the CF container.    @param options No options are currently defined.    @result A CF container is created and returned the caller on success. The caller should release with CFRelease. */CFTypeRefIORegistryEntryCreateCFProperty( io_registry_entry_t entry, CFStringRef  key,        CFAllocatorRef  allocator, IOOptionBits  options );/*! @function IOObjectRelease    @abstract Releases an object handle previously returned by IOKitLib.    @discussion All objects returned by IOKitLib should be released with this function when access to them is no longer needed. Using the object after it has been released may or may not return an error, depending on how many references theÂtask has to the same object in the kernel.    @param object The IOKit object to release.    @result A kern_return_t error code. */kern_return_tIOObjectRelease( io_object_t object );#endif