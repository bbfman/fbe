// fcntl.h// a few constants from fcntl macros   RP 17 Aug 2002_ORDONLY   = 0x0000  /* open for reading only */_OWRONLY   = 0x0001  /* open for writing only */_ORDWR     = 0x0002  /* open for reading and writing */_ONONBLOCK = 0x0004_ONOCTTY   = 0  /* don't assign controlling terminal */_ONDELAY   = _ONONBLOCK /* compat */_FGETFL    = 3 /* get file status flags */_FSETFL    = 4/* set file status flags */#if 0/* * This file includes the definitions for open and fcntl * described by POSIX for <fcntl.h>; it also includes * related kernel definitions. *//* * File status flags: these are used by open(2), fcntl(2). * They are also used (indirectly) in the kernel file structure f_flags, * which is a superset of the open/fcntl flags.  Open flags and f_flags * are inter-convertible using OFLAGS(fflags) and FFLAGS(oflags). * Open/fcntl flags begin with O_; kernel-internal flags begin with F. *//* open-only flags */#define O_RDONLY 0x0000  /* open for reading only */#define O_WRONLY 0x0001  /* open for writing only */#define O_RDWR  0x0002  /* open for reading and writing */#define O_ACCMODE 0x0003  /* mask for above modes *//* * Kernel encoding of open mode; separate read and write bits that are * independently testable: 1 greater than the above. * * XXX * FREAD and FWRITE are excluded from the #ifdef KERNEL so that TIOCFLUSH, * which was documented to use FREAD/FWRITE, continues to work. */#if ndef _POSIX_SOURCE#define FREAD  0x0001#define FWRITE  0x0002#endif#define O_NONBLOCK 0x0004  /* no delay */#define O_APPEND 0x0008  /* set append mode */#if ndef _POSIX_SOURCE#define O_SHLOCK 0x0010  /* open with shared file lock */#define O_EXLOCK 0x0020  /* open with exclusive file lock */#define O_ASYNC  0x0040  /* signal pgrp when data ready */#define O_FSYNC  0x0080  /* synchronous writes */#endif#define O_CREAT  0x0200  /* create if nonexistant */#define O_TRUNC  0x0400  /* truncate to zero length */#define O_EXCL  0x0800  /* error if already exists */#if def KERNEL#define FMARK  0x1000  /* mark during gc() */#define FDEFER  0x2000  /* defer for next gc pass */#define FHASLOCK 0x4000  /* descriptor holds advisory lock */#endif/* defined by POSIX 1003.1; BSD default, so no bit required */#define O_NOCTTY 0  /* don't assign controlling terminal */#if def KERNEL/* convert from open() flags to/from fflags; convert O_RD/WR to FREAD/FWRITE */#define FFLAGS(oflags) ((oflags) + 1)#define OFLAGS(fflags) ((fflags) - 1)/* bits to save after open */#define FMASK  (FREAD|FWRITE|FAPPEND|FASYNC|FFSYNC|FNONBLOCK)/* bits settable by fcntl(F_SETFL, ...) */#define FCNTLFLAGS (FAPPEND|FASYNC|FFSYNC|FNONBLOCK)#endif/* * The O_* flags used to have only F* names, which were used in the kernel * and by fcntl.  We retain the F* names for the kernel f_flags field * and for backward compatibility for fcntl. */#if ndef _POSIX_SOURCE#define FAPPEND  O_APPEND /* kernel/compat */#define FASYNC  O_ASYNC  /* kernel/compat */#define FFSYNC  O_FSYNC  /* kernel */#define FNONBLOCK O_NONBLOCK /* kernel */#define FNDELAY  O_NONBLOCK /* compat */#define O_NDELAY O_NONBLOCK /* compat */#endif/* * Flags used for copyfile(2) */#if ndef _POSIX_SOURCE#define CPF_OVERWRITE 1#define CPF_IGNORE_MODE 2#define CPF_MASK (CPF_OVERWRITE|CPF_IGNORE_MODE)#endif/* * Constants used for fcntl(2) *//* command values */#define F_DUPFD  0  /* duplicate file descriptor */#define F_GETFD  1  /* get file descriptor flags */#define F_SETFD  2  /* set file descriptor flags */#define F_GETFL  3  /* get file status flags */#define F_SETFL  4  /* set file status flags */#if ndef _POSIX_SOURCE#define F_GETOWN 5  /* get SIGIO/SIGURG proc/pgrp */#define F_SETOWN 6  /* set SIGIO/SIGURG proc/pgrp */#endif#define F_GETLK  7  /* get record locking information */#define F_SETLK  8  /* set record locking information */#define F_SETLKW 9  /* F_SETLK; wait if blocked */#define F_PREALLOCATE   42  /* Preallocate storage */#define F_SETSIZE       43  /* Truncate a file without zeroing space */ #define F_RDADVISE      44              /* Issue an advisory read async with no copy to user */#define F_RDAHEAD       45              /* turn read ahead off/on */#define F_READBOOTSTRAP 46              /* Read bootstrap from disk */#define F_WRITEBOOTSTRAP 47             /* Write bootstrap on disk */#define F_NOCACHE       48              /* turning data caching off/on */#define F_LOG2PHYS 49  /* file offset to device offset *//* file descriptor flags (F_GETFD, F_SETFD) */#define FD_CLOEXEC 1  /* close-on-exec flag *//* record locking flags (F_GETLK, F_SETLK, F_SETLKW) */#define F_RDLCK  1  /* shared or read lock */#define F_UNLCK  2  /* unlock */#define F_WRLCK  3  /* exclusive or write lock */#if def KERNEL#define F_WAIT  0x010  /* Wait until lock is granted */#define F_FLOCK  0x020   /* Use flock(2) semantics for lock */#define F_POSIX  0x040   /* Use POSIX semantics for lock */#endif/* allocate flags (F_PREALLOCATE) */#define F_ALLOCATECONTIG  0x00000002    /* allocate contigious space */#define F_ALLOCATEALL     0x00000004 /* allocate all requested space or no space at all *//* Position Modes (fst_posmode) for F_PREALLOCATE */#define F_PEOFPOSMODE 3   /* Make it past all of the SEEK pos modes so that */     /* we can keep them in sync should we desire */ #define F_VOLPOSMODE 4  /* specify volume starting postion *//* * Advisory file segment locking data type - * information passed to system by user */struct flock { off_t l_start; /* starting offset */ off_t l_len;  /* len = 0 means until end of file */ pid_t l_pid;  /* lock owner */ short l_type;  /* lock type: read/write, etc. */ short l_whence; /* type of l_start */};/* * advisory file read data type - * information passed by user to system */struct radvisory {       off_t   ra_offset;       int     ra_count;};#if ndef _POSIX_SOURCE/* lock operations for flock(2) */#define LOCK_SH  0x01  /* shared file lock */#define LOCK_EX  0x02  /* exclusive file lock */#define LOCK_NB  0x04  /* don't block when locking */#define LOCK_UN  0x08  /* unlock file */#endif#if ndef _POSIX_SOURCE#define O_POPUP    0x80000000   /* force window to popup on open */#define O_ALERT    0x20000000 /* small, clean popup window */#endif#endif