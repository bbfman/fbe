'~Pascal to C Stringlocaldim strlen&local fn FBPStr2CStr(@strPtr as ^Str255 )'~'1strlen& = peek(strPtr)BlockMove strPtr+1, strPtr, strlen&poke strPtr+strlen&,0end fn'~C to Pascal Stringlocal fn FBCStr2PStr( @strPtr as ptr )'~'1dim as ptr   pdim as long  strlen : strlen = 0p = strPtrwhile ( p.0`` )p++strlen++wendif ( strlen > 255 ) then strlen = 255BlockMoveData( strPtr, strPtr+1, strlen )strPtr.0`` = strlenend fnlocal fn FBDoTab( tabNum as long ) '~'1tabNum -= pos( 0 )if ( tabNum > 0 and tabNum < 1024 ) then print space$( tabNum );end fnbegin globalsdim as SInt8  gFBUpperChar(255), gFBLowerChar(255)end globalslocal fn InitFBGlobals'~'1dim as SInt32 jBeginCCodefor ( j = 0; j < 256; j++ ) {#if NO_SUFFIX_ON_ARRAY_NAMESgFBUpperChar[j] = toupper( j );gFBLowerChar[j] = tolower( j );#elsegFBUpperChar_A[j] = toupper( j );gFBLowerChar_A[j] = tolower( j );#endif}EndCBeginCCode#ifndef DECARBONATEEndC#if ndef _LP64for j = 0 to 255gFBUpperChar(j) = jgFBLowerChar(j) = jnextUppercaseText( (ptr)@gFBUpperChar(0), 256 , _smCurrentScript ) LowercaseText( (ptr)@gFBLowerChar(0), 256 , _smCurrentScript )width lprint _textwrap // default per fix for bug #153 #endif /* ndef _LP64 */BeginCCodesranddev(); // randomize at startup#if !__LP64__//FBInitDefaultFolderRef(); FBInitAEEvents();GetPort( &gFBBadPort );FBPRInit();#endif EndC#if 1 BeginCCode#endifEndCend fn