/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------       12 October 2008*/#if ndef _DEFINEDINCARBON/* CFBase.h Copyright (c) 1998-2007, Apple Inc. All rights reserved.*/#define RegionCode as SInt16/* Note the next three do not follow the usual numbering policy from the base release */#define CFTypeID as unsigned long#define CFOptionFlags as unsigned long#define CFHashCode as unsigned long#define CFIndex as long/* Base "type" of all "CF objects", and polymorphic functions on them */#define CFTypeRef as pointer#define CFStringRef as CFTypeRef#define CFMutableStringRef as CFTypeRef/* Type to mean any instance of a property list type; currently, CFString, CFData, CFNumber, CFBoolean, CFDate, CFArray, and CFDictionary.*/#define CFPropertyListRef as CFTypeRef/* Values returned from comparison functions */begin enum not output_kCFCompareLessThan    = -1 _kCFCompareEqualTo     = 0 _kCFCompareGreaterThan = 1end enum#define CFComparisonResult as CFIndex/* A standard comparison function */#define CFComparatorFunction as CFComparisonResult/* Constant used by some functions to indicate failed searches. *//* This is of type CFIndex. */begin enum not output_kCFNotFound = -1end enum/* Range type */begin record CFRangedim as CFIndex  location dim as CFIndex  length end recordtoolbox fn CFRangeMake( CFIndex loc, CFIndex len ) = CFRange#define CFNullRef as pointertoolbox fn CFNullGetTypeID() = CFTypeIDsystem CFNullRef kCFNull  // the singleton null instance/* Allocator API Most of the time when specifying an allocator to Create functions, the NULL argument indicates "use the default"; this is the same as using kCFAllocatorDefault or the return value from CFAllocatorGetDefault(). This assures that you will use the allocator in effect at that time. You should rarely use kCFAllocatorSystemDefault, the default default allocator.*/#define CFAllocatorRef as pointer/* This is a synonym for NULL, if you'd rather use a named constant. */// const CFAllocatorRef kCFAllocatorDefault;begin enum not output_kCFAllocatorDefault = 0end enum/* Default system allocator; you rarely need to use this. */// const CFAllocatorRef kCFAllocatorSystemDefault;/* This allocator uses malloc(), realloc(), and free(). This should not be generally used; stick to kCFAllocatorDefault whenever possible. This allocator is useful as the "bytesDeallocator" in CFData or "contentsDeallocator" in CFString where the memory was obtained as a result of malloc() type functions.*/// const CFAllocatorRef kCFAllocatorMalloc;/* This allocator explicitly uses the default malloc zone, returned by malloc_default_zone(). It should only be used when an object is safe to be allocated in non-scanned memory.*/// const CFAllocatorRef kCFAllocatorMallocZone AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Null allocator which does nothing and allocates no memory. This allocator is useful as the "bytesDeallocator" in CFData or "contentsDeallocator" in CFString where the memory should not be freed. */// const CFAllocatorRef kCFAllocatorNull;/* Special allocator argument to CFAllocatorCreate() which means "use the functions given in the context to allocate the allocator itself as well". */// const CFAllocatorRef kCFAllocatorUseContext;#define CFAllocatorRetainCallBack as pointer#define CFAllocatorReleaseCallBack as pointer#define CFAllocatorCopyDescriptionCallBack as CFStringRef#define CFAllocatorAllocateCallBack as pointer#define CFAllocatorReallocateCallBack as pointer#define CFAllocatorDeallocateCallBack as pointer#define CFAllocatorPreferredSizeCallBack as CFIndexbegin record CFAllocatorContextdim as CFIndex                             version dim as pointer                             info dim as CFAllocatorRetainCallBack           retain dim as CFAllocatorReleaseCallBack          release dim as CFAllocatorCopyDescriptionCallBack  copyDescription dim as CFAllocatorAllocateCallBack         allocate dim as CFAllocatorReallocateCallBack       reallocate dim as CFAllocatorDeallocateCallBack       deallocate dim as CFAllocatorPreferredSizeCallBack    preferredSize end recordtoolbox fn CFAllocatorGetTypeID() = CFTypeID/* CFAllocatorSetDefault() sets the allocator that is used in the current thread whenever NULL is specified as an allocator argument. This means that most, if not all allocations will go through this allocator. It also means that any allocator set as the default needs to be ready to deal with arbitrary memory allocation requests; in addition, the size and number of requests will change between releases. An allocator set as the default will never be released, even if later another allocator replaces it as the default. Not only is it impractical for it to be released (as there might be caches created under the covers that refer to the allocator), in general it's also safer and more efficient to keep it around. If you wish to use a custom allocator in a context, it's best to provide it as the argument to the various creation functions rather than setting it as the default. Setting the default allocator is not encouraged. If you do set an allocator as the default, either do it for all time in your app, or do it in a nested fashion (by restoring the previous allocator when you exit your context). The latter might be appropriate for plug-ins or libraries that wish to set the default allocator.*/toolbox CFAllocatorSetDefault( CFAllocatorRef allocator )toolbox fn CFAllocatorGetDefault() = CFAllocatorReftoolbox fn CFAllocatorCreate( CFAllocatorRef allocator, CFAllocatorContext *context ) = CFAllocatorReftoolbox fn CFAllocatorAllocate( CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint ) = pointertoolbox fn CFAllocatorReallocate( CFAllocatorRef allocator, pointer *ptr, CFIndex newsize, CFOptionFlags hint ) = pointertoolbox CFAllocatorDeallocate( CFAllocatorRef allocator, pointer *ptr )toolbox fn CFAllocatorGetPreferredSizeForSize( CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint ) = CFIndextoolbox CFAllocatorGetContext( CFAllocatorRef allocator, CFAllocatorContext *context )/* Polymorphic CF functions */toolbox fn CFGetTypeID( CFTypeRef cf ) = CFTypeIDtoolbox fn CFCopyTypeIDDescription( CFTypeID typeid ) = CFStringReftoolbox fn CFRetain( CFTypeRef cf ) = CFTypeReftoolbox CFRelease( CFTypeRef cf )toolbox fn CFGetRetainCount( CFTypeRef cf ) = CFIndextoolbox fn CFMakeCollectable( CFTypeRef cf ) = CFTypeRef//  AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;toolbox fn CFEqual( CFTypeRef cf1, CFTypeRef cf2 ) = Booleantoolbox fn CFHash( CFTypeRef cf ) = CFHashCodetoolbox fn CFCopyDescription( CFTypeRef cf ) = CFStringReftoolbox fn CFGetAllocator( CFTypeRef cf ) = CFAllocatorRef#endif// ndef _DEFINEDINCARBON