/*    20100418   Bernie Wylde*//* CFNumberFormatter.h Copyright (c) 2003-2009, Apple Inc. All rights reserved.*/include "Tlbx CFBase.incl"include "Tlbx CFNumber.incl"include "Tlbx CFLocale.incl"#if ndef _DEFINEDINCARBON#define CFNumberFormatterRef as pointer// CFNumberFormatters are not thread-safe. Do not use one from multiple threads!toolbox fn CFNumberFormatterGetTypeID() = CFTypeID//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;begin enum not output_kCFNumberFormatterNoStyle         = 0_kCFNumberFormatterDecimalStyle    = 1_kCFNumberFormatterCurrencyStyle   = 2_kCFNumberFormatterPercentStyle    = 3_kCFNumberFormatterScientificStyle = 4_kCFNumberFormatterSpellOutStyle   = 5end enum#define CFNumberFormatterStyle as CFIndextoolbox fn CFNumberFormatterCreate( CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style ) = CFNumberFormatterRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Returns a CFNumberFormatter, localized to the given locale, which//  // will format numbers to the given style.toolbox fn CFNumberFormatterGetLocale( CFNumberFormatterRef formatter ) = CFLocaleRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFNumberFormatterGetStyle( CFNumberFormatterRef formatter ) = CFNumberFormatterStyle//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Get the properties with which the number formatter was created.toolbox fn CFNumberFormatterGetFormat( CFNumberFormatterRef formatter ) = CFStringRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox CFNumberFormatterSetFormat( CFNumberFormatterRef formatter, CFStringRef formatString )//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Set the format description string of the number formatter. This//  // overrides the style settings. The format of the format string//  // is as defined by the ICU library, and is similar to that found//  // in Microsoft Excel and NSNumberFormatter (and Java I believe).//  // The number formatter starts with a default format string defined//  // by the style argument with which it was created.toolbox fn CFNumberFormatterCreateStringWithNumber( CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number ) = CFStringRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFNumberFormatterCreateStringWithValue( CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberType numberType, pointer *valuePtr ) = CFStringRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Create a string representation of the given number or value//  // using the current state of the number formatter.begin enum not output_kCFNumberFormatterParseIntegersOnly = 1 /* only parse integers */end enum#define CFNumberFormatterOptionFlags as CFOptionFlagstoolbox fn CFNumberFormatterCreateNumberFromString( CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options ) = CFNumberRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFNumberFormatterGetValueFromString( CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFNumberType numberType, pointer *valuePtr ) = Boolean//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Parse a string representation of a number using the current state// of the number formatter. The range parameter specifies the range// of the string in which the parsing should occur in input, and on// output indicates the extent that was used; this parameter can// be NULL, in which case the whole string may be used. The// return value indicates whether some number was computed and// (if valuePtr is not NULL) stored at the location specified by// valuePtr. The numberType indicates the type of value pointed// to by valuePtr.toolbox CFNumberFormatterSetProperty( CFNumberFormatterRef formatter, CFStringRef key, CFTypeRef value )//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFNumberFormatterCopyProperty( CFNumberFormatterRef formatter, CFStringRef key ) = CFTypeRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Set and get various properties of the number formatter, the set of// which may be expanded in the future.system CFStringRef kCFNumberFormatterCurrencyCode// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterDecimalSeparator// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterCurrencyDecimalSeparator// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterAlwaysShowDecimalSeparator// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFBooleansystem CFStringRef kCFNumberFormatterGroupingSeparator// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterUseGroupingSeparator// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFBooleansystem CFStringRef kCFNumberFormatterPercentSymbol// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterZeroSymbol// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterNaNSymbol// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterInfinitySymbol// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterMinusSign// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterPlusSign// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterCurrencySymbol// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterExponentSymbol// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterMinIntegerDigits// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterMaxIntegerDigits// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterMinFractionDigits// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterMaxFractionDigits// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterGroupingSize// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterSecondaryGroupingSize// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterRoundingMode// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterRoundingIncrement// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterFormatWidth// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterPaddingPosition// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterPaddingCharacter// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterDefaultFormat// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterMultiplier// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterPositivePrefix// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterPositiveSuffix// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterNegativePrefix// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterNegativeSuffix// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterPerMillSymbol// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterInternationalCurrencySymbol// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterCurrencyGroupingSeparator// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFStringsystem CFStringRef kCFNumberFormatterIsLenient// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFBooleansystem CFStringRef kCFNumberFormatterUseSignificantDigits// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFBooleansystem CFStringRef kCFNumberFormatterMinSignificantDigits// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFNumbersystem CFStringRef kCFNumberFormatterMaxSignificantDigits// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFNumberbegin enum not output_kCFNumberFormatterRoundCeiling  = 0_kCFNumberFormatterRoundFloor    = 1_kCFNumberFormatterRoundDown     = 2_kCFNumberFormatterRoundUp       = 3_kCFNumberFormatterRoundHalfEven = 4_kCFNumberFormatterRoundHalfDown = 5_kCFNumberFormatterRoundHalfUp   = 6end enum#define CFNumberFormatterRoundingMode as CFIndexbegin enum not output_kCFNumberFormatterPadBeforePrefix = 0_kCFNumberFormatterPadAfterPrefix  = 1_kCFNumberFormatterPadBeforeSuffix = 2_kCFNumberFormatterPadAfterSuffix  = 3end enum#define CFNumberFormatterPadPosition as CFIndextoolbox fn CFNumberFormatterGetDecimalInfoForCurrencyCode( CFStringRef currencyCode, SInt32 *defaultFractionDigits, double *roundingIncrement ) = Boolean//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Returns the number of fraction digits that should be displayed, and// the rounding increment (or 0.0 if no rounding is done by the currency)// for the given currency. Returns false if the currency code is unknown// or the information is not available.// Not localized because these are properties of the currency.#endif// ndef _DEFINEDINCARBON