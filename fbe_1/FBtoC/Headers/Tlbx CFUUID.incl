// Note the workarounds for the functions that break FBtoCÕs max param count. Bernie 7-Jan-2017// CFUUID.h#if ndef _DEFINEDINCARBON#define CFUUIDRef as ptrbegin record CFUUIDBytesdim as UInt8 Êbyte0dim as UInt8 Êbyte1dim as UInt8 Êbyte2dim as UInt8 Êbyte3dim as UInt8 Êbyte4dim as UInt8 Êbyte5dim as UInt8 Êbyte6dim as UInt8 Êbyte7dim as UInt8 Êbyte8dim as UInt8 Êbyte9dim as UInt8 Êbyte10dim as UInt8 Êbyte11dim as UInt8 Êbyte12dim as UInt8 Êbyte13dim as UInt8 Êbyte14dim as UInt8 Êbyte15end record/* The CFUUIDBytes struct is a 128-bit struct that contains theraw UUID. A CFUUIDRef can provide such a struct from theCFUUIDGetUUIDBytes() function. This struct is suitable forpassing to APIs that expect a raw UUID.*/toolbox fn CFUUIDGetTypeID() = CFTypeIDtoolbox fn CFUUIDCreate( CFAllocatorRef alloc ) = CFUUIDRef/* Create and return a brand new unique identifier *///toolbox fn CFUUIDCreateWithBytes( CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, Â// ÊÊÊÊUInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15 ) as CFUUIDRef// *** workaround for FBtoC param count limitationlocal fn cfUUIDCreateWithBytes( alloc as CFAllocatorRef, bytes as ^CFUUIDBytes ) as CFUUIDRef'~'1BeginCCodereturn CFUUIDCreateWithBytes( alloc, bytes->byte0, bytes->byte1, bytes->byte2, bytes->byte3, bytes->byte4, bytes->byte5, bytes->byte6, bytes->byte7,ÊÊÊÊbytes->byte8, bytes->byte9, bytes->byte10, bytes->byte11, bytes->byte12, bytes->byte13, bytes->byte14, bytes->byte15 );EndCend fn = NULL/* Create and return an identifier with the given contents. ÊThis may return an existing instance with its ref count bumped because of uniquing. */toolbox fn CFUUIDCreateFromString( CFAllocatorRef alloc, CFStringRef uuidStr ) = CFUUIDRef/* Converts from a string representation to the UUID. This may return an existing instance with its ref count bumped because of uniquing. */toolbox fn CFUUIDCreateString( CFAllocatorRef alloc, CFUUIDRef uuid ) = CFStringRef/* Converts from a UUID to its string representation. *///toolbox fn CFUUIDGetConstantUUIDWithBytes( CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, Â// ÊÊÊÊUInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15 ) as CFUUIDRef// *** workaround for FBtoC param count limitationlocal fn cfUUIDGetConstantUUIDWithBytes( alloc as CFAllocatorRef, bytes as ^CFUUIDBytes ) as CFUUIDRef'~'1BeginCCodereturn CFUUIDGetConstantUUIDWithBytes( alloc, bytes->byte0, bytes->byte1, bytes->byte2, bytes->byte3, bytes->byte4, bytes->byte5, bytes->byte6, bytes->byte7,ÊÊÊÊbytes->byte8, bytes->byte9, bytes->byte10, bytes->byte11, bytes->byte12, bytes->byte13, bytes->byte14, bytes->byte15 );EndCend fn = NULL/* This returns an immortal CFUUIDRef that should not be released. ÊIt can be used in headers to declare UUID constants with #define. */toolbox fn CFUUIDGetUUIDBytes( CFUUIDRef uuid ) = CFUUIDBytestoolbox fn CFUUIDCreateFromUUIDBytes( CFAllocatorRef alloc, CFUUIDBytes bytes ) = CFUUIDRef#endif// ndef _DEFINEDINCARBON