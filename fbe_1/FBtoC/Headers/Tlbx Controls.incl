// small part of Controls.hinclude "Tlbx HIObject.incl"#if ndef _DEFINEDINCARBON#define ControlContentType      as SInt16#define ControlImageContentInfo as ControlButtonContentInfo#endif// _DEFINEDINCARBONtoolbox fn EnableControl( ControlRef inControl ) = OSStatus// 20090803toolbox fn DisableControl( ControlRef inControl ) = OSStatus// 20090803toolbox fn IsControlEnabled (ControlRef) = Booleantoolbox fn CopyControlTitleAsCFString( ControlRef inControl, CFStringRef * outString ) = OSStatusbegin enum_kControlCollectionTagBounds = _"boun"/* Rect - the bounding rectangle*/_kControlCollectionTagValue = _"valu"/* SInt32 - the value*/_kControlCollectionTagMinimum = _"min "/* SInt32 - the minimum*/_kControlCollectionTagMaximum = _"max "/* SInt32 - the maximum*/_kControlCollectionTagViewSize = _"view"/* SInt32 - the view size*/_kControlCollectionTagVisibility = _"visi"/* Boolean - the visible state*/_kControlCollectionTagRefCon = _"refc"/* SInt32 - the refCon*/_kControlCollectionTagTitle = _"titl"/* arbitrarily sized character array - the title*/_kControlCollectionTagUnicodeTitle = _"uttl"/* bytes as received via CFStringCreateExternalRepresentation*/_kControlCollectionTagIDSignature = _"idsi"/* OSType - the ControlID signature*/_kControlCollectionTagIDID = _"idid" /* SInt32 - the ControlID id*/_kControlCollectionTagCommand = _"cmd " /* UInt32 - the command*/_kControlCollectionTagVarCode = _"varc" /* SInt16 - the variant*/end enum#if ndef _DEFINEDINCARBON#define ControlDefUPP              as proc#define ControlCNTLToCollectionUPP as proc#define ControlDefType             as UInt32#define CollectionTag              as OSType // FourCharCodebegin record CDSKludgebegin uniondim as ControlDefUPP defProcdim as ptr classRefend unionend recordbegin record ControlDefSpecdim as ControlDefType defTypedim as CDSKludge uend record#define ControlDefProcMessage      as SInt16#endif // ndef _DEFINEDINCARBONtoolbox fn NewControlDefUPP( proc ) = proctoolbox fn NewControlCNTLToCollectionUPP( proc ) = proctoolbox fn RegisterControlDefinition(SInt16 CDEFResID, const ControlDefSpec *def, ControlCNTLToCollectionUPP conversionProc) = OSStatustoolbox fn AddCollectionItem(Collection c, CollectionTag tag, long id, long itemSize, ptr) = OSErr_kControlFontViewSystemFont = -4/* force to views system font (DataBrowser control only)*/begin enum_drawCntl = 0_testCntl = 1_calcCRgns = 2_initCntl = 3/* Param is Collection, result is OSStatus*/_dispCntl = 4_posCntl = 5_thumbCntl = 6_dragCntl = 7_autoTrack = 8_calcCntlRgn = 10_calcThumbRgn = 11_drawThumbOutline = 12_kControlMsgApplyTextColor = 30/* Available in Appearance 1.1 or later*/_kControlMsgGetRegion = 31/* Available in Appearance 1.1 or later*/_kControlMsgFlatten = 32/* Available in Carbon. Param is Collection.*/_kControlMsgSetCursor = 33/* Available in Carbon. Param is ControlSetCursorRec*/_kControlMsgDragEnter = 38/* Available in Carbon. Param is DragRef, result is boolean indicating acceptibility of drag.*/_kControlMsgDragLeave = 39/* Available in Carbon. As above.*/_kControlMsgDragWithin = 40/* Available in Carbon. As above.*/_kControlMsgDragReceive = 41/* Available in Carbon. Param is DragRef, result is OSStatus indicating success/failure.*/_kControlMsgDisplayDebugInfo = 46/* Available in Carbon on X.*/_kControlMsgContextualMenuClick = 47/* Available in Carbon. Param is ControlContextualMenuClickRec*/_kControlMsgGetClickActivation = 48/* Available in Carbon. Param is ControlClickActivationRec*/end enumbegin enum_kControlDefProcPtr = 0/* raw proc-ptr based access*/_kControlDefObjectClass = 1/* event-based definition (Mac OS X only)*/end enum#if ndef _DEFINEDINCARBON#define ClickActivationResult as UInt32#endifbegin enum not output_kDoNotActivateAndIgnoreClick  = 0   /* probably never used. here for completeness.*/_kDoNotActivateAndHandleClick  = 1   /* let the control handle the click while the window is still in the background.*/_kActivateAndIgnoreClick       = 2   /* control doesn't want to respond directly to the click, but window should still be brought forward.*/_kActivateAndHandleClick       = 3   /* control wants to respond to the click, but only after the window has been activated.*/end enum