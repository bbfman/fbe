include "Tlbx CarbonEvents.incl"#if ndef _DEFINEDINCARBON// Robert P.   9 Sept 2004/*     File:       HIToolbox/Dialogs.h     Contains:   Dialog Manager interfaces.     Version:    HIToolbox-145.27~1 *//* new, more standard names for dialog item types*/_kControlDialogItem     = 4_kButtonDialogItem      = _kControlDialogItem_kCheckBoxDialogItem    = _kControlDialogItem or 1_kRadioButtonDialogItem = _kControlDialogItem or 2_kResourceControlDialogItem = _kControlDialogItem or 3_kStaticTextDialogItem = 8_kEditTextDialogItem   = 16_kIconDialogItem       = 32_kPictureDialogItem    = 64_kUserDialogItem = 0_kHelpDialogItem = 1_kItemDisableBit = 128/* old names for dialog item types_ctrlItem = 4_btnCtrl = 0_chkCtrl = 1_radCtrl = 2_resCtrl = 3_statText = 8_editText = 16_iconItem = 32_picItem = 64_userItem = 0_itemDisable = 128*//* standard dialog item numbers*/_kStdOkItemIndex     = 1_kStdCancelItemIndex = 2/* old names_ok     = _kStdOkItemIndex_cancel = _kStdCancelItemIndex*//* standard icon resource id`s    */_kStopIcon    = 0_kNoteIcon    = 1_kCautionIcon = 2/* old names_stopIcon = _kStopIcon_noteIcon = _kNoteIcon_cautionIcon = _kCautionIcon*//*  Dialog Item List Manipulation Constants */#define DITLMethod as SInt16/*_overlayDITL = 0_appendDITLRight = 1_appendDITLBottom = 2*/#define StageList as SInt16begin record DialogTemplatedim as Rect boundsRectdim as SInt16 procIDdim as Boolean visibledim as Boolean filler1dim as Boolean goAwayFlagdim as Boolean filler2dim as SInt32 refCondim as SInt16 itemsIDdim as Str255 titleend record //#define DialogTPtr as Ptr //to DialogTemplate//#define DialogTHndl as Handle //Ptr to DialogTPtrbegin record AlertTemplatedim boundsRect as Rectdim itemsID    as SInt16dim stages     as StageListend record //#define AlertTPtr  as Ptr // to AlertTemplate//#define AlertTHndl as Handle //Ptr to AlertTPtr/* new type abstractions for the dialog manager *///#define DialogItemIndexZeroBased as SInt16#define DialogItemIndex as SInt16#define DialogItemType  as SInt16/* dialog manager callbacks *//* typedef CALLBACK_API( void , SoundProcPtr )(SInt16 soundNumber);typedef CALLBACK_API( Boolean , ModalFilterProcPtr )(DialogRef theDialog, EventRecord *theEvent, DialogItemIndex *itemHit);// ModalFilterYDProcPtr was previously in StandardFile.htypedef CALLBACK_API( Boolean , ModalFilterYDProcPtr )(DialogRef theDialog, EventRecord *theEvent, short *itemHit, void *yourDataPtr);typedef CALLBACK_API( void , UserItemProcPtr )(DialogRef theDialog, DialogItemIndex itemNo);typedef STACK_UPP_TYPE(SoundProcPtr)                            SoundUPP;typedef STACK_UPP_TYPE(ModalFilterProcPtr)                      ModalFilterUPP;typedef STACK_UPP_TYPE(ModalFilterYDProcPtr)                    ModalFilterYDUPP;typedef STACK_UPP_TYPE(UserItemProcPtr)                         UserItemUPP; */#define ModalFilterUPP as Proc/* *  NewModalFilterUPP() *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   available as macro/inline *///toolbox fn NewModalFilterUPP( ModalFilterProcPtr userRoutine) = ModalFilterUPP/* *  NewModalFilterYDUPP() *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0.2 and later *    Non-Carbon CFM:   available as macro/inline *///toolbox fn NewModalFilterYDUPP( proc userRoutine) = ModalFilterYDUPP/* *  NewUserItemUPP() *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   available as macro/inline */toolbox fn NewUserItemUPP( proc userRoutine ) = proc/* *  DisposeModalFilterUPP() *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   available as macro/inline *///toolbox DisposeModalFilterUPP( ModalFilterUPP userUPP)/* *  DisposeModalFilterYDUPP() *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0.2 and later *    Non-Carbon CFM:   available as macro/inline *///toolbox DisposeModalFilterYDUPP( ModalFilterYDUPP userUPP)/* *  DisposeUserItemUPP() *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   available as macro/inline */toolbox DisposeUserItemUPP( proc userUPP )/* *  InvokeModalFilterUPP() *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   available as macro/inline *///toolbox fn InvokeModalFilterUPP( DialogRef theDialog, EventRecord * theEvent, DialogItemIndex * itemHit, ModalFilterUPP userUPP) = Boolean/* *  InvokeModalFilterYDUPP() *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0.2 and later *    Non-Carbon CFM:   available as macro/inline *///toolbox fn InvokeModalFilterYDUPP( DialogRef theDialog, EventRecord * theEvent, short * itemHit, void * yourDataPtr, ModalFilterYDUPP userUPP) = Boolean/* *  InvokeUserItemUPP() *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   available as macro/inline *///toolbox InvokeUserItemUPP( DialogRef theDialog, DialogItemIndex itemNo, UserItemUPP userUPP)/*  ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ    ¥ Following types are valid with Appearance 1.0 and later  ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ*//*// Alert types to pass into StandardAlert_kAlertStopAlert = 0_kAlertNoteAlert = 1_kAlertCautionAlert = 2_kAlertPlainAlert = 3*/#define AlertType as SInt16/*_kAlertDefaultOKText = -1// "OK"_kAlertDefaultCancelText = -1// "Cancel"_kAlertDefaultOtherText = -1// "Don`t Save"*//* StandardAlert alert button numbers *//*_kAlertStdAlertOKButton = 1_kAlertStdAlertCancelButton = 2_kAlertStdAlertOtherButton = 3_kAlertStdAlertHelpButton = 4*//*// Dialog Flags for use in NewFeaturesDialog or dlgx resource_kDialogFlagsUseThemeBackground = (1<<0)_kDialogFlagsUseControlHierarchy = (1<<1)_kDialogFlagsHandleMovableModal = (1<<2)_kDialogFlagsUseThemeControls = (1<<3)*//*// Alert Flags for use in alrx resource_kAlertFlagsUseThemeBackground = (1<<0)_kAlertFlagsUseControlHierarchy = (1<<1)_kAlertFlagsAlertIsMovable = (1<<2)_kAlertFlagsUseThemeControls = (1<<3)*//* For dftb resource *//*_kDialogFontNoFontStyle = 0_kDialogFontUseFontMask = 0x0001_kDialogFontUseFaceMask = 0x0002_kDialogFontUseSizeMask = 0x0004_kDialogFontUseForeColorMask = 0x0008_kDialogFontUseBackColorMask = 0x0010_kDialogFontUseModeMask = 0x0020_kDialogFontUseJustMask = 0x0040_kDialogFontUseAllMask = 0x00FF_kDialogFontAddFontSizeMask = 0x0100_kDialogFontUseFontNameMask = 0x0200*/_kDialogFontAddToMetaFontMask = 0x0400/* Also for dftb resource. This one is available in Mac OS X or later. *//* It corresponds directly to kControlUseThemeFontIDMask from Controls.h. */_kDialogFontUseThemeFontIDMask = 0x0080/*begin record AlertStdAlertParamRecdim as Boolean movable// Make alert movable modaldim as Boolean helpButton// Is there a help button?dim as ModalFilterUPP filterProc// Event filterdim as ConstStringPtr defaultText// Text for button in OK positiondim as ConstStringPtr cancelText// Text for button in cancel positiondim as ConstStringPtr otherText// Text for button in left positiondim as SInt16 defaultButton// Which button behaves as the defaultdim as SInt16 cancelButton// Which one behaves as cancel (can be 0)dim as UInt16 position// Position (kWindowDefaultPosition in this case equals kWindowAlertPositionParentWindowScreen)end record */#define AlertStdAlertParamPtr as Ptr //to AlertStdAlertParamRec_kHICommandOther = _"othr" /* sent by standard sheet dialogs when the "other" button is pressed */_kStdCFStringAlertVersionOne = 1 /* current version of AlertStdCFStringAlertParamRec *//* *  Summary: *    Flags to CreateStandardAlert that are specified in the *    AlertStdCFStringAlertParamRec.flags field. *//*   * Applies to StandardSheet only. Do not dispose of the sheet window   * after closing it; allows the sheet to be re-used again in a later   * call to ShowSheetWindow.   */_kStdAlertDoNotDisposeSheet = 1<<0/*   * Applies to StandardSheet only. Causes the sheet window to be   * hidden immediately without animation effects when the default   * button is chosen by the user.   */_kStdAlertDoNotAnimateOnDefault = 1<<1/*   * Applies to StandardSheet only. Causes the sheet window to be   * hidden immediately without animation effects when the cancel   * button is chosen by the user.   */_kStdAlertDoNotAnimateOnCancel = 1<<2/*   * Applies to StandardSheet only. Causes the sheet window to be   * hidden immediately without animation effects when the other button   * is chosen by the user.   */_kStdAlertDoNotAnimateOnOther = 1<<3begin record AlertStdCFStringAlertParamRecdim version    as UInt32/* kStdCFStringAlertVersionOne */dim movable    as Boolean/* Make alert movable modal */dim helpButton as Boolean/* Is there a help button? */dim defaultText as CFStringRef/* Text for button in OK position */dim cancelText  as CFStringRef/* Text for button in cancel position */dim otherText   as CFStringRef/* Text for button in left position */dim defaultButton as SInt16/* Which button behaves as the default */dim cancelButton  as SInt16/* Which one behaves as cancel (can be 0) */dim position      as UInt16/* Position (kWindowDefaultPosition in this case equals kWindowAlertPositionParentWindowScreen) */dim flags         as UInt32 //OptionBits/* Options for the behavior of the alert or sheet */end record #define AlertStdCFStringAlertParamPtr as Ptr // to AlertStdCFStringAlertParamRec/* ÑÑÑ end Appearance 1.0 or later stuff*//* *  NewDialog() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn NewDialog( void * dStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, SInt16 procID, WindowRef behind, Boolean goAwayFlag, SInt32 refCon, Handle items ) = DialogRef/* *  GetNewDialog() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn GetNewDialog( SInt16 dialogID, void * dStorage, WindowRef behind) = DialogRef/* *  NewColorDialog() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn NewColorDialog( void * dStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, SInt16 procID, WindowRef behind, Boolean goAwayFlag, SInt32 refCon, Handle items ) = DialogRef/* *  DisposeDialog() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox DisposeDialog( DialogRef theDialog)/* *  ModalDialog() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox ModalDialog( ModalFilterUPP modalFilter, DialogItemIndex * itemHit)/* *  IsDialogEvent() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn IsDialogEvent( const EventRecord * theEvent) = Boolean/* *  DialogSelect() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn DialogSelect( const EventRecord * theEvent, DialogRef * theDialog, DialogItemIndex * itemHit) = Boolean/* *  DrawDialog() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox DrawDialog( DialogRef theDialog)/* *  UpdateDialog() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox UpdateDialog( DialogRef theDialog, RgnHandle updateRgn)/* *  HideDialogItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox HideDialogItem( DialogRef theDialog, DialogItemIndex itemNo)/* *  ShowDialogItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox ShowDialogItem( DialogRef theDialog, DialogItemIndex itemNo)/* *  FindDialogItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn FindDialogItem( DialogRef theDialog, Point thePt) = DialogItemIndexZeroBased/* *  DialogCut() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later */toolbox DialogCut( DialogRef theDialog)/* *  DialogPaste() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later */toolbox DialogPaste( DialogRef theDialog)/* *  DialogCopy() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later */toolbox DialogCopy( DialogRef theDialog)/* *  DialogDelete() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later */toolbox DialogDelete( DialogRef theDialog)/* *  Alert() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn Alert( SInt16 alertID, ModalFilterUPP modalFilter) = DialogItemIndex/* *  StopAlert() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn StopAlert( SInt16 alertID, ModalFilterUPP modalFilter) = DialogItemIndex/* *  NoteAlert() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn NoteAlert( SInt16 alertID, ModalFilterUPP modalFilter) = DialogItemIndex/* *  CautionAlert() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn CautionAlert( SInt16 alertID, ModalFilterUPP modalFilter) = DialogItemIndex/* *  GetDialogItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox GetDialogItem( DialogRef theDialog, DialogItemIndex itemNo, DialogItemType * itemType, Handle item.nil, Rect * box)/* *  SetDialogItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox SetDialogItem( DialogRef theDialog, DialogItemIndex itemNo, DialogItemType itemType, Handle item, const Rect * box)/* *  ParamText() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox ParamText( ConstStr255Param param0, ConstStr255Param param1, ConstStr255Param param2, ConstStr255Param param3)/* *  SelectDialogItemText() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox SelectDialogItemText( DialogRef theDialog, DialogItemIndex itemNo, SInt16 strtSel, SInt16 endSel)/* *  GetDialogItemText() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox GetDialogItemText( Handle item, Str255 text)/* *  SetDialogItemText() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox SetDialogItemText( Handle item, ConstStr255Param text)/* *  GetAlertStage() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn GetAlertStage( ) = SInt16/* *  SetDialogFont() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox SetDialogFont( SInt16 fontNum)/* *  ResetAlertStage() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox ResetAlertStage( )/* APIs in Carbon*//* *  GetParamText() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later */toolbox GetParamText( StringPtr param0, StringPtr param1, StringPtr param2, StringPtr param3 )/* *  AppendDITL() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox AppendDITL( DialogRef theDialog, Handle theHandle, DITLMethod method)/* *  CountDITL() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn CountDITL( DialogRef theDialog) = DialogItemIndex/* *  ShortenDITL() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox ShortenDITL( DialogRef theDialog, DialogItemIndex numberItems)/* *  InsertDialogItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   not available */toolbox fn InsertDialogItem( DialogRef theDialog, DialogItemIndex afterItem, DialogItemType itemType, Handle itemHandle, const Rect * box) = OSStatus/* *  RemoveDialogItems() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   not available */toolbox fn RemoveDialogItems( DialogRef theDialog, DialogItemIndex itemNo, DialogItemIndex amountToRemove, Boolean disposeItemData) = OSStatus/* *  StdFilterProc() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later */toolbox fn StdFilterProc( DialogRef theDialog, EventRecord * event, DialogItemIndex * itemHit) = Boolean/* *  GetStdFilterProc() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn GetStdFilterProc( ModalFilterUPP * theProc ) = OSErr/* *  SetDialogDefaultItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn SetDialogDefaultItem( DialogRef theDialog, DialogItemIndex newItem) = OSErr/* *  SetDialogCancelItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn SetDialogCancelItem( DialogRef theDialog, DialogItemIndex newItem) = OSErr/* *  SetDialogTracksCursor() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in InterfaceLib 7.1 and later *///toolbox fn SetDialogTracksCursor( DialogRef theDialog, Boolean tracks) = OSErr/*  ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ    ¥ Appearance Dialog Routines (available only with Appearance 1.0 and later)  ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ*//* *  NewFeaturesDialog() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in AppearanceLib 1.0 and later */toolbox fn NewFeaturesDialog( Ptr * inStorage, const Rect * inBoundsRect, Str255 inTitle, Boolean inIsVisible, SInt16 inProcID, WindowRef inBehind, Boolean inGoAwayFlag, SInt32 inRefCon, Handle inItemListHandle, UInt32 inFlags ) = DialogRef/* *  AutoSizeDialog() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in AppearanceLib 1.0 and later *///toolbox fn AutoSizeDialog( DialogRef inDialog) = OSErr/*    Regarding StandardAlert and constness:    Even though the inAlertParam parameter is marked const here, there was    a chance Dialog Manager would modify it on versions of Mac OS prior to 9.*//* *  StandardAlert() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in AppearanceLib 1.0 and later *///toolbox fn StandardAlert( AlertType inAlertType, ConstStr255Param inError, ConstStr255Param inExplanation, const AlertStdAlertParamRec * inAlertParam, SInt16 * outItemHit) = OSErr/* can be NULL *//* CFString-based StandardAlert and StandardSheet APIs are only available on Mac OS X and later*//* *  GetStandardAlertDefaultParams() *   *  Summary: *    Fills out an AlertStdCFStringAlertParamRec with default values: - *      not movable -   no help button -   default button with title *    kAlertDefaultOKText, meaning "OK" -   no cancel or other buttons *   *  Mac OS X threading: *    Not thread safe *   *  Parameters: *     *    param: *      The parameter block to initialize. *     *    version: *      The parameter block version; pass kStdCFStringAlertVersionOne. *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.0 and later *    Non-Carbon CFM:   not available */toolbox fn GetStandardAlertDefaultParams( AlertStdCFStringAlertParamPtr param, UInt32 version) = OSStatus/* *  CreateStandardAlert() *   *  Summary: *    Creates an alert containing standard elements and using standard *    formatting rules. *   *  Discussion: *    CreateStandardAlert should be used in conjunction with *    RunStandardAlert. After CreateStandardAlert returns, the alert is *    still invisible. RunStandardAlert will show the alert and run a *    modal dialog loop to process events in the alert.  *     *    The strings passed to this API in the error, explanation, and *    AlertStdCFStringAlertParamRec button title parameters will all be *    retained during the creation of the alert, and released when the *    alert is disposed by RunStandardAlert. There is no net change to *    the refcount of these strings across CreateStandardAlert and *    RunStandardAlert. *   *  Mac OS X threading: *    Not thread safe *   *  Parameters: *     *    alertType: *      The type of alert to create. *     *    error: *      The error string to display. CreateStandardAlert increments the *      refcount on this string, so you may release it after *      CreateStandardAlert returns if you don`t need it later. *     *    explanation: *      The explanation string to display. May be NULL or empty to *      display no explanation. CreateStandardAlert increments the *      refcount on this string, so you may release it after *      CreateStandardAlert returns if you don`t need it later. *     *    param: *      The parameter block describing how to create the alert. May be *      NULL. CreateStandardAlert increments the refcount on the button *      title strings in the parameter block, so you may release them *      after CreateStandardAlert returns if you don`t need them later. *     *    outAlert: *      On exit, contains the new alert. *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.0 and later *    Non-Carbon CFM:   not available */toolbox fn CreateStandardAlert( AlertType alertType, CFStringRef error, CFStringRef explanation, const AlertStdCFStringAlertParamRec *param, DialogRef *outAlert ) = OSStatus/* *  RunStandardAlert() *   *  Summary: *    Shows, runs, and destroys a standard alert using a modal dialog *    loop. *   *  Discussion: *    RunStandardAlert displays and runs an alert created by *    CreateStandardAlert. It handles all user interaction with the *    alert. After the user has dismissed the alert, RunStandardAlert *    destroys the alert dialog; the DialogRef will be invalid after *    RunStandardAlert returns. DO NOT call DisposeDialog.  *     *    NOTE: DO NOT call this function for a dialog that was not created *    with CreateStandardAlert! You will sorely regret it, I promise *    you. *   *  Mac OS X threading: *    Not thread safe *   *  Parameters: *     *    inAlert: *      The alert to display. *     *    filterProc: *      An event filter function for handling events that do not apply *      to the alert. May be NULL. *     *    outItemHit: *      On exit, contains the item index of the button that was pressed *      to close the alert. *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.0 and later *    Non-Carbon CFM:   not available */toolbox fn RunStandardAlert( DialogRef inAlert, ModalFilterUPP filterProc, DialogItemIndex *outItemHit ) = OSStatus/* *  CreateStandardSheet() *   *  Summary: *    Creates an alert containing standard elements and using standard *    formatting rules, and prepares it to be displayed as a sheet. *   *  Discussion: *    CreateStandardSheet should be used in conjunction with *    ShowSheetWindow. After CreateStandardSheet returns, the alert is *    still invisible. ShowSheetWindow will show the alert and then *    return. Events in the sheet are handled asynchronously; the *    application should be prepared for the sheet window to be part of *    its windowlist while running its own event loop. When a button in *    the sheet is pressed, the EventTargetRef passed to *    CreateStandardSheet will receive a command event with one of the *    command IDs kHICommandOK, kHICommandCancel, or kHICommandOther. *    The sheet is hidden and the sheet dialog destroyed before the *    command is sent; the caller does not have to call HideSheetWindow *    or DisposeDialog.  *     *    The strings passed to this API in the error, explanation, and *    AlertStdCFStringAlertParamRec button title parameters will all be *    retained during the creation of the sheet, and released when the *    sheet is disposed. There is no net change to the refcount of *    these strings across CreateStandardSheet and sheet destruction. *   *  Mac OS X threading: *    Not thread safe *   *  Parameters: *     *    alertType: *      The type of alert to create. *     *    error: *      The error string to display. CreateStandardSheet increments the *      refcount on this string, so you may release it after *      CreateStandardSheet returns if you don`t need it later. *     *    explanation: *      The explanation string to display. May be NULL or empty to *      display no explanation. CreateStandardSheet increments the *      refcount on this string, so you may release it after *      CreateStandardSheet returns if you don`t need it later. *     *    param: *      The parameter block describing how to create the alert. May be *      NULL. CreateStandardSheet increments the refcount on the button *      title strings in the parameter block, so you may release them *      after CreateStandardSheet returns if you don`t need them later. *     *    notifyTarget: *      The event target to be notified when the sheet is closed. The *      caller should install an event handler on this target for the *      [kEventClassCommand, kEventProcessCommand] event. May be NULL *      if the caller does not need the command event to be sent to any *      target.  *       *      Typically, this will be the event target for the parent window *      of the sheet; a standard practice is to install a handler on *      the parent window just before showing the sheet window, and to *      remove the handler from the parent window after the sheet has *      been closed. It is also possible to install a handler on the *      sheet window itself, in which case you would pass NULL for this *      parameter, since the command event is automatically sent to the *      sheet window already. If you install a handler on the sheet *      itself, make sure to return eventNotHandledErr from your *      handler, because CreateStandardSheet installs its own handler *      on the sheet and that handler must be allowed to run to close *      the sheet window and release the DialogRef. *     *    outSheet: *      On exit, contains the new alert. *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.0 and later *    Non-Carbon CFM:   not available */toolbox fn CreateStandardSheet( AlertType alertType, CFStringRef error, CFStringRef explanation, const AlertStdCFStringAlertParamRec *param, EventTargetRef notifyTarget, DialogRef *outSheet ) = OSStatus/* *  CloseStandardSheet() *   *  Summary: *    Closes a standard sheet dialog and releases the dialog data *    structures. *   *  Discussion: *    CloseStandardSheet is meant to be used when you need to remove a *    sheet because of a higher-priority request to close the sheet`s *    document window. For example, you might have a Save Changes sheet *    open on a document window. Meanwhile, the user drags the document *    into the trash. When your application sees that the document has *    been moved to the trash, it knows that it should close the *    document window, but first it needs to close the sheet.  *     *    CloseStandardSheet should not be used by your Carbon event *    handler in response to a click in one of the sheet buttons; the *    Dialog Manager will close the sheet automatically in that case. *     *     *    If kStdAlertDoNotDisposeSheet was specified when the sheet was *    created, the sheet dialog will be hidden but not released, and *    you can reuse the sheet later. *   *  Mac OS X threading: *    Not thread safe *   *  Parameters: *     *    inSheet: *      The sheet to close. *     *    inResultCommand: *      This command, if not zero, will be sent to the EventTarget *      specified when the sheet was created. *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.0 and later *    Non-Carbon CFM:   not available */toolbox fn CloseStandardSheet( DialogRef inSheet, UInt32 inResultCommand ) = OSStatus/* *  GetDialogItemAsControl() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in AppearanceLib 1.0 and later *///toolbox fn GetDialogItemAsControl( DialogRef inDialog, SInt16 inItemNo, ControlRef * outControl) = OSErr/* *  MoveDialogItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in AppearanceLib 1.0 and later *///toolbox fn MoveDialogItem( DialogRef inDialog, SInt16 inItemNo, SInt16 inHoriz, SInt16 inVert) = OSErr/* *  SizeDialogItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in AppearanceLib 1.0 and later *///toolbox fn SizeDialogItem( DialogRef inDialog, SInt16 inItemNo, SInt16 inWidth, SInt16 inHeight) = OSErr/* *  AppendDialogItemList() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in DialogsLib 8.5 and later */toolbox fn AppendDialogItemList( DialogRef dialog, SInt16 ditlID, DITLMethod method ) = OSErr/*  ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ    ¥ Dialog Routines available only with Appearance 1.1 (Mac OS 8.5) and later  ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ*//* *  SetDialogTimeout() *   *  Summary: *    Sets the timeout for a modal dialog. *   *  Discussion: *    SetDialogTimeout sets the delay after which a dialog will be *    automatically dismissed. When SetDialogTimeout is called, the *    Dialog Manager takes the current time, adds the timeout to it, *    and stores the result as the time to dismiss the dialog. If the *    dismissal time is reached, the dialog is automatically closed and *    the specified dialog item index is returned from ModalDialog in *    the itemHit parameter. If the user moves the mouse or presses a *    key, the dismissal time is reset by adding the original timeout *    to the time of the event. Only the ModalDialog API observes the *    timeout value; if you are handling events in a modeless dialog or *    sheet using IsDialogEvent and DialogSelect, the timeout will be *    ignored. *   *  Mac OS X threading: *    Not thread safe *   *  Parameters: *     *    inDialog: *      The dialog on which to set a timeout. *     *    inButtonToPress: *      The dialog item index that should be returned from ModalDialog *      when the timeout expires. *     *    inSecondsToWait: *      The time to wait before dismissing the dialog, in seconds. *   *  Result: *    An operating system result code. *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in DialogsLib 8.5 and later */toolbox fn SetDialogTimeout( DialogRef inDialog, SInt16 inButtonToPress, UInt32 inSecondsToWait ) = OSStatus/* *  GetDialogTimeout() *   *  Summary: *    Retrieves the timeout for a modal dialog. *   *  Mac OS X threading: *    Not thread safe *   *  Parameters: *     *    inDialog: *      The dialog from which to retrieve the timeout. *     *    outButtonToPress: *      On exit, contains the dialog item index that should be returned *      from ModalDialog when the dialog is dismissed. May be NULL if *      you do not need this information. *     *    outSecondsToWait: *      On exit, contains the time to wait before dismissing the *      dialog, in seconds. May be NULL if you do not need this *      information. *     *    outSecondsRemaining: *      On exit, contains the time until the dialog is dismissed, in *      seconds. May be NULL if you do not need this information. *   *  Result: *    An operating system result code. Returns dialogNoTimeoutErr if no *    timeout has been set for this dialog. *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in DialogsLib 8.5 and later */toolbox fn GetDialogTimeout( DialogRef inDialog, SInt16 *outButtonToPress, UInt32 *outSecondsToWait, UInt32 *outSecondsRemaining ) = OSStatus/* *  SetModalDialogEventMask() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in DialogsLib 8.5 and later */toolbox fn SetModalDialogEventMask( DialogRef inDialog, EventMask inMask ) = OSStatus/* *  GetModalDialogEventMask() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in DialogsLib 8.5 and later */toolbox fn GetModalDialogEventMask( DialogRef inDialog, EventMask *outMask ) = OSStatus/*  ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ    ¥ Accessor functions  ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ*//* *  GetDialogWindow() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later or as macro/inline */toolbox fn GetDialogWindow( DialogRef dialog ) = WindowRef/* *  GetDialogTextEditHandle() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later or as macro/inline */toolbox fn GetDialogTextEditHandle( DialogRef dialog ) = Handle //TEHandle/* *  GetDialogDefaultItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later or as macro/inline */toolbox fn GetDialogDefaultItem( DialogRef dialog ) = SInt16/* *  GetDialogCancelItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later or as macro/inline */toolbox fn GetDialogCancelItem( DialogRef dialog ) = SInt16/* *  GetDialogKeyboardFocusItem() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later or as macro/inline */toolbox fn GetDialogKeyboardFocusItem( DialogRef dialog ) = SInt16/* *  SetPortDialogPort() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later or as macro/inline */toolbox SetPortDialogPort( DialogRef dialog )/* *  GetDialogPort() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later or as macro/inline */toolbox fn GetDialogPort( DialogRef dialog ) = CGrafPtr/* *  GetDialogFromWindow() *   *  Mac OS X threading: *    Not thread safe *   *  Availability: *    Mac OS X:         in version 10.0 and later in Carbon.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later or as macro/inline */toolbox fn GetDialogFromWindow( WindowRef window ) = DialogRef#endif