/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------       13 October 2008*/#if ndef _DEFINEDINCARBON/* File: CarbonCore/Folders.h  Contains: Folder Manager Interfaces.  Version: CarbonCore-783~134  Copyright: © 1995-2006 by Apple Computer, Inc., all rights reserved.  Bugs?: For bug reports, consult the following page on the World Wide Web:  http://developer.apple.com/bugreporter/ *//* Common folder locations: ======================== kSystemDomain is generally /System and things inside it, so - kSystemDomain, kDomainLibraryFolderType is /System/Library/ - kSystemDomain, kTrashFolderType is a trash folder on the same volume as /System ( the boot disk ) - kSystemDomain, kDomainTopLevelFolderType is the root of the system domain, so it's the same as /System kLocalDomain is generally the admin-writeable, system-wide location for things, so - kLocalDomain, kDomainLibraryFolderType is /Library/ kUserDomain maps to the current user's home folder, so that - kUserDomain, kCurrentUserFolderType is the user's home folder itself ( "$HOME", ~ ) - kUserDomain, kDomainLibraryFolderType is the Library folder in the user home ( "$HOME/Library", "~/Library/" ) - kUserDomain, kPreferencesFolderType is the Preferences folder in the user home ( "$HOME/Library/Preferences/" ) - kUserDomain, kTrashFolderType is a trash folder on the same volume as the user home kNetworkDomain, if configured, is a network file system which a network administrator may have installed items into - kNetworkDomain, kApplicationsFolderType is /Network/Applications/ kClassicDomain, if configured, is where the Mac OS X Classic environment information is stored - kClassicDomain, kSystemFolderType is the currently active Macintosh Classic system folder ( or fnfErr if a Classic isn't installed )*/begin enum_kOnSystemDisk            = -32768  /* previously was 0x8000 but that is an unsigned value whereas vRefNum is signed*/_kOnAppropriateDisk       = -32767  /* Generally  the same as kOnSystemDisk  but it_"s clearer that this isn"t always the "boot" disk.*//* Folder Domains - Carbon only. The constants above can continue to be used, but the folder/volume returned will*//* be from one of the domains below.*/_kSystemDomain            = -32766  /* Read-only system hierarchy.*/_kLocalDomain             = -32765  /* All users of a single machine have access to these resources.*/_kNetworkDomain           = -32764  /* All users configured to use a common network server has access to these resources.*/_kUserDomain              = -32763  /* Read/write. Resources that are private to the user.*/_kClassicDomain           = -32762  /* Domain referring to the currently configured Classic System Folder. Not supported in Mac OS X Leopard and later.*/_kFolderManagerLastDomain = -32760end enum/* The ID of the last domain in the above list, used by the Folder Manager to determine if a given  parameter should be treated as a domain or a volume...*/begin enum_kLastDomainConstant = -32760end enumbegin enum_kCreateFolder     = _true _kDontCreateFolder = _falseend enum/* * FindFolder() *  * Summary: * Obtains location information for system-related directories. *  * Discussion: * For the folder type on the particular volume (specified, * respectively, in the folderType and vRefNum parameters), the * FindFolder function returns the directory's volume reference * number in the foundVRefNum parameter and its directory ID in the * foundDirID parameter. *  * The specified folder used for a given volume might be located on * a different volume in future versions of system software; * therefore, do not assume the volume that you specify in vRefNum * and the volume returned in foundVRefNum will be the same. *  * Specify a volume reference number (or the constant kOnSystemDisk * for the startup disk) or one of the domain constants ( on Mac OS * X ) in the vRefNum parameter. *  * Specify a four-character folder type--or the constant that * represents it--in the folderType parameter. *  * Use the constant kCreateFolder in the createFolder parameter to * tell FindFolder to create a directory if it does not already * exist; otherwise, use the constant kDontCreateFolder. Directories * inside the System Folder are created only if the System Folder * directory exists. The FindFolder function will not create a * System Folder directory even if you specify the kCreateFolder * constant in the createFolder parameter. *  * The FindFolder function returns a nonzero result code if the * folder isn't found, and it can also return other file system * errors reported by the File Manager or Memory Manager. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * vRefNum: * Pass the volume reference number of the volume on which you * want to locate a directory, or a constant specifying a disk or * domain. The constants which you can use in this parameter are * described in "Disk and Domain Constants". * Note that, on Mac OS X, passing a volume reference number in * this parameter does not make sense for most of the folder type * selectors which you can specify in the folderType parameter. On * Mac OS X, folders are "domain-oriented"; because there may be * more than one domain on any given physical volume, asking for * these folders on a per-volume basis yields undefined results. * For example, if you were to request the Fonts folder * (represented by the selector kFontsFolderType ) on volume -100, * are you requesting the folder /System/Library/Fonts, * /Library/Fonts, or ~/Fonts? On Mac OS X you should pass a disk * or domain constant in this parameter. *  * folderType: * A four-character folder type, or a constant that represents the * type, for the directory you want to find. *  * createFolder: * Pass the constant kCreateFolder in this parameter to create a * directory if it does not already exist; otherwise, pass the * constant kDontCreateFolder. *  * foundVRefNum: * The volume reference number, returned by FindFolder , for the * volume containing the directory you specify in the folderType * parameter. *  * foundDirID: * The directory ID number, returned by FindFolder , for the * directory you specify in the folderType parameter. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in InterfaceLib 7.1 and later*///toolbox fn FindFolder( FSVolumeRefNum vRefNum, OSType folderType, Boolean createFolder, FSVolumeRefNum * foundVRefNum, SInt32 * foundDirID ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * ReleaseFolder() *** DEPRECATED *** *  * Deprecated: * This call is not needed on Mac OS X and later. *  * Summary: * On Mac OS 9.x and earlier, release any hold the system may have * on a given folder on a volume so that the volume may be unmounted. *  * Discussion: * On Mac OS 9.x, the system sometimes has files open on volumes * which need to be closed in order for the volume to be * successfully unmounted. This call releases any hold the Folder * Manager may have for the given volume. * <br> This call is unnecessary on Mac OS X and later. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * vRefNum: * The vRefNum to release. *  * folderType: * The folder type to release. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework but deprecated in 10.3 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn ReleaseFolder( FSVolumeRefNum vRefNum, OSType folderType ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3;/* * FSFindFolder() *  * Summary: * FSFindFolder returns an FSRef for certain system-related * directories. *  * Discussion: * For the folder type on the particular volume (specified, * respectively, in the folderType and vRefNum parameters), the * FindFolder function returns the FSRef of that directory.  *  * The specified folder used for a given volume might be located on * a different volume in future versions of system software; * therefore, do not assume the volume that you specify in vRefNum * and the volume returned in the FSRef will be the same. *  * Specify a volume reference number (or the constant kOnSystemDisk * for the startup disk) or one of the domain constants ( on Mac OS * X ) in the vRefNum parameter. *  * Specify a four-character folder type--or the constant that * represents it--in the folderType parameter. *  * Use the constant kCreateFolder in the createFolder parameter to * tell FindFolder to create a directory if it does not already * exist; otherwise, use the constant kDontCreateFolder. Directories * inside the System Folder are created only if the System Folder * directory exists. The FindFolder function will not create a * System Folder directory even if you specify the kCreateFolder * constant in the createFolder parameter. *  * The FindFolder function returns a nonzero result code if the * folder isn't found, and it can also return other file system * errors reported by the File Manager or Memory Manager. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * vRefNum: * The volume reference number (or the constant kOnSystemDisk for * the startup disk) or one of the domain constants ( like * kUserDomain ) of the volume or domain in which you want to * locate a directory. *  * folderType: * A four-character folder type, or a constant that represents the * type, for the directory you want to find. *  * createFolder: * Pass the constant kCreateFolder in this parameter to create a * directory if it does not already exist; otherwise, pass the * constant kDontCreateFolder. *  * foundRef: * The FSRef for the directory you specify on the volume or domain * and folderType given. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.1 and later * Non-Carbon CFM: in InterfaceLib 9.1 and later*///toolbox fn FSFindFolder( FSVolumeRefNum vRefNum, OSType folderType, Boolean createFolder, FSRef * foundRef ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;toolbox fn FSFindFolder( SInt16 vRefNum, OSType folderType, Boolean createFolder, FSRef *foundRef ) = OSErr/* * Folder types * */begin enum_kDesktopFolderType                   = _"desk"  /* the desktop folder; objects in this folder show on the desktop. */_kTrashFolderType                     = _"trsh"  /* the trash folder; objects in this folder show up in the trash */_kWhereToEmptyTrashFolderType         = _"empt"  /* the "empty trash" folder; Finder starts empty from here down */_kFontsFolderType                     = _"font"  /* Fonts go here */_kPreferencesFolderType               = _"pref"  /* preferences for applications go here */_kSystemPreferencesFolderType         = _"sprf"  /* the PreferencePanes folder  where Mac OS X Preference Panes go */_kTemporaryFolderType                 = _"temp"  /* On Mac OS X  each user has their own temporary items folder  and the Folder Manager attempts to set permissions of these*//* folders such that other users can not access the data inside. On Mac OS X 10.4 and later the data inside the temporary*//* items folder is deleted at logout and at boot, but not otherwise. Earlier version of Mac OS X would delete items inside*//* the temporary items folder after a period of inaccess. You can ask for a temporary item in a specific domain or on a *//* particular volume by FSVolumeRefNum. If you want a location for temporary items for a short time, then use either*//* ( kUserDomain, kkTemporaryFolderType ) or ( kSystemDomain, kTemporaryFolderType ). The kUserDomain varient will always be*//* on the same volume as the user's home folder, while the kSystemDomain version will be on the same volume as /var/tmp/ ( and*//* will probably be on the local hard drive in case the user's home is a network volume ). If you want a location for a temporary*//* file or folder to use for saving a document, especially if you want to use FSpExchangeFile() to implement a safe-save, then*//* ask for the temporary items folder on the same volume as the file you are safe saving.*//* However, be prepared for a failure to find a temporary folder in any domain or on any volume. Some volumes may not have*//* a location for a temporary folder, or the permissions of the volume may be such that the Folder Manager can not return*//* a temporary folder for the volume.*//* If your application creates an item in a temporary items older you should delete that item as soon as it is not needed,*//* and certainly before your application exits, since otherwise the item is consuming disk space until the user logs out or*//* restarts. Any items left inside a temporary items folder should be moved into a folder inside the Trash folder on the disk*//* when the user logs in, inside a folder named "Recovered items", in case there is anything useful to the end user.*/_kChewableItemsFolderType             = _"flnt"  /* similar to kTemporaryItemsFolderType  except items in this folder are deleted at boot or when the disk is unmounted */_kTemporaryItemsInCacheDataFolderType = _"vtmp"  /* A folder inside the kCachedDataFolderType for the given domain which can be used for transient data*/_kApplicationsFolderType              = _"apps"  /* Applications on Mac OS X are typically put in this folder ( or a subfolder ).*/_kVolumeRootFolderType                = _"root"  /* root folder of a volume or domain */_kDomainTopLevelFolderType            = _"dtop"  /* The top-level of a Folder domain  e.g. "/System"*/_kDomainLibraryFolderType             = _"dlib"  /* the Library subfolder of a particular domain*/_kUsersFolderType                     = _"usrs"  /* "Users" folder  usually contains one folder for each user. */_kCurrentUserFolderType               = _"cusr"  /* The folder for the currently logged on user; domain passed in is ignored. */_kSharedUserDataFolderType            = _"sdat" /* A Shared folder  readable & writeable by all users */end enum/* The following selectors refer specifically to subfolders inside the user's home folder, and should be used only with kUserDomain as the domain in the various FindFolder calls.*/begin enum_kDocumentsFolderType        = _"docs"  /* User documents are typically put in this folder ( or a subfolder ).*/_kPictureDocumentsFolderType = _"pdoc"  /* Refers to the "Pictures" folder in a users home directory*/_kMovieDocumentsFolderType   = _"mdoc"  /* Refers to the "Movies" folder in a users home directory*/_kMusicDocumentsFolderType   = 0xB5646F63/*_"µdoc"*/  /* Refers to the "Music" folder in a users home directory*/_kInternetSitesFolderType    = _"site"  /* Refers to the "Sites" folder in a users home directory*/_kPublicFolderType           = _"pubb" /* Refers to the "Public" folder in a users home directory*/end enumbegin enum_kSharedLibrariesFolderType     = 0xC46C6962/*_"Älib"*/  /* for general shared libs. */_kVoicesFolderType              = _"fvoc"  /* macintalk can live here */_kUtilitiesFolderType           = 0x757469C4/*_"utiÄ"*/  /* for Utilities folder */_kThemesFolderType              = _"thme"  /* for Theme data files */_kFavoritesFolderType           = _"favs"  /* Favorties folder for Navigation Services */_kInternetSearchSitesFolderType = _"issf"  /* Internet Search Sites folder */_kInstallerLogsFolderType       = _"ilgf"  /* Installer Logs folder */_kScriptsFolderType             = 0x736372C4/*_"scrÄ"*/  /* Scripts folder */_kFolderActionsFolderType       = _"fasf"  /* Folder Actions Scripts folder */_kSpeakableItemsFolderType      = _"spki"  /* Speakable Items folder */_kKeychainFolderType            = _"kchn" /* Keychain folder */end enum/* New Folder Types to accommodate the Mac OS X Folder Manager *//* These folder types are not applicable on Mac OS 9. */begin enum_kColorSyncFolderType                = _"sync"  /* Contains ColorSync-related folders*/_kColorSyncCMMFolderType             = _"ccmm"  /* ColorSync CMMs*/_kColorSyncScriptingFolderType       = _"cscr"  /* ColorSync Scripting support*/_kPrintersFolderType                 = _"impr"  /* Contains Printing-related folders*/_kSpeechFolderType                   = _"spch"  /* Contains Speech-related folders*/_kCarbonLibraryFolderType            = _"carb"  /* Contains Carbon-specific file*/_kDocumentationFolderType            = _"info"  /* Contains Documentation files (not user documents)*/_kISSDownloadsFolderType             = _"issd"  /* Contains Internet Search Sites downloaded from the Internet*/_kUserSpecificTmpFolderType          = _"utmp"  /* Contains temporary items created on behalf of the current user*/_kCachedDataFolderType               = _"cach"  /* Contains various cache files for different clients*/_kFrameworksFolderType               = _"fram"  /* Contains MacOS X Framework folders*/_kPrivateFrameworksFolderType        = _"pfrm"  /* Contains MacOS X Private Framework folders */_kClassicDesktopFolderType           = _"sdsk"  /* MacOS 9 compatible desktop folder - same as kSystemDesktopFolderType but with a more appropriate name for Mac OS X code.*/_kSystemSoundsFolderType             = _"ssnd"  /* Contains Mac OS X System Sound Files ( valid in kSystemDomain  kLocalDomain  and kUserDomain )*/_kComponentsFolderType               = _"cmpd"  /* Contains Mac OS X components ( valid in kSystemDomain  kLocalDomain  and kUserDomain )*/_kQuickTimeComponentsFolderType      = _"wcmp"  /* Contains QuickTime components for Mac OS X ( valid in kSystemDomain  kLocalDomain  and kUserDomain )*/_kCoreServicesFolderType             = _"csrv"  /* Refers to the "/System/Library/CoreServices" folder on Mac OS X*/_kAudioSupportFolderType             = _"adio"  /* Refers to the Audio support folder for Mac OS X*/_kAudioPresetsFolderType             = _"apst"  /* "Presets" folder of "Audio" folder  Mac OS X 10.4 and later*/_kAudioSoundsFolderType              = _"asnd"  /* Refers to the Sounds subfolder of Audio Support*/_kAudioSoundBanksFolderType          = _"bank"  /* Refers to the Banks subfolder of the Sounds Folder*/_kAudioAlertSoundsFolderType         = _"alrt"  /* Refers to the Alert Sounds subfolder of the Sound Folder*/_kAudioPlugInsFolderType             = _"aplg"  /* Refers to the Plug-ins subfolder of the Audio Folder */_kAudioComponentsFolderType          = _"acmp"  /* Refers to the Components subfolder of the Audio Plug-ins Folder */_kKernelExtensionsFolderType         = _"kext"  /* Refers to the Kernel Extensions Folder on Mac OS X*/_kDirectoryServicesFolderType        = _"dsrv"  /* Refers to the Directory Services folder on Mac OS X*/_kDirectoryServicesPlugInsFolderType = _"dplg"  /* Refers to the Directory Services Plug-Ins folder on Mac OS X */_kInstallerReceiptsFolderType        = _"rcpt"  /* Refers to the "Receipts" folder in Mac OS X*/_kFileSystemSupportFolderType        = _"fsys"  /* Refers to the [domain]/Library/Filesystems folder in Mac OS X*/_kAppleShareSupportFolderType        = _"shar"  /* Refers to the [domain]/Library/Filesystems/AppleShare folder in Mac OS X*/_kAppleShareAuthenticationFolderType = _"auth"  /* Refers to the [domain]/Library/Filesystems/AppleShare/Authentication folder in Mac OS X*/_kMIDIDriversFolderType              = _"midi"  /* Refers to the MIDI Drivers folder on Mac OS X*/_kKeyboardLayoutsFolderType          = _"klay"  /* Refers to the [domain]/Library/KeyboardLayouts folder in Mac OS X*/_kIndexFilesFolderType               = _"indx"  /* Refers to the [domain]/Library/Indexes folder in Mac OS X*/_kFindByContentIndexesFolderType     = _"fbcx"  /* Refers to the [domain]/Library/Indexes/FindByContent folder in Mac OS X*/_kManagedItemsFolderType             = _"mang"  /* Refers to the Managed Items folder for Mac OS X */_kBootTimeStartupItemsFolderType     = _"empz"  /* Refers to the "StartupItems" folder of Mac OS X */_kAutomatorWorkflowsFolderType       = _"flow"  /* Automator Workflows folder */_kAutosaveInformationFolderType      = _"asav"  /* ~/Library/Autosaved Information/ folder  can be used to store autosave information for user"s applications. Available in Mac OS X 10.4 and later. */_kSpotlightSavedSearchesFolderType   = _"spot"  /* Usually ~/Library/Saved Searches/; used by Finder and Nav/Cocoa panels to find saved Spotlight searches *//* The following folder types are available in Mac OS X 10.5 and later */_kSpotlightImportersFolderType       = _"simp"  /* Folder for Spotlight importers  usually /Library/Spotlight/ or ~/Library/Spotlight  etc. */_kSpotlightMetadataCacheFolderType   = _"scch"  /* Folder for Spotlight metadata caches  for example: ~/Library/Caches/Metadata/ */_kInputManagersFolderType            = _"inpt"  /* InputManagers */_kInputMethodsFolderType             = _"inpf"  /* ../Library/Input Methods/ */_kLibraryAssistantsFolderType        = _"astl"  /* Refers to the [domain]/Library/Assistants folder*/_kAudioDigidesignFolderType          = _"adig"  /* Refers to the Digidesign subfolder of the Audio Plug-ins folder*/_kAudioVSTFolderType                 = _"avst"  /* Refers to the VST subfolder of the Audio Plug-ins folder*/_kColorPickersFolderType             = _"cpkr"  /* Refers to the ColorPickers folder*/_kCompositionsFolderType             = _"cmps"  /* Refers to the Compositions folder*/_kFontCollectionsFolderType          = _"fncl"  /* Refers to the FontCollections folder*/_kiMovieFolderType                   = _"imov"  /* Refers to the iMovie folder*/_kiMoviePlugInsFolderType            = _"impi"  /* Refers to the Plug-ins subfolder of the iMovie Folder*/_kiMovieSoundEffectsFolderType       = _"imse"  /* Refers to the Sound Effects subfolder of the iMovie Folder*/_kDownloadsFolderType                = _"down" /* Refers to the ~/Downloads folder*/end enumbegin enum_kColorSyncProfilesFolderType  = _"prof"  /* for ColorSyncª Profiles */_kApplicationSupportFolderType = _"asup"  /* third-party items and folders */_kTextEncodingsFolderType      = 0xC4746578/*_"Ätex"*/  /* encoding tables */_kPrinterDescriptionFolderType = _"ppdf"  /* new folder at root of System folder for printer descs. */_kPrinterDriverFolderType      = 0xC4707264/*_"Äprd"*/  /* new folder at root of System folder for printer drivers */_kScriptingAdditionsFolderType = 0xC4736372/*_"Äscr"*/ /* at root of system folder */end enumbegin enum_kClassicPreferencesFolderType = _"cprf" /* "Classic" folder in ~/Library/ for redirected preference files. */end enum#if 0begin enum/* The following selectors really only make sense when used within the Classic environment on Mac OS X.*/_kSystemFolderType                           = _"macs"  /* the system folder */_kSystemDesktopFolderType                    = _"sdsk"  /* the desktop folder at the root of the hard drive  never the redirected user desktop folder */_kSystemTrashFolderType                      = _"strs"  /* the trash folder at the root of the drive  never the redirected user trash folder */_kPrintMonitorDocsFolderType                 = _"prnt"  /* Print Monitor documents */_kALMModulesFolderType                       = _"walk"  /* for Location Manager Module files except type "thng" (within kExtensionFolderType) */_kALMPreferencesFolderType                   = _"trip"  /* for Location Manager Preferences (within kPreferencesFolderType; contains kALMLocationsFolderType) */_kALMLocationsFolderType                     = _"fall"  /* for Location Manager Locations (within kALMPreferencesFolderType) */_kAppleExtrasFolderType                      = 0x616578C4/*_"aexÄ"*/  /* for Apple Extras folder */_kContextualMenuItemsFolderType              = _"cmnu"  /* for Contextual Menu items */_kMacOSReadMesFolderType                     = 0x6D6F72C4/*_"morÄ"*/  /* for MacOS ReadMes folder */_kStartupFolderType                          = _"strt"  /* Finder objects (applications  documents  DAs  aliases  to...) to open at startup go here */_kShutdownFolderType                         = _"shdf"  /* Finder objects (applications  documents  DAs  aliases  to...) to open at shutdown go here */_kAppleMenuFolderType                        = _"amnu"  /* Finder objects to put into the Apple menu go here */_kControlPanelFolderType                     = _"ctrl"  /* Control Panels go here (may contain INITs) */_kSystemControlPanelFolderType               = _"sctl"  /* System control panels folder - never the redirected one  always "Control Panels" inside the System Folder */_kExtensionFolderType                        = _"extn"  /* System extensions go here */_kExtensionDisabledFolderType                = _"extD" _kControlPanelDisabledFolderType             = _"ctrD" _kSystemExtensionDisabledFolderType          = _"macD" _kStartupItemsDisabledFolderType             = _"strD" _kShutdownItemsDisabledFolderType            = _"shdD" _kAssistantsFolderType                       = 0x617374C4/*_"astÄ"*/  /* for Assistants (MacOS Setup Assistant  etc) */_kStationeryFolderType                       = _"odst"  /* stationery */_kOpenDocFolderType                          = _"odod"  /* OpenDoc root */_kOpenDocShellPlugInsFolderType              = _"odsp"  /* OpenDoc Shell Plug-Ins in OpenDoc folder */_kEditorsFolderType                          = _"oded"  /* OpenDoc editors in MacOS Folder */_kOpenDocEditorsFolderType                   = 0xC46F6466/*_"Äodf"*/  /* OpenDoc subfolder of Editors folder */_kOpenDocLibrariesFolderType                 = _"odlb"  /* OpenDoc libraries folder */_kGenEditorsFolderType                       = 0xC4656469/*_"Äedi"*/  /* CKH general editors folder at root level of Sys folder */_kHelpFolderType                             = 0xC4686C70/*_"Ählp"*/  /* CKH help folder currently at root of system folder */_kInternetPlugInFolderType                   = 0xC46E6574/*_"Änet"*/  /* CKH internet plug ins for browsers and stuff */_kModemScriptsFolderType                     = 0xC46D6F64/*_"Ämod"*/  /* CKH modem scripts  get "em OUT of the Extensions folder */_kControlStripModulesFolderType              = _"sdev"  /* CKH for control strip modules */_kInternetFolderType                         = 0x696E74C4/*_"intÄ"*/  /* Internet folder (root level of startup volume) */_kAppearanceFolderType                       = _"appr"  /* Appearance folder (root of system folder) */_kSoundSetsFolderType                        = _"snds"  /* Sound Sets folder (in Appearance folder) */_kDesktopPicturesFolderType                  = 0x647470C4/*_"dtpÄ"*/  /* Desktop Pictures folder (in Appearance folder) */_kFindSupportFolderType                      = _"fnds"  /* Find support folder */_kRecentApplicationsFolderType               = _"rapp"  /* Recent Applications folder */_kRecentDocumentsFolderType                  = _"rdoc"  /* Recent Documents folder */_kRecentServersFolderType                    = _"rsvr"  /* Recent Servers folder */_kLauncherItemsFolderType                    = _"laun"  /* Launcher Items folder */_kQuickTimeExtensionsFolderType              = _"qtex"  /* QuickTime Extensions Folder (in Extensions folder) */_kDisplayExtensionsFolderType                = _"dspl"  /* Display Extensions Folder (in Extensions folder) */_kMultiprocessingFolderType                  = _"mpxf"  /* Multiprocessing Folder (in Extensions folder) */_kPrintingPlugInsFolderType                  = _"pplg"  /* Printing Plug-Ins Folder (in Extensions folder) */_kAppleshareAutomountServerAliasesFolderType = 0x737276C4/*_"srvÄ"*/  /* Appleshare puts volumes to automount inside this folder. */_kVolumeSettingsFolderType                   = _"vsfd"  /* Volume specific user information goes here */_kPreMacOS91ApplicationsFolderType           = 0x8C707073/*_"pps"*/  /* The "Applications" folder  pre Mac OS 9.1 */_kPreMacOS91InstallerLogsFolderType          = 0x946C6766/*_"lgf"*/  /* The "Installer Logs" folder  pre Mac OS 9.1 */_kPreMacOS91AssistantsFolderType             = 0x8C7374C4/*_"stÄ"*/  /* The "Assistants" folder  pre Mac OS 9.1 */_kPreMacOS91UtilitiesFolderType              = 0x9F7469C4/*_"tiÄ"*/  /* The "Utilities" folder  pre Mac OS 9.1 */_kPreMacOS91AppleExtrasFolderType            = 0x8C6578C4/*_"exÄ"*/  /* The "Apple Extras" folder  pre Mac OS 9.1 */_kPreMacOS91MacOSReadMesFolderType           = 0xB56F72C4/*_"µorÄ"*/  /* The "Mac OS ReadMes" folder  pre Mac OS 9.1 */_kPreMacOS91InternetFolderType               = 0x946E74C4/*_"ntÄ"*/  /* The "Internet" folder  pre Mac OS 9.1 */_kPreMacOS91AutomountedServersFolderType     = 0xA77276C4/*_"§rvÄ"*/  /* The "Servers" folder  pre Mac OS 9.1 */_kPreMacOS91StationeryFolderType             = 0xBF647374/*_"¿dst"*/  /* The "Stationery" folder  pre Mac OS 9.1 */_kLocalesFolderType                          = 0xC46C6F63/*_"Äloc"*/  /* PKE for Locales folder */_kFindByContentPluginsFolderType             = _"fbcp"  /* Find By Content Plug-ins */_kFindByContentFolderType                    = _"fbcf" /* Find by content folder */end enum/* These folder types are not supported on Mac OS X at all and should be removed from your source code.*/begin enum_kMagicTemporaryItemsFolderType        = _"mtmp" _kTemporaryItemsInUserDomainFolderType = _"temq" _kCurrentUserRemoteFolderLocation      = _"rusf"  /* The remote folder for the currently logged on user */_kCurrentUserRemoteFolderType          = _"rusr" /* The remote folder location for the currently logged on user */end enum#endif // 0/* These folder types are deprecated in 10.5. The location of developer tools is no longer hard coded to "/Developer/" and  so these folder types work only when developer tools are installed at the default location.*/begin enum_kDeveloperDocsFolderType         = _"ddoc"  /* Deprecated in 10.5. Contains Developer Documentation files and folders*/_kDeveloperHelpFolderType         = _"devh"  /* Deprecated in 10.5. Contains Developer Help related files*/_kDeveloperFolderType             = _"devf"  /* Deprecated in 10.5. Contains MacOS X Developer Resources*/_kDeveloperApplicationsFolderType = _"dapp" /* Deprecated in 10.5. Contains Developer Applications*/end enum/* FolderDescFlags values */begin enum_kCreateFolderAtBoot         = 0x00000002 _kCreateFolderAtBootBit      = 1 _kFolderCreatedInvisible     = 0x00000004 _kFolderCreatedInvisibleBit  = 2 _kFolderCreatedNameLocked    = 0x00000008 _kFolderCreatedNameLockedBit = 3 _kFolderCreatedAdminPrivs    = 0x00000010 _kFolderCreatedAdminPrivsBit = 4end enumbegin enum_kFolderInUserFolder                                                     = 0x00000020 _kFolderInUserFolderBit                                                  = 5 _kFolderTrackedByAlias                                                   = 0x00000040 _kFolderTrackedByAliasBit                                                = 6 _kFolderInRemoteUserFolderIfAvailable                                    = 0x00000080 _kFolderInRemoteUserFolderIfAvailableBit                                 = 7 _kFolderNeverMatchedInIdentifyFolder                                     = 0x00000100 _kFolderNeverMatchedInIdentifyFolderBit                                  = 8 _kFolderMustStayOnSameVolume                                             = 0x00000200 _kFolderMustStayOnSameVolumeBit                                          = 9 _kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledMask               = 0x00000400 _kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledBit                = 10 _kFolderInLocalOrRemoteUserFolder                                        = _kFolderInUserFolder + _kFolderInRemoteUserFolderIfAvailable _kFolderManagerNotCreatedOnRemoteVolumesBit                              = 11 _kFolderManagerNotCreatedOnRemoteVolumesMask                             = (1 << _kFolderManagerNotCreatedOnRemoteVolumesBit) _kFolderManagerNewlyCreatedFolderIsLocalizedBit                          = 12 //_kFolderManagerNewlyCreatedFolderShouldHaveDotLocalizedCreatedWithinMask = (1 << _kFolderManagerNewlyCreatedFolderIsLocalizedBit)end enum#define FolderDescFlags as UInt32/* FolderClass values */begin enum_kRelativeFolder           = _"relf" _kRedirectedRelativeFolder = _"rrel" _kSpecialFolder            = _"spcf"end enum#define FolderClass as OSType/* special folder locations */begin enum_kBlessedFolder = _"blsf" _kRootFolder    = _"rotf"end enumbegin enum_kCurrentUserFolderLocation = _"cusf" /* the magic "Current User" folder location*/end enumbegin enum_kDictionariesFolderType    = _"dict"  /* Dictionaries folder */_kLogsFolderType            = _"logs"  /* Logs folder */_kPreferencePanesFolderType = _"ppan" /* PreferencePanes folder  in .../Library/ */end enumbegin enum_kWidgetsFolderType      = _"wdgt"  /* Dashboard Widgets folder  in system  local  and user domains */_kScreenSaversFolderType = _"scrn" /* Screen Savers folder  in system  local  and user domains */end enum#define FolderType as OSType#define FolderLocation as OSTypebegin record FolderDescdim as unsigned long    descSize// Sizedim as FolderType       foldType dim as FolderDescFlags  flags dim as FolderClass      foldClass dim as FolderType       foldLocation dim as OSType           badgeSignature dim as OSType           badgeType dim as UInt32           reserved dim as Str63            name // StrFileName/* Str63 on MacOS*/end record// typedef struct FolderDesc FolderDesc;#define FolderDescPtr as FolderDesc/*#define RoutingFlags as UInt32begin record FolderRoutingdim as unsigned long descSize // Sizedim as OSType        fileType dim as FolderType    routeFromFolder dim as FolderType    routeToFolder dim as RoutingFlags  flags end record// typedef struct FolderRouting FolderRouting;#define FolderRoutingPtr as FolderRouting*//* * AddFolderDescriptor() *  * Summary: * Copies the supplied information into a new folder descriptor * entry in the system folder list. @discussion The * AddFolderDescriptor function copies the supplied information into * a new descriptor entry in the system folder list. You need to * provide folder descriptors for each folder you wish the Folder * Manager to be able to find via the function FindFolder. For * example, a child folder located in a parent folder needs to have * a descriptor created both for it and its parent folder, so that * the child can be found. This function is supported under Mac OS 8 * and later.  * On Mac OS X, folder descriptors added in one process are not * visible in other processes. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * foldType: * Pass a constant identifying the type of the folder you wish the * Folder Manager to be able to find. See ÒFolder Type ConstantsÓ. *  * flags: * Set these flags to indicate whether a folder is created during * startup, if the folder name is locked, and if the folder is * created invisible; see ÒFolder Descriptor FlagsÓ. *  * foldClass: * Pass the class of the folder which you wish the Folder Manager * to be able to find. The folder class determines how the * foldLocation parameter is interpreted. See "Folder Descriptor * Classes" for a discussion of relative and special folder * classes. *  * foldLocation: * For a relative folder, specify the folder type of the parent * folder of the target. For a special folder, specify the * location of the folder; see ÒFolder Descriptor LocationsÓ. *  * badgeSignature: * Reserved. Pass 0. *  * badgeType: * Reserved. Pass 0. *  * name: * A string specifying the name of the desired folder. For * relative folders, this is the exact name of the desired folder. * For special folders, the actual target folder may have a * different name than the name specified in the folder * descriptor. For example, the System Folder is often given a * different name, but it can still be located with FindFolder. *  * replaceFlag: * Pass a Boolean value indicating whether you wish to replace a * folder descriptor that already exists for the specified folder * type. If true , it replaces the folder descriptor for the * specified folder type. If false , it does not replace the * folder descriptor for the specified folder type. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*//*toolbox fn AddFolderDescriptor( Â     FolderType foldType,Â     FolderDescFlags flags,Â     FolderClass foldClass,Â     FolderLocation foldLocation,Â     OSType badgeSignature,Â     OSType badgeType,Â     Str63  name,Â     Boolean replaceFlag ) = OSErr//  AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;*//* * GetFolderTypes() *  * Summary: * Obtains the folder types contained in the global descriptor list. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * requestedTypeCount: * Pass the number of FolderType values that can fit in the buffer * pointed to by the theTypes parameter; see ÒFolder Type * ConstantsÓ. *  * totalTypeCount: * Pass a pointer to an unsigned 32-bit integer value. On return, * the value is set to the total number of FolderType values in * the list. The totalTypeCount parameter may produce a value that * is larger or smaller than that of the requestedTypeCount * parameter. If totalTypeCount is equal to or smaller than the * value passed in for requestedTypeCount and the value produced * by the theTypes parameter is non-null, then all folder types * were returned to the caller. *  * theTypes: * Pass a pointer to an array of FolderType values; see "Folder * Type Constants". On return, the array contains the folder types * for the installed descriptors. You can step through the array * and call GetFolderDescriptor for each folder type. Pass null if * you only want to know the number of descriptors installed in * the systemÕs global list, rather than the actual folder types * of those descriptors. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn GetFolderTypes( UInt32 requestedTypeCount, UInt32 * totalTypeCount, FolderType * theTypes ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * RemoveFolderDescriptor() *  * Summary: * Deletes the specified folder descriptor entry from the system * folder list. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * foldType: * Pass a constant identifying the type of the folder for which * you wish to remove a descriptor. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn RemoveFolderDescriptor( FolderType foldType ) = OSErr//  AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * GetFolderNameUnicode() *  * Summary: * Obtains the name of the specified folder. *  * Discussion: * The GetFolderName function obtains the name of the folder in the * folder descriptor, not the name of the folder on the disk. The * names may differ for a few special folders such as the System * Folder. For relative folders, however, the actual name is always * returned. You typically do not need to call this function. *  * Mac OS X threading: * Thread safe since version 10.5 *  * Parameters: *  * vRefNum: * Pass the volume reference number (or the constant kOnSystemDisk * for the startup disk) of the volume containing the folder for * which you wish the name to be identified. *  * foldType: * Pass a constant identifying the type of the folder for which * you wish the name to be identified. See "Folder Type Constants". *  * foundVRefNum: * On return, a pointer to the volume reference number for the * volume containing the folder specified in the foldType * parameter. *  * name: * A pointer to an HFSUniStr255 which will contain the unicode * name on return. *  * Availability: * Mac OS X: in version 10.5 and later in CoreServices.framework * CarbonLib: not available * Non-Carbon CFM: not available*///toolbox fn GetFolderNameUnicode( FSVolumeRefNum vRefNum, OSType foldType, FSVolumeRefNum * foundVRefNum, HFSUniStr255 * name ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* * InvalidateFolderDescriptorCache() *  * Summary: * Invalidates any prior FindFolder results for the specified folder. *  * Discussion: * The InvalidateFolderDescriptorCache function searches to see if * there is currently a cache of results from FindFolder calls on * the specified folder. If so, it invalidates the cache from the * previous calls to the FindFolder function in order to force the * Folder Manager to reexamine the disk when FindFolder is called * again on the specified directory ID or volume reference number. *  *  * You should not normally need to call * InvalidateFolderDescriptorCache. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * vRefNum: * Pass the volume reference number (or the constant kOnSystemDisk * for the startup disk) of the volume containing the folder for * which you wish the descriptor cache to be invalidated. Pass 0 * to completely invalidate all folder cache information. *  * dirID: * Pass the directory ID number for the folder for which you wish * the descriptor cache to be invalidated. Pass 0 to invalidate * the cache for all folders on the specified disk. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn InvalidateFolderDescriptorCache( FSVolumeRefNum vRefNum, SInt32 dirID ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * IdentifyFolder() *  * Summary: * Obtains the folder type for the specified folder. *  * Discussion: * The folder type is identified for the folder specified by the * vRefNum and dirID parameters, if such a folder exists. Note that * IdentifyFolder may take several seconds to complete. Note also * that if there are multiple folder descriptors that map to an * individual folder, IdentifyFolder returns the folder type of only * the first matching descriptor that it finds. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * vRefNum: * Pass the volume reference number (or the constant kOnSystemDisk * for the startup disk) of the volume containing the folder whose * type you wish to identify. *  * dirID: * Pass the directory ID number for the folder whose type you wish * to identify. *  * foldType: * Pass a pointer to a value of type FolderType. On return, the * value is set to the folder type of the folder with the * specified vRefNum and dirID parameters; see "Folder Type * Constants" for descriptions of possible values. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.0 and later * Non-Carbon CFM: not available*///toolbox fn IdentifyFolder( FSVolumeRefNum vRefNum, SInt32 dirID, FolderType * foldType ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * FSDetermineIfRefIsEnclosedByFolder() *  * Summary: * Determine whether the given FSRef is enclosed inside the given * special folder type for the given domain. *  * Discussion: * This is a fairly fast call which can determine whether a given * FSRef on disk is 'inside' the given special folder type for the * given domain. This call will be more efficient than the * equivalent client code which walked up the file list, checking * each parent with IdentifyFolder() to see if it matches. One use * for this call is to determine if a given file or folder is inside * the trash on a volume, with something like *  * err = FSDetermineIfRefIsEnclosedByFolder( kOnAppropriateDisk, * kTrashFolderType, & ref, & result ); * if ( err == noErr && result ) { * // FSRef is inside trash on the volume.<br> } *  * Mac OS X threading: * Thread safe since version 10.4 *  * Parameters: *  * domainOrVRefNum: * The domain or vRefNum to check. You can also pass * kOnAppropriateDisk to check whatever vRefNum is appropriate for * the given FSRef, or the value 0 to check all vRefNums and * domains. *  * folderType: * The folder type to check *  * inRef: * The FSRef to look for. *  * outResult: * If non-NULL, this will be filled in with true if the given * FSRef is enclosed inside the special folder type for the given * domain, or false otherwise. *  * Availability: * Mac OS X: in version 10.4 and later in CoreServices.framework * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.4 and later * Non-Carbon CFM: not available*///toolbox fn FSDetermineIfRefIsEnclosedByFolder( FSVolumeRefNum domainOrVRefNum, OSType folderType, const FSRef * inRef, Boolean * outResult ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* * DetermineIfPathIsEnclosedByFolder() *  * Summary: * Determine whether a file path is enclosed inside the given * special folder type for the given domain. *  * Discussion: * This is a fairly fast call which can determine whether a given * path on disk is 'inside' the given special folder type for the * given domain. This call will be more efficient than the * equivalent client code which walked up the file list, checking * each parent with IdentifyFolder() to see if it matches. One use * for this call is to determine if a given file or folder is inside * the trash on a volume, with something like *  * err = DetermineIfPathIsEnclosedByFolder( kOnAppropriateDisk, * kTrashFolderType, path, false, & result ); * if ( err == noErr && result ) { * // path is inside trash on the volume.<br> } *  * Mac OS X threading: * Thread safe since version 10.4 *  * Parameters: *  * domainOrVRefNum: * The domain or vRefNum to check. You can also pass * kOnAppropriateDisk to check whatever vRefNum is appropriate for * the given path, or the value 0 to check all vRefNums and * domains. *  * folderType: * The folder type to check *  * utf8Path: * A UTF-8 encoded path name for the file. *  * pathIsRealPath: * Pass true if utf8Path is guaranteed to be a real pathname, with * no symlinks or relative pathname items. Pass false if the * utf8Path may contain relative pathnames, or symlinks, or * aliases, etc. *  * outResult: * If non-NULL, this will be filled in with true if the given path * is enclosed inside the special folder type for the given * domain, or false otherwise. *  * Availability: * Mac OS X: in version 10.4 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn DetermineIfPathIsEnclosedByFolder( FSVolumeRefNum domainOrVRefNum, OSType folderType, const UInt8 * utf8Path, Boolean pathIsRealPath, Boolean * outResult ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* * FindFolderExtended() *** DEPRECATED *** *  * Deprecated: * Use FindFolder instead wherever possible. *  * Summary: * Obtains location information for system-related directories. *  * Discussion: * For the folder type on the particular volume (specified, * respectively, in the folderType and vRefNum parameters), the * FindFolder function returns the directory's volume reference * number in the foundVRefNum parameter and its directory ID in the * foundDirID parameter. *  * The specified folder used for a given volume might be located on * a different volume in future versions of system software; * therefore, do not assume the volume that you specify in vRefNum * and the volume returned in foundVRefNum will be the same. *  * Specify a volume reference number (or the constant kOnSystemDisk * for the startup disk) or one of the domain constants ( on Mac OS * X ) in the vRefNum parameter. *  * Specify a four-character folder type--or the constant that * represents it--in the folderType parameter. *  * Use the constant kCreateFolder in the createFolder parameter to * tell FindFolder to create a directory if it does not already * exist; otherwise, use the constant kDontCreateFolder. Directories * inside the System Folder are created only if the System Folder * directory exists. The FindFolder function will not create a * System Folder directory even if you specify the kCreateFolder * constant in the createFolder parameter. *  * The FindFolder function returns a nonzero result code if the * folder isn't found, and it can also return other file system * errors reported by the File Manager or Memory Manager. * FindFolderExtended() is equivalent to FindFolder() on Mac OS X. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * vRefNum: * The volume reference number (or the constant kOnSystemDisk for * the startup disk) or one of the domain constants ( like * kUserDomain ) of the volume or domain in which you want to * locate a directory. *  * folderType: * A four-character folder type, or a constant that represents the * type, for the directory you want to find. *  * createFolder: * Pass the constant kCreateFolder in this parameter to create a * directory if it does not already exist; otherwise, pass the * constant kDontCreateFolder. *  * foundVRefNum: * The volume reference number, returned by FindFolder , for the * volume containing the directory you specify in the folderType * parameter. *  * flags: * The flags passed in which control extended behaviour *  * data: * Unique data which is interpreted differently depending on the * passed in flags. *  * foundDirID: * The directory ID number, returned by FindFolder , for the * directory you specify in the folderType parameter. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.3 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in InterfaceLib 9.0 and later*//*toolbox fn FindFolderExtended( Â     FSVolumeRefNum vRefNum,Â     OSType folderType,Â     Boolean createFolder,Â     UInt32 flags,Â     pointer data,Â     FSVolumeRefNum * foundVRefNum,Â     SInt32 * foundDirID ) = OSErr//  AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3;*//* * FSFindFolderExtended() *** DEPRECATED *** *  * Summary: * FSFindFolderExtended returns an FSRef for certain system-related * directories. *  * Discussion: * For the folder type on the particular volume (specified, * respectively, in the folderType and vRefNum parameters), the * FindFolder function returns the FSRef of that directory.  *  * The specified folder used for a given volume might be located on * a different volume in future versions of system software; * therefore, do not assume the volume that you specify in vRefNum * and the volume returned in the FSRef will be the same. *  * Specify a volume reference number (or the constant kOnSystemDisk * for the startup disk) or one of the domain constants ( on Mac OS * X ) in the vRefNum parameter. *  * Specify a four-character folder type--or the constant that * represents it--in the folderType parameter. *  * Use the constant kCreateFolder in the createFolder parameter to * tell FindFolder to create a directory if it does not already * exist; otherwise, use the constant kDontCreateFolder. Directories * inside the System Folder are created only if the System Folder * directory exists. The FindFolder function will not create a * System Folder directory even if you specify the kCreateFolder * constant in the createFolder parameter. *  * The FindFolder function returns a nonzero result code if the * folder isn't found, and it can also return other file system * errors reported by the File Manager or Memory Manager. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * vRefNum: * The volume reference number (or the constant kOnSystemDisk for * the startup disk) or one of the domain constants ( like * kUserDomain ) of the volume or domain in which you want to * locate a directory. *  * folderType: * A four-character folder type, or a constant that represents the * type, for the directory you want to find. *  * createFolder: * Pass the constant kCreateFolder in this parameter to create a * directory if it does not already exist; otherwise, pass the * constant kDontCreateFolder. *  * flags: * The flags passed in which control extended behaviour *  * data: * Unique data which is interpreted differently depending on the * passed in flags. *  * foundRef: * The FSRef for the directory you specify on the volume or domain * and folderType given. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.3 * CarbonLib: in CarbonLib 1.1 and later * Non-Carbon CFM: in InterfaceLib 9.1 and later*///toolbox fn FSFindFolderExtended( FSVolumeRefNum vRefNum, OSType folderType, Boolean createFolder, UInt32 flags, pointer data, FSRef * foundRef ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3;/* * GetFolderDescriptor() *** DEPRECATED *** *  * Deprecated: * GetFolderDescriptor is deprecated on Mac OS X. *  * Summary: * Obtains the folder descriptor information for the specified * folder type from the global descriptor list. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * foldType: * Pass a constant identifying the type of the folder for which * you wish to get descriptor information. See "Folder Type * Constants". *  * descSize: * Pass the size (in bytes) of the folder descriptor structure for * which a pointer is passed in the foldDesc parameter. This value * is needed in order to determine the version of the structure * being used. *  * foldDesc: * Pass a pointer to a folder descriptor structure. On return, the * folder descriptor structure contains information from the * global descriptor list for the specified folder type. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.3 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn GetFolderDescriptor( FolderType foldType, Size descSize, FolderDesc * foldDesc ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3;/* * GetFolderName() *** DEPRECATED *** *  * Deprecated: * Use GetFolderNameUnicode. *  * Summary: * Obtains the name of the specified folder. *  * Discussion: * The GetFolderName function obtains the name of the folder in the * folder descriptor, not the name of the folder on the disk. The * names may differ for a few special folders such as the System * Folder. For relative folders, however, the actual name is always * returned. You typically do not need to call this function. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * vRefNum: * Pass the volume reference number (or the constant kOnSystemDisk * for the startup disk) of the volume containing the folder for * which you wish the name to be identified. *  * foldType: * Pass a constant identifying the type of the folder for which * you wish the name to be identified. See "Folder Type Constants". *  * foundVRefNum: * On return, a pointer to the volume reference number for the * volume containing the folder specified in the foldType * parameter. *  * name: * On return, a string containing the title of the folder * specified in the foldType and vRefNum parameters. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.5 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn GetFolderName( FSVolumeRefNum vRefNum, OSType foldType, FSVolumeRefNum * foundVRefNum, StrFileName name ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5;/* * AddFolderRouting() *** DEPRECATED *** *  * Deprecated: * Folder Manager routing is deprecated on Mac OS X. Do not rely on * this feature in your application, because support for it will be * removed in a future version of the OS. *  * Summary: * Adds a folder routing structure to the global routing list. *  * Discussion: * Your application can use the AddFolderRouting function to specify * how the Finder routes a given file type.  * Folder Routing is deprecated on Mac OS X at this time. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * fileType: * Pass the OSType of the file to be routed. *  * routeFromFolder: * Pass the folder type of the "from" folder see "Folder Type * Constants" for descriptions of possible values. An item dropped * on the folder specified in this parameter will be routed to the * folder specified in the routeToFolder parameter. *  * routeToFolder: * The folder type of the "to" folder see "Folder Type Constants" * for descriptions of possible values. *  * flags: * Reserved for future use; pass 0. *  * replaceFlag: * Pass a Boolean value indicating whether you wish to replace a * folder routing that already exists. If true , it replaces the * folder to which the item is being routed. If false , it leaves * the folder to which the item is being routed. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.4 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn AddFolderRouting( OSType fileType, FolderType routeFromFolder, FolderType routeToFolder, RoutingFlags flags, Boolean replaceFlag ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4;/* * RemoveFolderRouting() *** DEPRECATED *** *  * Deprecated: * Folder Manager routing is deprecated on Mac OS X. Do not rely on * this feature in your application, because support for it will be * removed in a future version of the OS. *  * Summary: * Deletes a folder routing structure from the global routing list. *  * Discussion: * Both the file type and the folder type specified must match those * of an existing folder routing structure in the global routing * list for the RemoveFolderRouting function to succeed. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * fileType: * Pass the file type value contained in the folder routing * structure to be removed. *  * routeFromFolder: * Pass the folder type of the "from" folder see "Folder Type * Constants" for descriptions of possible values. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.4 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn RemoveFolderRouting( OSType fileType, FolderType routeFromFolder ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4;/* * FindFolderRouting() *** DEPRECATED *** *  * Deprecated: * Folder Manager routing is deprecated on Mac OS X. Do not rely on * this feature in your application, because support for it will be * removed in a future version of the OS. *  * Summary: * Finds the destination folder from a matching folder routing * structure for the specified file. *  * Discussion: * Both the file type and the folder type specified must match those * of a folder routing structure in the global routing list for the * FindFolderRouting function to succeed. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * fileType: * Pass the file type specified in the appropriate folder routing * structure for the file for which you wish to find a destination * folder. *  * routeFromFolder: * Pass the folder type of the "from" folder for which you wish to * find a "to" folder see "Folder Type Constants" for descriptions * of possible values. An item dropped on the folder specified in * this parameter will be routed to the folder specified in the * routeToFolder parameter. *  * routeToFolder: * A pointer to a value of type FolderType. On return, the value * is set to the folder type of the destination folder. *  * flags: * Reserved; pass 0. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.4 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn FindFolderRouting( OSType fileType, FolderType routeFromFolder, FolderType * routeToFolder, RoutingFlags * flags ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4;/* * GetFolderRoutings() *** DEPRECATED *** *  * Deprecated: * Folder Manager routing is deprecated on Mac OS X. Do not rely on * this feature in your application, because support for it will be * removed in a future version of the OS. *  * Summary: * Obtains folder routing information from the global routing list. *  * Discussion: * The folder routing information in the global routing list * determines how the Finder routes files. *  * Mac OS X threading: * Thread safe since version 10.3 *  * Parameters: *  * requestedRoutingCount: * An unsigned 32-bit value. Pass the number of folder routing * structures that can fit in the buffer pointed to by the * theRoutings parameter. *  * totalRoutingCount: * A pointer to an unsigned 32-bit value. On return, the value is * set to the number of folder routing structures in the global * list. If this value is less than or equal to * requestedRoutingCount , all folder routing structures were * returned to the caller. *  * routingSize: * Pass the size (in bytes) of the FolderRouting structure. *  * theRoutings: * Pass a pointer to an array of FolderRouting structures. On * return the structure(s) contain the requested routing * information. You may pass null if you do not wish this * information. *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.4 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in FoldersLib 1.0 and later*///toolbox fn GetFolderRoutings( UInt32 requestedRoutingCount, UInt32 * totalRoutingCount, Size routingSize, FolderRouting * theRoutings ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4;/* * FSpDetermineIfSpecIsEnclosedByFolder() *** DEPRECATED *** *  * Deprecated: * Use FSDetemineIfRefIsEnclosedByFolder *  * Summary: * Determine whether the given FSSpec is enclosed inside the given * special folder type for the given domain. *  * Discussion: * This is a fairly fast call which can determine whether a given * FSSpec on disk is 'inside' the given special folder type for the * given domain. This call will be more efficient than the * equivalent client code which walked up the file list, checking * each parent with IdentifyFolder() to see if it matches. One use * for this call is to determine if a given file or folder is inside * the trash on a volume, with something like *  * err = FSpDetermineIfRefIsEnclosedByFolder( kOnAppropriateDisk, * kTrashFolderType, & spec, & result ); * if ( err == noErr && result ) { * // FSSpec is inside trash on the volume.<br> } *  * Mac OS X threading: * Thread safe since version 10.4 *  * Parameters: *  * domainOrVRefNum: * The domain or vRefNum to check. You can also pass * kOnAppropriateDisk to check whatever vRefNum is appropriate for * the given FSSpec, or the value 0 to check all vRefNums and * domains. *  * folderType: * The folder type to check *  * inSpec: * The FSSpec to look for. *  * outResult: * If non-NULL, this will be filled in with true if the given * FSSpec is enclosed inside the special folder type for the given * domain, or false otherwise. *  * Availability: * Mac OS X: in version 10.4 and later in CoreServices.framework [32-bit only] but deprecated in 10.5 * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.4 and later * Non-Carbon CFM: not available*///toolbox fn FSpDetermineIfSpecIsEnclosedByFolder( FSVolumeRefNum domainOrVRefNum, OSType folderType, const FSSpec * inSpec, Boolean * outResult ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5;/* * NewFolderManagerNotificationUPP() *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.0.2 and later * Non-Carbon CFM: available as macro/inline*///toolbox fn NewFolderManagerNotificationUPP( FolderManagerNotificationProcPtr userRoutine ) = FolderManagerNotificationUPP//  AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * DisposeFolderManagerNotificationUPP() *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.0.2 and later * Non-Carbon CFM: available as macro/inline*///toolbox DisposeFolderManagerNotificationUPP( FolderManagerNotificationUPP userUPP )//  AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * InvokeFolderManagerNotificationUPP() *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework * CarbonLib: in CarbonLib 1.0.2 and later * Non-Carbon CFM: available as macro/inline*///toolbox fn InvokeFolderManagerNotificationUPP( OSType message, pointer arg, pointer userRefCon, FolderManagerNotificationUPP userUPP ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;// inline FolderManagerNotificationUPP NewFolderManagerNotificationUPP(FolderManagerNotificationProcPtr userRoutine) { return userRoutine; }// inline void DisposeFolderManagerNotificationUPP(FolderManagerNotificationUPP) { }// inline OSStatus InvokeFolderManagerNotificationUPP(OSType message, void * arg, void * userRefCon, FolderManagerNotificationUPP userUPP) { return (*userUPP)(message, arg, userRefCon); }/* * FolderManagerRegisterNotificationProc() *** DEPRECATED *** *  * Deprecated: * This function is deprecated on Mac OS X. *  * Summary: * Register a function to be called at certain times *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * notificationProc: *  * refCon: *  * options: *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.3 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in InterfaceLib 9.0 and later*///toolbox fn FolderManagerRegisterNotificationProc( FolderManagerNotificationUPP notificationProc, pointer refCon, UInt32 options ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3;/* * FolderManagerUnregisterNotificationProc() *** DEPRECATED *** *  * Deprecated: * This function is deprecated on Mac OS X. *  * Summary: * Unregister a function to be called at certain times *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * notificationProc: *  * refCon: *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.3 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in InterfaceLib 9.0 and later*///toolbox fn FolderManagerUnregisterNotificationProc( FolderManagerNotificationUPP notificationProc, pointer refCon ) = OSErr// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3;/* * FolderManagerRegisterCallNotificationProcs() *** DEPRECATED *** *  * Deprecated: * This function is deprecated on Mac OS X. *  * Summary: * Call the registered Folder Manager notification procs. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * message: *  * arg: *  * options: *  * Availability: * Mac OS X: in version 10.0 and later in CoreServices.framework [32-bit only] but deprecated in 10.3 * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in InterfaceLib 9.0 and later*///toolbox fn FolderManagerRegisterCallNotificationProcs( OSType message, pointer arg, UInt32 options ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3;#endif// ndef _DEFINEDINCARBON