/*   Converted from HITheme.h   by S. Van Voorst   {20081206}*/include "Tlbx CarbonEvents.incl"include "Tlbx CoreGraphics.incl"include "Tlbx HIView.incl"include "CoreText:CTFont.incl"// 20090804#if ndef _DEFINEDINCARBON#define HIThemeFrameKind as UInt32_kHIThemeFrameTextFieldSquare  = 0_kHIThemeFrameListBox          = 1#define HIThemeOrientation as UInt32_kHIThemeOrientationNormal     = 0_kHIThemeOrientationInverted   = 1begin record HIThemeFrameDrawInfodim as UInt32     version // The version of this data structure.  Currently, it is always 0.dim as HIThemeFrameKind    kinddim as ThemeDrawState      statedim as  Boolean           isFocusedend recordtoolbox fn HIThemeDrawFrame(Â  const HIRect *                inRect,Â  const HIThemeFrameDrawInfo *  inDrawInfo,Â  CGContextRef                  inContext,Â  HIThemeOrientation            inOrientation)  = OSStatus //             AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn HIThemeDrawFocusRect(Â  const HIRect *       inRect,Â  Boolean              inHasFocus,Â  CGContextRef         inContext,Â  HIThemeOrientation   inOrientation) = OSStatus // AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//#define CTFontRef as pointer  20090804//#define CGFloat as single#define HIThemeTextHorizontalFlush as UInt32 #define HIThemeTextVerticalFlush as UInt32 #define HIThemeTextTruncation as UInt32#define HIThemeTextBoxOptions as OptionBits#define HIThemeSplitterAdornment as UInt32#define HIThemeGroupBoxKind as UInt32#define HIThemeTabAdornment as UInt32#define HIThemeTabPaneAdornment as UInt32#define HIThemeTabSize as UInt32#define HIThemeTabPosition as UInt32#define HIThemeTabKind as UInt32#define HIThemeGrowBoxKind as UInt32#define HIThemeGrowBoxSize as UInt32#define HIThemeSegmentPosition as UInt32#define HIThemeSegmentKind as UInt32#define HIThemeSegmentSize as UInt32#define HIThemeSegmentAdornment as UInt32#define HIThemeHeaderKind as UInt32#define ThemeMenuBarState as UInt16#define ThemeMenuState as UInt16#define ThemeMenuItemType as UInt16#define ThemeTrackKind as UInt16#define ThemeTrackAttributes as UInt16#define ThemeThumbDirection as UInt8#define ThemeTrackEnableState as UInt8#define ThemeTrackPressState as UInt8begin record HIScrollBarTrackInfodim as UInt32     version 'Currently, it is always 0.dim as ThemeTrackEnableState  enableStatedim as ThemeTrackPressState  pressStatedim as CGFloat             viewsizeend recordbegin record ScrollBarTrackInfodim as  SInt32              viewsize'Current view range sizedim as ThemeTrackPressState  pressStateend recordbegin record SliderTrackInfodim as ThemeThumbDirection  thumbDir dim as ThemeTrackPressState  pressStateend recordbegin record ProgressTrackInfodim as UInt8               phaseend recordbegin record ThemeTrackUnionbegin uniondim as ScrollBarTrackInfo  scrollbardim as SliderTrackInfo sliderdim as ProgressTrackInfo progressend unionend recordbegin record HIThemeTrackDrawInfodim as UInt32     version 'Currently, it is always 0.dim as ThemeTrackKind      kinddim as HIRect              bounds'track basis rectangledim as SInt32              min'min track valuedim as SInt32              max'max track valuedim as SInt32              value'Current thumb valuedim as UInt32              reserved'Leave this reserved field set to 0dim as ThemeTrackAttributes  attributesdim as ThemeTrackEnableState  enableStatedim as UInt8               filler1'Leave this reserved field set to 0dim as ThemeTrackUnion  trackInfoend recordbegin record HIThemeTickMarkDrawInfodim as UInt32  version'Currently, it is always 0.dim as ThemeDrawState  stateend recordbegin record HIThemeTextInfodim as UInt32   versiondim as ThemeDrawState  statedim as ThemeFontID  fontIDdim as HIThemeTextHorizontalFlush  horizontalFlushnessdim as HIThemeTextVerticalFlush  verticalFlushnessdim as HIThemeTextBoxOptions  optionsdim as HIThemeTextTruncation  truncationPositiondim as UInt32  truncationMaxLinesdim as Boolean  truncationHappeneddim as UInt8  filler1dim as CTFontRef   fontend recordbegin record HIThemeTabDrawInfodim as UInt32   versiondim as ThemeTabStyle  styledim as ThemeTabDirection  directiondim as HIThemeTabSize  sizedim as HIThemeTabAdornment   adornmentdim as HIThemeTabKind  kinddim as HIThemeTabPosition  positionend recordbegin record HIThemeTabPaneDrawInfodim as UInt32   versiondim as ThemeDrawState  statedim as ThemeTabDirection  directiondim as HIThemeTabSize  sizedim as HIThemeTabKind  kinddim as HIThemeTabPaneAdornment   adornmentend recordbegin record HIThemeAnimationTimeInfodim as CFAbsoluteTime  startdim as CFAbsoluteTime  currentend recordbegin record HIThemeAnimationFrameInfodim as UInt32  indexend recordbegin record ThemeButtonDrawKludgebegin uniondim as HIThemeAnimationTimeInfo  timedim as HIThemeAnimationFrameInfo  frameend unionend recordbegin record HIThemeButtonDrawInfodim as UInt32  versiondim as ThemeDrawState  statedim as ThemeButtonKind   kinddim as ThemeButtonValue  valuedim as ThemeButtonAdornment   adornmentdim as ThemeButtonDrawKludge  animationend recordbegin record HIThemeSplitterDrawInfodim as UInt32  versiondim as ThemeDrawState  statedim as HIThemeSplitterAdornment  adornmentEnd recordbegin record HIThemeGrabberDrawInfodim as UInt32  versiondim as ThemeDrawState  stateend recordbegin record HIThemePlacardDrawInfodim as UInt32  versiondim as ThemeDrawState  stateend recordbegin record HIThemeGroupBoxDrawInfodim as UInt32  versiondim as ThemeDrawState  statedim as HIThemeGroupBoxKind  kindend recordbegin record HIThemeSeparatorDrawInfodim as UInt32  versiondim as ThemeDrawState  stateend recordbegin record HIThemeScrollBarDelimitersDrawInfodim as UInt32  versiondim as ThemeDrawState  statedim as ThemeWindowType  windowTypedim as ThemeWindowAttributes  attributesend recordbegin record HIThemeChasingArrowsDrawInfodim as UInt32  versiondim as ThemeDrawState  statedim as UInt32  indexend recordbegin record HIThemePopupArrowDrawInfodim as UInt32  version'Currently is always 0dim as ThemeDrawState  statedim as ThemeArrowOrientation  orientationdim as ThemePopupArrowSize  sizeend recordbegin record HIThemeGrowBoxDrawInfodim as UInt32  versiondim as ThemeDrawState  statedim as HIThemeGrowBoxKind   kinddim as ThemeGrowDirection  directiondim as HIThemeGrowBoxSize  sizeend recordbegin record HIThemeBackgroundDrawInfodim as UInt32  versiondim as ThemeDrawState  statedim as ThemeBackgroundKind  kindend recordbegin record HIThemeSegmentDrawInfodim as UInt32  versiondim as ThemeDrawState  statedim as ThemeButtonValue  valuedim as HIThemeSegmentSize  sizedim as HIThemeSegmentKind  kinddim as HIThemeSegmentPosition  positiondim as HIThemeSegmentAdornment  adornmentend recordbegin record HIThemeHeaderDrawInfodim as UInt32  versiondim as ThemeDrawState  statedim as HIThemeHeaderKind   kindend recordbegin record HIThemeMenuBarDrawInfo dim as UInt32     version 'Currently, it is always 0.dim as ThemeMenuBarState   statedim as OptionBits          attributesend record  begin record HIThemeMenuTitleDrawInfodim as UInt32     version 'Currently, it is always 0.dim as ThemeMenuState   statedim as OptionBits          attributesdim as CGFloat   condensedTitleExtraend recordbegin record HIThemeMenuDrawInfodim as UInt32     version 'Currently, it is always 0.dim as ThemeMenuType       menuTypeend recordbegin record HIThemeMenuItemDrawInfodim as UInt32     version 'Currently, it is always 0.dim as ThemeMenuItemType      itemTypedim as ThemeMenuState   stateend recordbegin record HIThemeWindowDrawInfodim as UInt32     version 'Currently, it is always 0.dim as ThemeDrawState  statedim as ThemeWindowType     windowTypedim as ThemeWindowAttributes  attributesdim as CGFloat      titleHeightdim as CGFloat      titleWidthend recordbegin record HIThemeWindowWidgetDrawInfodim as UInt32     version 'Currently, it is always 0.dim as ThemeDrawState      widgetStatedim as ThemeTitleBarWidget  widgetTypedim as ThemeDrawState      windowStatedim as ThemeWindowType     windowTypedim as ThemeWindowAttributes  attributesdim as CGFloat      titleHeightdim as CGFloat      titleWidthend recordbegin enum'Track kinds_kThemeScrollBarMedium       = 0_kThemeScrollBarSmall        = 1_kThemeSliderMedium          = 2_kThemeProgressBarMedium     = 3_kThemeIndeterminateBarMedium = 4_kThemeRelevanceBar          = 5_kThemeSliderSmall           = 6_kThemeProgressBarLarge      = 7_kThemeIndeterminateBarLarge = 8_kThemeSliderMini            = 10end enumbegin enum'Track attributes// The track is drawn horizontally. //_kThemeTrackHorizontal         = (1 << 0)// The track progresses from right to left. //_kThemeTrackRightToLeft        = (1 << 1)// The track's thumb should be drawn. //_kThemeTrackShowThumb          = (1 << 2)// The provided thumbRgn should be drawn opaque, not as a ghost. //_kThemeTrackThumbRgnIsNotGhost = (1 << 3)// The track scroll bar doesn't have arrows.  This attribute  currently has no effect. //_kThemeTrackNoScrollBarArrows  = (1 << 4)// The thumb has focus.  This attribute currently has effect only on sliders. Mac OS X 10.2 and later. //_kThemeTrackHasFocus           = (1 << 5)// The track's track (i.e. the groove for a slider or the gutter+arrows of a scroll bar) //// should not be drawn. Available only in Mac OS X 10.5 and later. //_kThemeTrackHideTrack          = (1 << 6)end enumbegin enum 'Track enable states_kThemeTrackActive             = 0_kThemeTrackDisabled           = 1_kThemeTrackNothingToScroll    = 2_kThemeTrackInactive           = 3end enumbegin enum'Track pressed states/* press states (ignored unless track is active) */_kThemeLeftOutsideArrowPressed = 0x01_kThemeLeftInsideArrowPressed  = 0x02_kThemeLeftTrackPressed        = 0x04_kThemeThumbPressed            = 0x08_kThemeRightTrackPressed       = 0x10_kThemeRightInsideArrowPressed = 0x20_kThemeRightOutsideArrowPressed = 0x40_kThemeTopOutsideArrowPressed  = _kThemeLeftOutsideArrowPressed_kThemeTopInsideArrowPressed   = _kThemeLeftInsideArrowPressed_kThemeTopTrackPressed         = _kThemeLeftTrackPressed_kThemeBottomTrackPressed      = _kThemeRightTrackPressed_kThemeBottomInsideArrowPressed = _kThemeRightInsideArrowPressed_kThemeBottomOutsideArrowPressed = _kThemeRightOutsideArrowPressedend enumbegin enum                        'Thumb directions_kThemeThumbPlain     = 0_kThemeThumbUpward    = 1_kThemeThumbDownward  = 2end enumbegin enum'ThemeTitleBarWidgets_kThemeWidgetCloseBox      = 0_kThemeWidgetZoomBox       = 1_kThemeWidgetCollapseBox   = 2_kThemeWidgetDirtyCloseBox = 6end enumbegin enum 0_kHIThemeTextHorizontalFlushLeft_kHIThemeTextHorizontalFlushCenter_kHIThemeTextHorizontalFlushRight_kHIThemeTextHorizontalFlushDefaultend enumbegin enum 0_kHIThemeTextVerticalFlushTop_kHIThemeTextVerticalFlushCenter_kHIThemeTextVerticalFlushBottom_kHIThemeTextVerticalFlushDefaultend enumbegin enum 0_kHIThemeTextTruncationNone_kHIThemeTextTruncationMiddle_kHIThemeTextTruncationEnd_kHIThemeTextTruncationDefaultend enumbegin enum 0_kThemePushButton//= 0_kThemeCheckBox// = 1_kThemeRadioButton// = 2_kThemeBevelButton// = 3_kThemeArrowButton// = 4_kThemePopupButton// = 5_kThemeDisclosureButton// = 6_kThemeIncDecButton// = 7_kThemeSmallBevelButton// = 8_kThemeLargeBevelButton// = 9_kThemeListHeaderButton// = 10_kThemeRoundButton// = 11_kThemeLargeRoundButton// = 12_kThemeSmallCheckBox// = 13_kThemeSmallRadioButton// = 14_kThemeRoundedBevelButton// = 15end enum//typedef UInt16                          ThemePopupArrowSizebegin enum_kThemeArrow3pt     = 0_kThemeArrow5pt     = 1_kThemeArrow7pt     = 2_kThemeArrow9pt     = 3end enum//typedef UInt16                          ThemeArrowOrientationbegin enum_kThemeArrowLeft    = 0_kThemeArrowDown    = 1_kThemeArrowRight   = 2_kThemeArrowUp      = 3end enum_kThemeSpecifiedFont  = 201// This is also defined in HIView.incl_kHIThemeOrientationNormal = 0_kHIThemeOrientationInverted = 1_kThemeNormalCheckBox = 1_kThemeNormalRadioButton = 2// Defined elsewhere ////_kThemeMediumBevelButton = 3_kHIThemeTextBoxOptionNone     = 0_kHIThemeTextBoxOptionStronglyVertical = (1 << 1)_kHIThemeTextBoxOptionEngraved = (1 << 2) _kHIThemeTextInfoVersionZero   = 0 _kHIThemeTextInfoVersionOne    = 1//Draw the splitter with its normal appearance._kHIThemeSplitterAdornmentNone = 0//Draw the splitter with its metal appearance. _kHIThemeSplitterAdornmentMetal = 1//The group box is drawn with the primary variant._kHIThemeGroupBoxKindPrimary   = 0//The group box is drawn with the secondary variant._kHIThemeGroupBoxKindSecondary = 1/*   * The group box is drawn with the primary variant. This group box   * draws opaque. This does not match the Mac OS X 10.3 appearance   * 100%, as the boxes should be transparent, but draws this way for   * the sake of compatibility. Please update to use the newer   * transparent variant. */_kHIThemeGroupBoxKindPrimaryOpaque = 3/*   * The group box is drawn with the secondary variant. This group box   * draws opaque. This does not match the Mac OS X 10.3 appearance   * 100%, as the boxes should be transparent, but draws this way for   * the sake of compatibility. Please update to use the newer   * transparent variant.*/_kHIThemeGroupBoxKindSecondaryOpaque = 4_kHIThemeTabPaneAdornmentNormal = 0_kHIThemeTabAdornmentNone = 0_kHIThemeTabAdornmentFocus  = ( 1 << 2 )_kHIThemeTabAdornmentLeadingSeparator  = ( 1 << 3 )_kHIThemeTabAdornmentTrailingSeparator  = ( 1 << 4 )_kHIThemeTabSizeNormal = 0_kHIThemeTabSizeSmall = 1_kHIThemeTabSizeMini = 3_kHIThemeTabPositionFirst = 0_kHIThemeTabPositionMiddle = 1_kHIThemeTabPositionLast = 2_kHIThemeTabPositionOnly = 3_kHIThemeTabKindNormal = 0/* The grow box corner for a window that has no scroll bars. */_kHIThemeGrowBoxKindNormal  = 0/* The grow box corner for a window that has no grow box. This sounds   * paradoxical, but this type of grow box, formerly known as the   * "NoGrowBox" is used to fill in the corner left blank by the   * intersection of a horizontal and a vertical scroll bar. */_kHIThemeGrowBoxKindNone       = 1/* Draw the grow box for normal windows. */_kHIThemeGrowBoxSizeNormal     = 0/* Draw the smaller grow box for utility or floating windows. */_kHIThemeGrowBoxSizeSmall      = 1/* The first position of a segmented view. */_kHIThemeSegmentPositionFirst  = 0/* A middle segment. */_kHIThemeSegmentPositionMiddle = 1/* The last position of a segmented view. */_kHIThemeSegmentPositionLast   = 2/* The only position of a segmented view. It is simultaneously first   * and last. You know, only. There is only one segment. It looks   * pretty much like a button. Please don't use this if you can avoid   * it. It's ugly.*/_kHIThemeSegmentPositionOnly = 3/*The outset looking segment. Do not use on metal or metal-like windows.*/_kHIThemeSegmentKindNormal  = 0/*The inset segment. Use on metal or metal-like windows. */_kHIThemeSegmentKindInset      = 1/*The normally sized segment. */_kHIThemeSegmentSizeNormal   = 0/*The small segment. Not available with as inset. */_kHIThemeSegmentSizeSmall      = 1/* The mini segment. Not available with as inset. */_kHIThemeSegmentSizeMini       = 3/*No segment adornments are to be drawn. */_kHIThemeSegmentAdornmentNone  = 0/* A focus ring is to be drawn around the segment. */_kHIThemeSegmentAdornmentFocus = (1 << 2) /* to match button focus adornment *//*If available, a leading separator is to be drawn on the segment.   * Note that segments overlap and if the separators are drawn over   * top each other, the shadows multiply undesirably.*/_kHIThemeSegmentAdornmentLeadingSeparator = (1 << 3)/* If available, a trailing separator is to be drawn on the segment.   * Note that segments overlap and if the separators are drawn over   * top each other, the shadows multiply undesirably.*/_kHIThemeSegmentAdornmentTrailingSeparator = (1 << 4)/* A header drawn above window content that has no top border of its   * own. (i.e. the same as the status bar in an icon view Finder window). */_kHIThemeHeaderKindWindow    =  0/*A header drawn above window content that has a top border of its   * own. (i.e. the same as the status bar in an list view Finder window). */_kHIThemeHeaderKindList        = 1/* Indicates that a menu title should be drawn in a condensed appearance.  This constant is used in the HIThemeMenuTitleDrawInfo.attributes field.  Must be either 0 or  _kHIThemeMenuTitleDrawCondensed */_kHIThemeMenuTitleDrawCondensed = 1 << 0_kThemeMenuTypeInactive = 0x0100begin enum//The theme background used to draw the fill of a tab pane._kThemeBackgroundTabPane     = 1//The theme background used to draw the fill of a window placard._kThemeBackgroundPlacard       = 2//The theme background used to draw the window header of// a window that does not contain content that has a hard-lined top// edge. An example of this would be icon view in the non side panel Finder._kThemeBackgroundWindowHeader  = 3// The theme background used to draw the window header of// a window that does contain content that has a hard-lined top edge.//An example of this would be list view in the non side panel Finder._kThemeBackgroundListViewWindowHeader = 4//The theme background used to draw the fill of a secondary group box._kThemeBackgroundSecondaryGroupBox = 5//A special theme brush for drawing metal backgrounds. Currently,// this brush only works with HIThemeDrawBackground._kThemeBackgroundMetal         = 6end enumtoolbox fn HIThemeDrawTextBox( CFTypeRef    inString, const HIRect*  inBounds, HIThemeTextInfo*  inTextInfo, ÂCGContextRef  inContext, HIThemeOrientation inOrientation ) = OSStatustoolbox fn HIThemeDrawPaneSplitter( const HIRect *   inRect, const HIThemeSplitterDrawInfo *  inDrawInfo, ÂCGContextRef  inContext, HIThemeOrientation    inOrientation) = OSStatustoolbox fn HIThemeDrawGrabber( const HIRect *    inRect, const HIThemeGrabberDrawInfo *  inDrawInfo,Â CGContextRef    inContext, HIThemeOrientation        inOrientation)  = OSStatustoolbox fn HIThemeDrawPlacard ( const HIRect *    inRect, const HIThemePlacardDrawInfo *  inDrawInfo, ÂCGContextRef    inContext, HIThemeOrientation   inOrientation) = OSStatustoolbox fn HIThemeDrawButton( const HIRect *   inBounds, const HIThemeButtonDrawInfo *  inDrawInfo, ÂCGContextRef    inContext, HIThemeOrientation   inOrientation, HIRect *    outLabelRect ) = OSStatustoolbox fn HIThemeDrawGenericWell( const HIRect *    inRect, const HIThemeButtonDrawInfo *  inDrawInfo,Â CGContextRef     inContext, HIThemeOrientation      inOrientation) = OSStatustoolbox fn HIThemeDrawGroupBox( const HIRect *    inRect, const HIThemeGroupBoxDrawInfo *  inDrawInfo, ÂCGContextRef     inContext, HIThemeOrientation     inOrientation)  = OSStatustoolbox fn HIThemeDrawTab( const HIRect *   inRect, const HIThemeTabDrawInfo *  inDrawInfo, ÂCGContextRef     inContext, HIThemeOrientation    inOrientation,  HIRect *  outLabelRect)  = OSStatustoolbox fn HIThemeDrawTabPane( const HIRect *  inRect, const HIThemeTabPaneDrawInfo *  inDrawInfo,ÂCGContextRef     inContext, HIThemeOrientation     inOrientation)  = OSStatustoolbox fn HIThemeGetButtonShape( const HIRect *   inBounds, const HIThemeButtonDrawInfo *  inDrawInfo,Â HIShapeRef *   outShape)  = OSStatustoolbox fn HIThemeGetButtonContentBounds( const HIRect *  inBounds, const HIThemeButtonDrawInfo *  inDrawInfo,Â HIRect *  outBounds) = OSStatustoolbox fn HIThemeGetButtonBackgroundBounds( const HIRect *   inBounds, const HIThemeButtonDrawInfo *  inDrawInfo,Â HIRect *   outBounds) = OSStatustoolbox fn HIThemeDrawChasingArrows( const HIRect *   inBounds,  const HIThemeChasingArrowsDrawInfo *  inDrawInfo,Â CGContextRef    inContext, HIThemeOrientation    inOrientation) = OSStatustoolbox fn HIThemeDrawSegment( const HIRect *    inBounds, const HIThemeSegmentDrawInfo *  inDrawInfo,Â CGContextRef   inContext, HIThemeOrientation   inOrientation)  = OSStatustoolbox fn HIThemeDrawSeparator( const HIRect *   inRect, const HIThemeSeparatorDrawInfo *  inDrawInfo, ÂCGContextRef   inContext, HIThemeOrientation    inOrientation)  = OSStatustoolbox fn HIThemeGetTextDimensions( CFTypeRef    inString, CGFloat    inWidth,  HIThemeTextInfo *  inTextInfo,Â CGFloat *  outWidth, CGFloat *     outHeight,  CGFloat *   outBaseline)  = OSStatustoolbox fn HIThemeDrawGrowBox(  const HIPoint *    inOrigin,  const HIThemeGrowBoxDrawInfo *  inDrawInfo, ÂCGContextRef     inContext, HIThemeOrientation  inOrientation) = OSStatustoolbox fn HIThemeDrawHeader( const HIRect *  inRect, const HIThemeHeaderDrawInfo *  inDrawInfo, ÂCGContextRef   inContext, HIThemeOrientation    inOrientation)  = OSStatustoolbox fn HIThemeDrawScrollBarDelimiters( const HIRect *   inContRect, const HIThemeScrollBarDelimitersDrawInfo *  inDrawInfo,Â CGContextRef    inContext, HIThemeOrientation   inOrientation) = OSStatustoolbox fn HIThemeDrawMenuBarBackground( const HIRect *    inBounds, const HIThemeMenuBarDrawInfo *  inDrawInfo,Â CGContextRef     inContext, HIThemeOrientation      inOrientation) = OSStatustoolbox fn HIThemeDrawMenuTitle( const HIRect *  inMenuBarRect, const HIRect *   inTitleRect, const HIThemeMenuTitleDrawInfo *  inDrawInfo, ÂCGContextRef      inContext, HIThemeOrientation    inOrientation, HIRect *     outLabelRect)  = OSStatustoolbox fn HIThemeDrawMenuBackground( const HIRect *   inMenuRect, const HIThemeMenuDrawInfo *  inMenuDrawInfo,Â CGContextRef   inContext, HIThemeOrientation    inOrientation) = OSStatustoolbox fn HIThemeDrawMenuItem( const HIRect *    inMenuRect, const HIRect *    inItemRect, const HIThemeMenuItemDrawInfo *  inItemDrawInfo,Â CGContextRef   inContext, HIThemeOrientation   inOrientation, HIRect *      outContentRect)  = OSStatus toolbox fn HIThemeDrawMenuSeparator( const HIRect *   inMenuRect, const HIRect *    inItemRect,  const HIThemeMenuItemDrawInfo *  inItemDrawInfo,Â CGContextRef     inContext, HIThemeOrientation      inOrientation) = OSStatustoolbox fn HIThemeDrawTrack( const HIThemeTrackDrawInfo *  inDrawInfo,  const HIRect *    inGhostRect, Â CGContextRef   inContext,  HIThemeOrientation    inOrientation)  = OSStatustoolbox fn HIThemeDrawTrackTickMarks( const HIThemeTrackDrawInfo *  inDrawInfo, ItemCount     inNumTicks,Â CGContextRef   inContext, HIThemeOrientation     inOrientation) = OSStatustoolbox fn HIThemeDrawTickMark( const HIRect *    inBounds, const HIThemeTickMarkDrawInfo *  inDrawInfo, ÂCGContextRef     inContext, HIThemeOrientation      inOrientation)  = OSStatustoolbox fn HIThemeDrawWindowFrame( const HIRect *   inContRect,  const HIThemeWindowDrawInfo *  inDrawInfo, ÂCGContextRef     inContext, HIThemeOrientation   inOrientation, HIRect *    outTitleRect) = OSStatustoolbox fn HIThemeDrawTitleBarWidget( const HIRect *    inContRect, const HIThemeWindowWidgetDrawInfo *  inDrawInfo,Â CGContextRef    inContext, HIThemeOrientation     inOrientation)  =  OSStatustoolbox fn HIThemeDrawBackground( const HIRect *   inBounds, const HIThemeBackgroundDrawInfo *  inDrawInfo,Â CGContextRef   inContext, HIThemeOrientation    inOrientation)  = OSStatustoolbox fn HIThemeHitTestTrack( const HIThemeTrackDrawInfo *  inDrawInfo,Â const HIPoint *    inMousePoint, ControlPartCode *    outPartHit) = Booleantoolbox fn HIThemeGetTrackBounds( const HIThemeTrackDrawInfo *  inDrawInfo, ÂHIRect *    outBounds)  = OSStatustoolbox fn HIThemeGetTrackParts( const HIThemeTrackDrawInfo *  inDrawInfo, UInt32 *   outNumberOfParts, ÂUInt32    inMaxParts, ControlPartCode *     ioPartsBuffer) = OSStatustoolbox fn HIThemeGetTrackPartBounds( const HIThemeTrackDrawInfo *  inDrawInfo, ÂControlPartCode     inPartCode, HIRect *   outPartBounds)  = OSStatustoolbox fn HIThemeGetTrackDragRect( const HIThemeTrackDrawInfo *  inDrawInfo, HIRect *    outDragRect) = OSStatustoolbox fn HIThemeGetTrackThumbPositionFromOffset( const HIThemeTrackDrawInfo *  inDrawInfo,Â const HIPoint *    inThumbOffset, CGFloat *    outRelativePosition) = OSStatustoolbox fn HIThemeGetTrackThumbPositionFromBounds( const HIThemeTrackDrawInfo *  inDrawInfo, Â const HIRect *    inThumbBounds, CGFloat *      outRelativePosition) = OSStatustoolbox fn HIThemeGetTrackLiveValue( const HIThemeTrackDrawInfo *  inDrawInfo,Â CGFloat    inRelativePosition, SInt32 *    outValue) = OSStatustoolbox fn HIThemeGetScrollBarTrackRect( const HIRect *     inBounds, const HIScrollBarTrackInfo *  inTrackInfo, ÂBoolean     inIsHoriz, HIRect *    outTrackBounds)  = OSStatustoolbox fn HIThemeHitTestScrollBarArrows( const HIRect *   inScrollBarBounds, const HIScrollBarTrackInfo *  inTrackInfo,Â Boolean     inIsHoriz, const HIPoint *    inPtHit, HIRect *     outTrackBounds, ControlPartCode *    outPartCode) = OSStatustoolbox fn HIThemeApplyBackground( const HIRect *     inBounds, const HIThemeBackgroundDrawInfo *  inDrawInfo, ÂCGContextRef    inContext, HIThemeOrientation    inOrientation) = OSStatustoolbox fn HIThemeGetGrowBoxBounds( const HIPoint *    inOrigin, const HIThemeGrowBoxDrawInfo *  inDrawInfo, ÂHIRect *    outBounds)  = OSStatustoolbox fn HIThemeGetMenuBackgroundShape( const HIRect *   inMenuRect,  const HIThemeMenuDrawInfo *  inMenuDrawInfo,Â HIShapeRef *    outShape)  = OSStatustoolbox fn HIThemeGetTabDrawShape( const HIRect *   inRect, const HIThemeTabDrawInfo *  inDrawInfo,Â HIShapeRef *    outShape)  = OSStatustoolbox fn HIThemeGetTabShape( const HIRect *     inRect, const HIThemeTabDrawInfo *  inDrawInfo, ÂHIShapeRef *   outShape) = OSStatustoolbox fn HIThemeGetTabPaneContentShape( const HIRect *   inRect, ThemeTabDirection   inDirection,Â HIThemeTabSize    inTabSize, HIShapeRef *    outShape) = OSStatustoolbox fn HIThemeGetTabPaneDrawShape( const HIRect *      inRect, ThemeTabDirection   inDirection, ÂHIThemeTabSize      inTabSize, HIShapeRef *   outShape)  = OSStatustoolbox fn HIThemeGetTrackThumbShape( const HIThemeTrackDrawInfo *  inDrawInfo, ÂHIShapeRef *    outThumbShape)  = OSStatustoolbox fn HIThemeGetWindowRegionHit( const HIRect *      inContRect, const HIThemeWindowDrawInfo *  inDrawInfo, Âconst HIPoint *     inPoint,  WindowRegionCode *     outRegionHit) = Booleantoolbox fn HIThemeGetWindowShape( const HIRect *   inContRect, const HIThemeWindowDrawInfo *  inDrawInfo,Â WindowRegionCode       inWinRegion, HIShapeRef *    outShape) = OSStatustoolbox fn HIThemeDrawPopupArrow( const HIRect *   inBounds, const HIThemePopupArrowDrawInfo *  inDrawInfo,Â CGContextRef     inContext, HIThemeOrientation     inOrientation)  = OSStatus#endif/* *  HIThemeDrawTextBox() *   *  Summary: *    Draw the string into the given bounding box *   *  Discussion: *    Draw the string into the bounding box given. You can specify *    options such as truncation and justification as well as *    determining whether the text was truncated when it was drawn. *   *  Mac OS X threading: *    Not thread safe *   *  Parameters: *     *    inString: *      A CFStringRef containing the unicode characters you wish to *      render. You MUST NOT pass in a CFStringRef that was allocated *      with any of the "NoCopy" CFString creation APIs; a string *      created with a "NoCopy" API has transient storage which is *      incompatible with HIThemeDrawTextBox's caches.  *       *      In Mac OS X 10.5 and later, this API may also be passed a *      CFAttributedStringRef. *     *    inBounds: *      The HIRect that bounds where the text is to be drawn *     *    inTextInfo: *      The HIThemeTextInfo parameter block specifying additional *      options for truncation and flushness. You can control the *      number of lines drawn by specifying a truncation of *      kHIThemeTextTruncationMiddle or kHIThemeTextTruncationEnd for *      the truncationPosition field and then specifying a maximum *      number of lines to draw before truncation occurs in the *      truncationMaxLines field. The truncationHappened field is the *      only field that will be written to by this API (and the reason *      for inTextInfo not being const). *     *    inContext: *      The CGContextRef into which to draw the text. *     *    inOrientation: *      An HIThemeOrientation that describes the orientation of the *      passed in context. *   *  Availability: *    Mac OS X:         in version 10.3 and later in Carbon.framework *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.3 and later *    Non-Carbon CFM:   not available */// ------ Items below this are used in HITheme, but defined elsewhere in FB ---- ////#define ThemePopupArrowSize as UInt16/* Defined in "Tlbx HIView.incl"    #define HIThemeOrientation as UInt32    #define HIThemeFrameKind as UInt32       HIThemeFrameDrawInfo*//* Defined in "TlbxAppearance.incl"    #define ThemeButtonKind as UInt16    #define ThemeTabStyle as unsigned int    #define ThemeTabDirection as unsigned int*//*// From "Tlbx Appearance.incl" //begin enum 0//ThemeTabStyle_kThemeTabNonFront  _kThemeTabNonFrontPressed _kThemeTabNonFrontInactive _kThemeTabFront   _kThemeTabFrontInactive  end enumbegin enum 0//ThemeTabDirection_kThemeTabNorth    _kThemeTabSouth   _kThemeTabEast    _kThemeTabWest    end enum*//*begin Record HIThemeBackgroundDrawInfoDim As UInt32     version 'Currently, it is always 0.Dim as ThemeDrawState  stateDim as ThemeBackgroundKind  kindend record*//*begin enum 'ThemeWindowTypes _kThemeDocumentWindow     = 0 _kThemeDialogWindow            = 1 _kThemeMovableDialogWindow     = 2 _kThemeAlertWindow             = 3 _kThemeMovableAlertWindow    = 4 _kThemePlainDialogWindow       = 5 _kThemeShadowDialogWindow   = 6 _kThemePopupWindow             = 7 _kThemeUtilityWindow           = 8 _kThemeUtilitySideWindow     = 9 _kThemeSheetWindow             = 10 _kThemeDrawerWindow          = 11end enum*//*begin enum 'ThemeWindowAttributes  // This bit means that the size of the window can be changed by the       user. The window is drawn with a grow box. //_kThemeWindowHasGrow           = (1 << 0)//This bit means that the window can be zoomed horizontally. The    window is drawn with a zoom box. //_kThemeWindowHasHorizontalZoom = (1 << 3)// This bit means that the window can be zoomed vertically. The    window is drawn with a zoom box. //_kThemeWindowHasVerticalZoom   = (1 << 4)/* This bit means that the window can be zoomed horizontally and   vertically. The window is drawn with a zoom box. //_kThemeWindowHasFullZoom   = _kThemeWindowHasHorizontalZoom_kThemeWindowHasVerticalZoom//This bit means that the window can be closed. The window is drawn    with a close box. //_kThemeWindowHasCloseBox       = (1 << 5)// This bit means that the window can be collapsed. The window is    drawn with a collapse box. //_kThemeWindowHasCollapseBox    = (1 << 6)  // This bit means that the window has title text and/or a title icon.//_kThemeWindowHasTitleText      = (1 << 7)  //This bit means that the window has been collapsed.//_kThemeWindowIsCollapsed       = (1 << 8)  //This bit means that the window has dirty content. That means that     the content of the window has changed and needs to be saved. If the    window is drawing a close box, it will be drawn dirty.//_kThemeWindowHasDirty          = (1 << 9)// This bit means that the window has a toolbar toggling button. //_kThemeWindowHasToolbarButton  = (1 << 11)end enum*//*begin record HIThemeSeparatorDrawInfodim as UInt32  version'Currently is always 0dim as ThemeDrawState  stateend recordbegin record HIThemeScrollBarDelimitersDrawInfodim as UInt32  version'Currently is always 0dim as ThemeDrawState  statedim as ThemeWindowType  windowTypedim as ThemeWindowAttributes  attributesend record*/