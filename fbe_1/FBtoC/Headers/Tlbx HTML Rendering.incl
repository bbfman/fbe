// fixes for FBtoC; some very ignorant mistakes corrected   RP  16 October 2007/*     File:       HTMLRendering.h      Contains:   HTML Rendering Library Interfaces.      Version:    Technology: 1.0                 Release:    Public Beta      Copyright:  © 1999-2000 by Apple Computer, Inc., all rights reserved      Bugs?:      For bug reports, consult the following page on                 the World Wide Web:                      http://developer.apple.com/bugreporter/ */_kHRRendererHTML32Type = _"ht32"#if ndef _DEFINEDINCARBON#define HRReference as ptr#define HRWasURLVisitedUPP as ptr#define HRNewURLUPP as ptr#define HRWasURLVisitedProcPtr as ptr#define HRURLToFSSpecUPP as ptr#define HRNewURLProcPtr as ptr#define HRURLToFSSpecProcPtr as ptr#define HRScrollbarState as SInt16begin enum_eHRScrollbarOn   = 0_eHRScrollbarOff  = 1_eHRScrollbarAuto = 2end enum#define  URLSourceType as UInt16begin enum_kHRLookingForHTMLSource  = 1_kHRLookingForImage       = 2_kHRLookingForEmbedded    = 3_kHRLookingForImageMap    = 4_kHRLookingForFrame       = 5end enum#endif // ndef _DEFINEDINCARBONtoolbox fn HRHTMLRenderingLibAvailable = Booleantoolbox fn HRNewReference (HRReference * hrRef,  OSType  rendererType, CGrafptr ) = OSStatustoolbox fn HRDisposeReference (HRReference  hrRef) = OSStatustoolbox fn HRFreeMemory (long inBytesNeeded) = Long/* level notifications */Toolbox HRScreenConfigurationChanged()toolbox fn HRIsHREvent (EventRecord * evnt ) = Boolean/* Drawing */toolbox fn HRSetGrafPtr (HRReference hrRef, long) = OSStatustoolbox fn HRActivate (HRReference hrRef) = OSStatustoolbox fn HRDeactivate  (HRReference hrRef) = OSStatustoolbox fn HRDraw  (HRReference hrRef, RgnHandle  updateRgnH) = OSStatustoolbox fn HRSetRenderingRect  (HRReference hrRef, const Rect *  renderingRect) = OSStatustoolbox fn HRGetRenderedImageSize (HRReference hrRef, Point * renderingSize) = OSStatustoolbox fn HRScrollToLocation  (HRReference hrRef, Point * location) = OSStatustoolbox fn HRForceQuickdraw (HRReference hrRef, Boolean forceQuickdraw) = OSStatustoolbox fn HRSetScrollbarState (HRReference hrRef, HRScrollbarState hScrollbarState, HRScrollbarState vScrollbarState) = OSStatustoolbox fn HRSetDrawBorder  (HRReference hrRef, Boolean drawBorder) = OSStatustoolbox fn HRSetGrowboxCutout  (HRReference hrRef, Boolean allowCutout) = OSStatus/* Navigation */toolbox fn HRGoToFile (HRReference hrRef, @fsSpec, Boolean, Boolean) = OSStatustoolbox fn HRGoToURL  (HRReference hrRef,const char *  url, Boolean addToHistory,Boolean forceRefresh) = OSStatustoolbox fn HRGoToAnchor (HRReference hrRef, @char) = OSStatus // @char = ptr to cstr//@char is ptr to buffertoolbox fn HRGoToPtr  (HRReference hrRef, @char, UInt32  bufferSize, Boolean addToHistory, Boolean forceRefresh) = OSStatus/* Accessors *//* either file url or url of <base> tag */toolbox fn HRGetRootURL  (HRReference hrRef,Handle  rootURLH) = OSStatus/* url of <base> tag */toolbox fn HRGetBaseURL  (HRReference hrRef,Handle  baseURLH) = OSStatus/* file url */toolbox fn HRGetHTMLURL  (HRReference hrRef,Handle  HTMLURLH) = OSStatustoolbox fn HRGetTitle (HRReference hrRef, @str255) = OSStatustoolbox fn HRGetHTMLFile (HRReference hrRef, FSSpec *   fsspec) = OSStatus/* Utilities */toolbox fn HRUtilCreateFullURL (const char *  rootURL, const char *  linkURL, Handle  fullURLH) = OSStatus/* urlHandle should be valid on input */toolbox fn HRUtilGetFSSpecFromURL (const char *  rootURL, const char *  linkURL, FSSpec *   destSpec) = OSStatustoolbox fn HRUtilGetURLFromFSSpec (const FSSpec *   fsspec, Handle  urlHandle) = OSStatus/*    Visited links    If you register a function here, it will be called to determine    whether or not the given URL has been visited. It should return    true if the URL has been visited.        In addition to the URLs that the application may add to the list    of visited links, it should also add URLs that the user clicks    on. These URLs can be caught by the "add URL to history" callback    below. *//*typedef CALLBACK_API( Boolean , HRWasURLVisitedProcPtr )(const char *url, void *refCon);typedef STACK_UPP_TYPE(HRWasURLVisitedProcPtr)   HRWasURLVisitedUPP;*/toolbox HRUnregisterWasURLVisitedUPP (HRReference hrRef)toolbox HRRegisterWasURLVisitedUPP   (HRWasURLVisitedUPP , HRReference hrRef, @long)/*    New URL    If you register a function here, it will be called every time    the renderer is going to display a new URL. A few examples of how    you might use this include...            (a) maintaining a history of URLs        (b) maintainging a list of visited links        (c) setting a window title based on the new URL*//*typedef CALLBACK_API( OSStatus , HRNewURLProcPtr )(const char *url, const char *targetFrame, Boolean addToHistory, void *refCon);typedef STACK_UPP_TYPE(HRNewURLProcPtr) HRNewURLUPP;*/toolbox HRRegisterNewURLUPP (HRNewURLUPP   inNewURLUPP,HRReference hrRef,@long)toolbox HRUnregisterNewURLUPP  (HRReference hrRef)/* If you register a function here, it will be called every time the renderer is going to locate a file. The function will be passed an enum indicating the type of file being asked for. *//*typedef CALLBACK_API( OSStatus , HRURLToFSSpecProcPtr )(const char *rootURL, const char *linkURL, FSSpec *fsspec, URLSourceType urlSourceType, void *refCon);typedef STACK_UPP_TYPE(HRURLToFSSpecProcPtr)  HRURLToFSSpecUPP;*/toolbox HRRegisterURLToFSSpecUPP  (HRURLToFSSpecUPP,HRReference hrRef,@long)toolbox HRUnregisterURLToFSSpecUPP   (HRReference hrRef)toolbox fn NewHRWasURLVisitedUPP (HRWasURLVisitedProcPtr  userRoutine) = HRWasURLVisitedUPPtoolbox fn NewHRNewURLUPP  (HRNewURLProcPtr   userRoutine) = HRNewURLUPPtoolbox fn NewHRURLToFSSpecUPP   (HRURLToFSSpecProcPtr userRoutine) = HRURLToFSSpecUPPtoolbox DisposeHRWasURLVisitedUPP   (HRWasURLVisitedUPP   userUPP)toolbox DisposeHRNewURLUPP (HRNewURLUPP userUPP)Toolbox DisposeHRURLToFSSpecUPP  (HRURLToFSSpecUPP  userUPP)toolbox fn InvokeHRWasURLVisitedUPP (@char ,@long,HRWasURLVisitedUPP ) = Booleantoolbox fn InvokeHRNewURLUPP  (@char,@char,Boolean  addToHistory,@long,HRNewURLUPP ) = OSStatustoolbox fn InvokeHRURLToFSSpecUPP   (const char *   rootURL,const char *   linkURL,FSSpec * fsspec,URLSourceType  urlSourceType,@long,HRURLToFSSpecUPP  userUPP) = OSStatus