#if ndef _DEFINEDINCARBON// last mod RP   12 Jan 2005/*     File:       LaunchServices/LSOpen.h      Version:    LaunchServices-97~1 *//* ======================================================================================================== *//* LaunchServices Type & Constants                                                                          *//* ======================================================================================================== */#define LSLaunchFlags as UInt32 //OptionBitsbegin enum_kLSLaunchDefaults = 0x00000001/* default = open, async, use Info.plist, start Classic*/_kLSLaunchAndPrint = 0x00000002/* print items instead of open them*/_kLSLaunchReserved2 = 0x00000004_kLSLaunchReserved3 = 0x00000008_kLSLaunchReserved4 = 0x00000010_kLSLaunchReserved5 = 0x00000020_kLSLaunchReserved6 = 0x00000040_kLSLaunchInhibitBGOnly = 0x00000080/* causes launch to fail if target is background-only.*/_kLSLaunchDontAddToRecents = 0x00000100/* do not add app or documents to recents menus.*/_kLSLaunchDontSwitch = 0x00000200/* don`t bring new app to the foreground.*/_kLSLaunchNoParams = 0x00000800/* Use Info.plist to determine launch parameters*/_kLSLaunchAsync = 0x00010000/* launch async; obtain results from kCPSNotifyLaunch.*/_kLSLaunchStartClassic = 0x00020000/* start up Classic environment if required for app.*/_kLSLaunchInClassic = 0x00040000/* force app to launch in Classic environment.*/_kLSLaunchNewInstance = 0x00080000/* Instantiate app even if it is already running.*/_kLSLaunchAndHide = 0x00100000/* Send child a "hide" request as soon as it checks in.*/_kLSLaunchAndHideOthers = 0x00200000/* Hide all other apps when child checks in.*/end enumbegin record LSLaunchFSRefSpecdim as ptr              appRef  // to FSRef/* app to use, can be NULL*/dim as UInt32           numDocs/* items to open/print, can be NULL*/dim as ptr              itemRefs // to FSRef/* array of FSRefs*/dim as ptr              passThruParams // to AEDesc/* passed untouched to application as optional parameter*/dim as LSLaunchFlags    launchFlagsdim as ptr              asyncRefCon // to void/* used if you register for app birth/death notification*/end record begin record LSLaunchURLSpecdim as CFURLRef       appURL /* app to use, can be NULL*/dim as ptr            itemURLs  // CFArrayRef /* items to open/print, can be NULL*/dim as ptr            passThruParams  // to AEDesc/* passed untouched to application as optional parameter*/dim as LSLaunchFlags  launchFlags dim as ptr            asyncRefCon  // to void/* used if you register for app birth/death notification*/end record /* ======================================================================================================== *//* LaunchServices API                                                                                       *//* ======================================================================================================== *//* *  LSOpenFSRef() *   *  Summary: *    Open an application, document, or folder. *   *  Discussion: *    Opens applications, documents, and folders. Applications are *    opened via an `oapp` or `rapp` event. Documents are opened in *    their user-overridden or default applications as appropriate. *    Folders are opened in the Finder. Use the more specific *    LSOpenFromRefSpec for more control over launching. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inRef: *      The FSRef of the item to launch. *     *    outLaunchedRef: *      The FSRef of the item actually launched. For inRefs that are *      documents, outLaunchedRef will be the application used to *      launch the document. Can be NULL. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSOpenFSRef( const FSRef * inRef, FSRef * outLaunchedRef) = OSStatus/* can be NULL *//* *  LSOpenCFURLRef() *   *  Summary: *    Open an application, document, or folder. *   *  Discussion: *    Opens applications, documents, and folders. Applications are *    opened via an `oapp` or `rapp` event. Documents are opened in *    their user-overridden or default applications as appropriate. *    Folders are opened in the Finder. Use the more specific *    LSOpenFromURLSpec for more control over launching. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inURL: *      The CFURLRef of the item to launch. *     *    outLaunchedURL: *      The CFURLRef of the item actually launched. For inURLs that are *      documents, outLaunchedURL will be the application used to *      launch the document. Can be NULL. THIS FUNCTION, DESPITE ITS *      NAME, RETAINS THE URL REFERENCE ON BEHALF OF THE CALLER. THE *      CALLER MUST EVENTUALLY RELEASE THE RETURNED URL REFERENCE. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSOpenCFURLRef( CFURLRef inURL, CFURLRef * outLaunchedURL) = OSStatus/* can be NULL *//* *  LSOpenFromRefSpec() *   *  Summary: *    Opens an application or one or more documents or folders. *   *  Discussion: *    Opens applications, documents, and folders. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inLaunchSpec: *      The specification of what to launch and how to launch it. *     *    outLaunchedRef: *      The FSRef of the item actually launched. For inRefs that are *      documents, outLaunchedRef will be the application used to *      launch the document. Can be NULL. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSOpenFromRefSpec( const LSLaunchFSRefSpec * inLaunchSpec, FSRef * outLaunchedRef) = OSStatus/* can be NULL *//* *  LSOpenFromURLSpec() *   *  Summary: *    Opens an application or one or more documents or folders. *   *  Discussion: *    Opens applications, documents, and folders. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inLaunchSpec: *      The specification of what to launch and how to launch it. *     *    outLaunchedURL: *      The CFURLRef of the item actually launched. For inURLs that are *      documents, outLaunchedURL will be the application used to *      launch the document. Can be NULL. THIS FUNCTION, DESPITE ITS *      NAME, RETAINS THE URL REFERENCE ON BEHALF OF THE CALLER. THE *      CALLER MUST EVENTUALLY RELEASE THE RETURNED URL REFERENCE. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSOpenFromURLSpec( const LSLaunchURLSpec * inLaunchSpec, CFURLRef * outLaunchedURL) = OSStatus/* can be NULL */#endif