#if ndef _DEFINEDINCARBON/* Robert P.   25 March 2003converted from the OS X 10.2.4 header Multiprocessing.h with Michael Kluskens' CToFB3.*//*     File:       CarbonCore/Multiprocessing.h     Version:    CarbonCore-431~1     Copyright:  © 1995-2002 DayStar Digital, Inc.*//*===========================================================================================   *** WARNING: You must properly check the availability of MP services before calling them!   See the section titled "Checking API Availability".   ===========================================================================================*/#define AbsoluteTime as UnsignedWide/* ===========================================================================================   This is the header file for version 2.2 of the Mac OS multiprocessing support.  This version   has been totally reimplemented and has significant new services.  The main goal of the   reimplementation has been to transfer task management into the core operating system to provide   much more reliable and more efficient operation, including on single processor machines.   The memory management has also been massively improved, it is much faster and wastes much   less space.  New services include POSIX style per-task storage, timers with millisecond and   microsecond resolutions, memory allocation at a specified alignment, and system pageable   and RAM resident memory pools.  See the MP API documentation for details.   The old "DayStar" debugging services (whose names began with an underscore) have been   removed from this header.  A very few are still implemented for binary compatibility, or in   cases where they happened to be exposed inappropriately.  (E.g. _MPIsFullyInitialized must   be called to see if the MP API is ReallyTrulyª usable.)  New code and recompiles of old   code should avoid use of these defunct services, except for _MPIsFullyInitialized.   ===========================================================================================*//*===========================================================================================   The following services are from the original MP API and remain supported in version 2.0:    MPProcessors    MPCreateTask    MPTerminateTask    MPCurrentTaskID    MPYield    MPExit    MPCreateQueue    MPDeleteQueue    MPNotifyQueue    MPWaitOnQueue    MPCreateSemaphore    MPCreateBinarySemaphore     (In C only, a macro that calls MPCreateSemaphore.)    MPDeleteSemaphore    MPSignalSemaphore    MPWaitOnSemaphore    MPCreateCriticalRegion    MPDeleteCriticalRegion    MPEnterCriticalRegion    MPExitCriticalRegion    MPAllocate                  (Deprecated, use MPAllocateAligned for new builds.)    MPFree    MPBlockCopy    MPLibraryIsLoaded           (In C only, a macro.)    _MPIsFullyInitialized       (See comments about checking for MP API availability.)   ===========================================================================================*//*===========================================================================================   The following services are new in version 2.0:    MPProcessorsScheduled    MPSetTaskWeight    MPTaskIsPreemptive    MPAllocateTaskStorageIndex    MPDeallocateTaskStorageIndex    MPSetTaskStorageValue    MPGetTaskStorageValue    MPSetQueueReserve    MPCreateEvent    MPDeleteEvent    MPSetEvent    MPWaitForEvent    UpTime    DurationToAbsolute    AbsoluteToDuration    MPDelayUntil    MPCreateTimer    MPDeleteTimer    MPSetTimerNotify    MPArmTimer    MPCancelTimer    MPSetExceptionHandler    MPThrowException    MPDisposeTaskException    MPExtractTaskState    MPSetTaskState    MPRegisterDebugger    MPUnregisterDebugger    MPAllocateAligned           (Preferred over MPAllocate.)    MPGetAllocatedBlockSize    MPBlockClear    MPDataToCode    MPRemoteCall                (Preferred over _MPRPC.)   ===========================================================================================*//*===========================================================================================   The following services are new in version 2.1:    MPCreateNotification    MPDeleteNotification    MPModifyNotification    MPCauseNotification    MPGetNextTaskID    MPGetNextCpuID   ===========================================================================================*//*===========================================================================================   The following services are "unofficial" extensions to the original API.  They are not in   the multiprocessing API documentation, but were in previous versions of this header.  They   remain supported in version 2.0.  They may not be supported in other environments.    _MPRPC                      (Deprecated, use MPRemoteCall for new builds.)    _MPAllocateSys              (Deprecated, use MPAllocateAligned for new builds.)    _MPTaskIsToolboxSafe    _MPLibraryVersion    _MPLibraryIsCompatible   ===========================================================================================*//*===========================================================================================   General Types and Constants   ===========================*/' MPLibraryName = "MPLibrary"' MPLibraryCName = MPLibraryName' MPLibraryPName = "\p" MPLibraryName' MP_API_Version = "2.3"begin enum_MPLibraryMajorVersion = 2/* ! When these change be sure to update the build versions*/_MPLibraryMinorVersion = 3/* !  used in the startup check in MPInitializeAPI!*/_MPLibraryRelease = 1_MPLibraryDevelopmentRevision = 1end enum#define MPProcessID as Ptr //to OpaqueMPProcessID#define MPTaskID as Ptr //to OpaqueMPTaskID#define MPQueueID as Ptr //to OpaqueMPQueueID#define MPSemaphoreID as Ptr //to OpaqueMPSemaphoreID#define MPCriticalRegionID as Ptr //to OpaqueMPCriticalRegionID#define MPTimerID as Ptr //to OpaqueMPTimerID#define MPEventID as Ptr //to OpaqueMPEventID#define MPAddressSpaceID as Ptr //to OpaqueMPAddressSpaceID#define MPNotificationID as Ptr //to OpaqueMPNotificationID#define MPCoherenceID as Ptr //to OpaqueMPCoherenceID#define MPCpuID as Ptr //to OpaqueMPCpuID#define MPAreaID as Ptr //to OpaqueMPAreaID#define MPConsoleID as Ptr //to OpaqueMPConsoleID#define MPOpaqueID as Ptr //to OpaqueMPOpaqueIDbegin enum/* Values for MPOpaqueIDClass.*/_kOpaqueAnyID = 0_kOpaqueProcessID = 1_kOpaqueTaskID = 2_kOpaqueTimerID = 3_kOpaqueQueueID = 4_kOpaqueSemaphoreID = 5_kOpaqueCriticalRegionID = 6_kOpaqueCpuID = 7_kOpaqueAddressSpaceID = 8_kOpaqueEventID = 9_kOpaqueCoherenceID = 10_kOpaqueAreaID = 11_kOpaqueNotificationID = 12_kOpaqueConsoleID = 13end enum#define MPOpaqueIDClass as UInt32//_kMPNoID = _kInvalidID    apparently 0    RP   /* New code should use kInvalidID everywhere.*/#define MPTaskOptions as UInt32//OptionBits#define TaskStorageIndex as UInt32#define TaskStorageValue as UInt32#define MPSemaphoreCount as UInt32#define MPTaskWeight as UInt32#define MPEventFlags as UInt32#define MPExceptionKind as UInt32#define MPTaskStateKind as UInt32#define MPPageSizeClass as UInt32begin enum_kDurationImmediate = 0_kDurationForever = 0x7FFFFFFF_kDurationMillisecond = 1_kDurationMicrosecond = -1end enum/*   Process/Processor Services*//* *  MPProcessors() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPProcessors( ) = UInt32 /* The physical total.*//* *  MPProcessorsScheduled() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPProcessorsScheduled( ) = UInt32 /* Those currently in use.*//*   Tasking Services*/begin enum/* For MPCreateTask options*/_kMPCreateTaskSuspendedMask = 1<<0_kMPCreateTaskTakesAllExceptionsMask = 1<<1_kMPCreateTaskNotDebuggableMask = 1<<2_kMPCreateTaskValidOptionsMask = _kMPCreateTaskSuspendedMask + _kMPCreateTaskTakesAllExceptionsMask + _kMPCreateTaskNotDebuggableMaskend enum#define TaskProc as Ptr//typedef CALLBACK_API_C( OSStatus , TaskProc )(void * parameter);/* *  MPCreateTask() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPCreateTask( TaskProc entryPoint, Ptr parameter, UInt32 stackSize, MPQueueID notifyQueue, Ptr terminationParameter1, Ptr terminationParameter2, MPTaskOptions options, MPTaskID * task)= OSStatus/* *  MPTerminateTask() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPTerminateTask( MPTaskID task, OSStatus terminationStatus) = OSStatus/* *  MPSetTaskWeight() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPSetTaskWeight( MPTaskID task, MPTaskWeight weight) = OSStatus/* *  MPTaskIsPreemptive() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPTaskIsPreemptive( MPTaskID taskID) = Boolean/* May be kInvalidID.*//* *  MPExit() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox MPExit( OSStatus status)/* *  MPYield() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox MPYield( )/* *  MPCurrentTaskID() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPCurrentTaskID( ) = MPTaskID/* *  MPSetTaskType() *   *  Availability: *    Mac OS X:         in version 10.1 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.3 and later */toolbox fn MPSetTaskType( MPTaskID task, OSType taskType) = OSStatus/*   ---------------------------------------------------   ! The task storage services are new in version 2.0.*//* *  MPAllocateTaskStorageIndex() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPAllocateTaskStorageIndex( TaskStorageIndex * index) = OSStatus/* *  MPDeallocateTaskStorageIndex() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPDeallocateTaskStorageIndex( TaskStorageIndex index) = OSStatus/* *  MPSetTaskStorageValue() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPSetTaskStorageValue( TaskStorageIndex index, TaskStorageValue value) = OSStatus/* *  MPGetTaskStorageValue() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPGetTaskStorageValue( TaskStorageIndex index) = TaskStorageValue/*   Synchronization Services*//* *  MPCreateQueue() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPCreateQueue( MPQueueID * queue) = OSStatus/* *  MPDeleteQueue() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPDeleteQueue( MPQueueID queue) = OSStatus/* *  MPNotifyQueue() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPNotifyQueue( MPQueueID queue, Ptr param1, Ptr param2, Ptr param3) = OSStatus/* *  MPWaitOnQueue() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPWaitOnQueue( MPQueueID queue, @Ptr param1, @Ptr param2, @Ptr param3, Duration timeout) = OSStatus/*MPWaitOnQueue(  MPQueueID   queue,  void **     param1,  void **     param2,  void **     param3,  Duration    timeout)*//* *  MPSetQueueReserve() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPSetQueueReserve( MPQueueID queue, UInt32 count) = OSStatus/* *  MPCreateSemaphore() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPCreateSemaphore( MPSemaphoreCount maximumValue, MPSemaphoreCount initialValue, MPSemaphoreID * semaphore) = OSStatus/* *  MPDeleteSemaphore() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPDeleteSemaphore( MPSemaphoreID semaphore) = OSStatus/* *  MPSignalSemaphore() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPSignalSemaphore( MPSemaphoreID semaphore) = OSStatus/* *  MPWaitOnSemaphore() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPWaitOnSemaphore( MPSemaphoreID semaphore, Duration timeout) = OSStatus' MPCreateBinarySemaphore(semaphore) =   MPCreateSemaphore ( 1, 1, (semaphore) )/* *  MPCreateCriticalRegion() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPCreateCriticalRegion( MPCriticalRegionID * criticalRegion) = OSStatus/* *  MPDeleteCriticalRegion() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPDeleteCriticalRegion( MPCriticalRegionID criticalRegion) = OSStatus/* *  MPEnterCriticalRegion() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPEnterCriticalRegion( MPCriticalRegionID criticalRegion, Duration timeout) = OSStatus/* *  MPExitCriticalRegion() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPExitCriticalRegion( MPCriticalRegionID criticalRegion) = OSStatus/* *  MPCreateEvent() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPCreateEvent( MPEventID * event ) = OSStatus/* *  MPDeleteEvent() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPDeleteEvent( MPEventID event ) = OSStatus/* *  MPSetEvent() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPSetEvent( MPEventID event, MPEventFlags flags) = OSStatus/* *  MPWaitForEvent() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPWaitForEvent( MPEventID event, MPEventFlags * flags, Duration timeout) = OSStatus/*   Notification Services (API)*//* *  MPCreateNotification() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.1 and later */toolbox fn MPCreateNotification( MPNotificationID * notificationID) = OSStatus/* *  MPDeleteNotification() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.1 and later */toolbox fn MPDeleteNotification( MPNotificationID notificationID) = OSStatus/* *  MPModifyNotification() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.1 and later */toolbox fn MPModifyNotification( MPNotificationID notificationID, MPOpaqueID anID, Ptr notifyParam1, Ptr notifyParam2, Ptr notifyParam3) = OSStatus/* *  MPModifyNotificationParameters() *   *  Availability: *    Mac OS X:         in version 10.1 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.3 and later */toolbox fn MPModifyNotificationParameters( MPNotificationID notificationID, MPOpaqueIDClass kind, Ptr notifyParam1, Ptr notifyParam2, Ptr notifyParam3) = OSStatus/* *  MPCauseNotification() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.1 and later */toolbox fn MPCauseNotification( MPNotificationID notificationID) = OSStatus/*   Timer Services   --------------------------------------------   ! The timer services are new in version 2.0.*/begin enum/* For MPArmTimer options*/_kMPPreserveTimerIDMask = 1<<0_kMPTimeIsDeltaMask = 1<<1_kMPTimeIsDurationMask = 1<<2end enum/* *  MPDelayUntil() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPDelayUntil( AbsoluteTime * expirationTime) = OSStatus/* *  MPDelayUntilSys() *   *  Availability: *    Mac OS X:         not available *    CarbonLib:        not available *    Non-Carbon CFM:   in MPLibrary 2.1 and later *//* *  MPCreateTimer() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPCreateTimer( MPTimerID * timerID) = OSStatus/* *  MPDeleteTimer() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPDeleteTimer( MPTimerID timerID) = OSStatus/* *  MPSetTimerNotify() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPSetTimerNotify( MPTimerID timerID, MPOpaqueID anID, Ptr notifyParam1, Ptr notifyParam2, Ptr notifyParam3) = OSStatus/* *  MPArmTimer() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPArmTimer( MPTimerID timerID, AbsoluteTime * expirationTime, UInt32 options) = OSStatus/* *  MPCancelTimer() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPCancelTimer( MPTimerID timerID, AbsoluteTime * timeRemaining) = OSStatus/*   Memory Services*/begin enum/* Maximum allocation request size is 1GB.*/_kMPMaxAllocSize = 1024*1024*1024end enumbegin enum/* Values for the alignment parameter to MPAllocateAligned.*/_kMPAllocateDefaultAligned = 0_kMPAllocate8ByteAligned = 3_kMPAllocate16ByteAligned = 4_kMPAllocate32ByteAligned = 5_kMPAllocate1024ByteAligned = 10_kMPAllocate4096ByteAligned = 12_kMPAllocateMaxAlignment = 16/* Somewhat arbitrary limit on expectations.*/_kMPAllocateAltiVecAligned = _kMPAllocate16ByteAligned/* The P.C. name.*/_kMPAllocateVMXAligned = _kMPAllocateAltiVecAligned/* The older, common name.*/_kMPAllocateVMPageAligned = 254/* Pseudo value, converted at runtime.*/_kMPAllocateInterlockAligned = 255/* Pseudo value, converted at runtime.*/end enumbegin enum/* Values for the options parameter to MPAllocateAligned.*/_kMPAllocateClearMask = 0x0001/* Zero the allocated block.*/_kMPAllocateGloballyMask = 0x0002/* Allocate from the globally visible pool.*/_kMPAllocateResidentMask = 0x0004/* Allocate from the RAM-resident pool.*/_kMPAllocateNoGrowthMask = 0x0010/* Do not attempt to grow the pool.*/_kMPAllocateNoCreateMask = 0x0020/* Do not attempt to create the pool if it doesn`t exist yet.*/end enum/* *  MPAllocateAligned() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPAllocateAligned( UInt32 size, UInt8 alignment, UInt32 options) = Ptr//LogicalAddress/* ! MPAllocateAligned is new in version 2.0.*//* *  MPAllocate() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox fn MPAllocate( UInt32 size) = Ptr//LogicalAddress/* Use MPAllocateAligned instead.*//* *  MPFree() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox MPFree( Ptr object)//( LogicalAddress object)/* *  MPGetAllocatedBlockSize() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPGetAllocatedBlockSize( Ptr object) = UInt32/* *  MPBlockCopy() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */toolbox MPBlockCopy( Ptr source, Ptr destination, UInt32 size)/* *  MPBlockClear() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox MPBlockClear( Ptr address, UInt32 size)/* ! MPBlockClear is new in version 2.0.*//* *  MPDataToCode() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox MPDataToCode( Ptr address, UInt32 size)/* ! MPDataToCode is new in version 2.0.*/#if 0 // too weird to include  RP/*   Exception/Debugging Services*//*   *** Important Note ***      The functions MPExtractTaskState and MPSetTaskState infer the size of the "info" buffer   from the "kind" parameter.  A given value for MPTaskStateKind will always refer to a   single specific physical buffer layout.  Should new register sets be added, or the size   or number of any registers change, new values of MPTaskStateKind will be introduced to   refer to the new buffer layouts.      The following types for the buffers are in MachineExceptions. The correspondence between   MPTaskStateKind values and MachineExceptions types is:           kMPTaskStateRegisters               -> RegisterInformation        kMPTaskStateFPU                     -> FPUInformation        kMPTaskStateVectors                 -> VectorInformation        kMPTaskStateMachine                 -> MachineInformation        kMPTaskState32BitMemoryException    -> ExceptionInfo for old-style 32-bit memory exceptions       For reference, on PowerPC the MachineExceptions types contain:           RegisterInformation -> The GPRs, 32 values of 64 bits each.        FPUInformation      -> The FPRs plus FPSCR, 32 values of 64 bits each, one value of                                32 bits.        VectorInformation   -> The AltiVec vector registers plus VSCR and VRSave, 32 values                                of 128 bits each, one value of 128 bits, and one 32 bit value.        MachineInformation  -> The CTR, LR, PC, each of 64 bits.  The CR, XER, MSR, MQ,                                exception kind, and DSISR, each of 32 bits.  The 64 bit DAR.        ExceptionInfo       -> Only memory exceptions are specified, 4 fields of 32 bits each.                                Note that this type only covers memory exceptions on 32-bit CPUs!   The following types are declared here:        kMPTaskStateTaskInfo                -> MPTaskInfo*/begin enum/* Values for the TaskStateKind to MPExtractTaskState and MPSetTaskState.*/_kMPTaskStateRegisters = 0/* The task general registers.*/_kMPTaskStateFPU = 1/* The task floating point registers*/_kMPTaskStateVectors = 2/* The task vector registers*/_kMPTaskStateMachine = 3/* The task machine registers*/_kMPTaskState32BitMemoryException = 4/* The task memory exception information for 32-bit CPUs.*/_kMPTaskStateTaskInfo = 5/* Static and dynamic information about the task.*/end enumbegin enum/* Option bits and numbers for MPDisposeTaskException.*/_kMPTaskPropagate = 0/* The exception is propagated.*/_kMPTaskResumeStep = 1/* The task is resumed and single step is enabled.*/_kMPTaskResumeBranch = 2/* The task is resumed and branch stepping is enabled.*/_kMPTaskResumeMask = 0x0000/* The task is resumed.*/_kMPTaskPropagateMask = 1<<_kMPTaskPropagate/* The exception is propagated.*/_kMPTaskResumeStepMask = 1<<_kMPTaskResumeStep/* The task is resumed and single step is enabled.*/_kMPTaskResumeBranchMask = 1<<_kMPTaskResumeBranch/* The task is resumed and branch stepping is enabled.*/end enumbegin enum/* For kMPTaskStateTaskInfo, the task`s runState*/_kMPTaskBlocked = 0/* Task is blocked (queued on resource)*/_kMPTaskReady = 1/* Task is runnable*/_kMPTaskRunning = 2/* Task is running*/end enumbegin enum/* For kMPTaskStateTaskInfo, the version of the MPTaskInfo structure requested.*/_kMPTaskInfoVersion = 3end enumbegin record MPTaskInfoVersion2dim as UInt32 version //PBVersion version/* Version 2 of the data structure requested*/dim as OSType name/* Task name*/dim as OSType queueName/* Task`s queue owner name*/dim as UInt16 runState/* Running, ready, blocked*/dim as UInt16 lastCPU/* Address of CPU where task previously ran*/dim as UInt32 weight/* Processing weight: 1 - 10,000*/dim as MPProcessID processID/* Owning process ID*/dim as AbsoluteTime cpuTime/* Accumulated task time*/dim as AbsoluteTime schedTime/* Time when last scheduled*/dim as AbsoluteTime creationTime/* Time when task created*/dim as UInt32 codePageFaults/* Page faults from code execution*/dim as UInt32 dataPageFaults/* Page faults from data access*/dim as UInt32 preemptions/* Number of times task was preempted*/dim as MPCpuID cpuID/* ID of CPU where task previously ran*/end recordbegin record MPTaskInfodim version as UInt32//PBVersion/* Version 3 of the data structure requested*/dim name as OSType/* Task name*/dim queueName as OSType/* Task`s queue owner name*/dim runState as UInt16/* Running, ready, blocked*/dim lastCPU as UInt16/* Address of CPU where task previously ran*/dim weight as UInt32/* Processing weight: 1 - 10,000*/dim processID as MPProcessID/* Owning process ID*/dim cpuTime as AbsoluteTime/* Accumulated task time*/dim schedTime as AbsoluteTime/* Time when last scheduled*/dim creationTime as AbsoluteTime/* Time when task created*/dim codePageFaults as UInt32/* Page faults from code execution*/dim dataPageFaults as UInt32/* Page faults from data access*/dim preemptions as UInt32/* Number of times task was preempted*/dim cpuID as MPCpuID/* ID of CPU where task previously ran.*/dim blockedObject as MPOpaqueID/* ID of blocked object.*/dim spaceID as MPAddressSpaceID/* Address space ID of this task.*/dim stackBase as Ptr/* Base of stack (lowest address).*/dim stackLimit as Ptr/* Stack limit (highest address).*/dim stackCurr as Ptr/* Current stack address.*/end record/*    Upon a task exception, the following message is sent to the designated queue:      1. The MPTaskID,       2. The exception kind. These are enumerated in the interfaces header MachineExceptions.h       3. N/A*//* *  MPSetExceptionHandler() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPSetExceptionHandler( MPTaskID task, MPQueueID exceptionQ) = OSStatus/* *  MPDisposeTaskException() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPDisposeTaskException( MPTaskID task, UInt32 action) = OSStatus/* *  MPExtractTaskState() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPExtractTaskState( MPTaskID task, MPTaskStateKind kind, void * info) = OSStatus/* *  MPSetTaskState() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPSetTaskState( MPTaskID task, MPTaskStateKind kind, void * info) = OSStatus/* *  MPThrowException() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPThrowException( MPTaskID task, MPExceptionKind kind) = OSStatus#define MPDebuggerLevel as UInt32begin enum_kMPLowLevelDebugger = 0x00000000/* MacsBug-like*/_kMPMidLevelDebugger = 0x10000000/* Jasik-like*/_kMPHighLevelDebugger = 0x20000000/* Metrowerks-like*/end enum/* *  MPRegisterDebugger() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPRegisterDebugger( MPQueueID queue, MPDebuggerLevel level) = OSStatus/* *  MPUnregisterDebugger() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox fn MPUnregisterDebugger( MPQueueID queue) = OSStatus#endif/*   Remote Call Services*/#define MPRemoteProcedure as Ptr//typedef CALLBACK_API_C( void *, MPRemoteProcedure )(void * parameter);#define MPRemoteContext as UInt8begin enum_kMPAnyRemoteContext = 0_kMPOwningProcessRemoteContext = 1_kMPInterruptRemoteContext = 2_kMPAsyncInterruptRemoteContext = 3end enum/* *  MPRemoteCall() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 2.0 and later */toolbox MPRemoteCall( MPRemoteProcedure remoteProc, Ptr parameter, MPRemoteContext context)/* ! MPRemoteCall is new in version 2.0.*//*   Checking API Availability   *** WARNING: You must properly check the availability of MP services before calling them!   *  _MPIsFullyInitialized() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later */// really a macro in Ctoolbox fn MPLibraryIsLoaded() = Boolean/*===========================================================================================   Miscellaneous Services   ======================*//* *  _MPLibraryVersion() *   *  Availability: *    Mac OS X:         in version 10.0 and later in CoreServices.framework *    CarbonLib:        in CarbonLib 1.0 and later *    Non-Carbon CFM:   in MPLibrary 1.0 and later *///////toolbox _MPLibraryVersion(const char **  versionCString, UInt32 *  major, UInt32 *  minor, UInt32 *  release, UInt32 *  revision);#endif