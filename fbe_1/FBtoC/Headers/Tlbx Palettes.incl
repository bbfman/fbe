// parm mods    14 August 2007   bw/*File:  Tlbx Palettes.InclContains: Palette Manager Interfaces.Version: Technology: System 7.5Package: Universal Interfaces 2.1 in ³MPW Latest² on ETO #18Copyright: © 1984-1995 by Apple Computer, Inc.All rights reserved.*/// Converted by Derek Smith// Some mods by Chris// More Mods to be FB2 clean by Derek#if ndef _DEFINEDINCARBON#if ndef _pmCourteous_pmCourteous     = 0/*Record use of color on each device touched.*/_pmTolerant      = 0x0002/*render ciRGB if ciTolerance is exceeded by best match.*/_pmAnimated      = 0x0004/*reserve an index on each device touched and render ciRGB.*/_pmExplicit      = 0x0008/*no reserve, no render, no record; stuff index into port.*/_pmWhite         = 0x0010_pmBlack         = 0x0020_pmInhibitG2     = 0x0100_pmInhibitC2     = 0x0200_pmInhibitG4     = 0x0400_pmInhibitC4     = 0x0800_pmInhibitG8     = 0x1000_pmInhibitC8     = 0x2000/* NSetPalette Update Constants */_pmNoUpdates     = 0x8000      /*no updates*/_pmBkUpdates     = 0xA000      /*background updates only*/_pmFgUpdates     = 0xC000      /*foreground updates only*/#endif_pmAllUpdates    = 0xE000      /*all updates*/begin record ColorInfodim ciRGB.RGBColor    /*true RGB values*/dim ciUsage         as short    /*color usage*/dim ciTolerance     as short/*tolerance value*/dim ciDataFields(3) as short   /*private fields*/end recordbegin record Palettedim pmEntries       as short     /*entries in pmTable*/dim pmDataFields(7) as short /*private fields*/dim pmInfo(1)       as ColorInfoend record#define PaletteHandle as Handle// to Palette'Date { 10/9/00 }#define CTabHandle    as Handletoolbox InitPalettes()toolbox fn NewPalette(short entries, CTabHandle srcColors, short srcUsage, short srcTolerance) = PaletteHandletoolbox fn GetNewPalette(short paletteID) = PaletteHandletoolbox DisposePalette(PaletteHandle srcPalette)toolbox ActivatePalette( WindowRef dstWindow)toolbox SetPalette( WindowRef dstWindow, PaletteHandle srcPalette, Boolean cUpdates)toolbox NSetPalette( WindowRef dstWindow, PaletteHandle srcPalette, short nCUpdates)toolbox fn GetPalette( WindowRef srcWindow) = PaletteHandletoolbox CopyPalette(PaletteHandle srcPalette, PaletteHandle dstPalette, short srcEntry, short dstEntry, short dstLength)toolbox PmForeColor(short dstEntry)toolbox PmBackColor(short dstEntry)toolbox AnimateEntry( WindowRef dstWindow, short dstEntry, const RGBColor * srcRGB )toolbox AnimatePalette( WindowRef dstWindow, CTabHandle srcCTab, short srcIndex, short dstEntry, short dstLength)toolbox GetEntryColor(PaletteHandle srcPalette, short srcEntry, RGBColor * srcRGB )toolbox SetEntryColor(PaletteHandle dstPalette, short dstEntry, const RGBColor * srcRGB )toolbox GetEntryUsage(PaletteHandle srcPalette, short srcEntry, short *dstUsage, short *dstTolerance)toolbox SetEntryUsage(PaletteHandle dstPalette, short dstEntry, short srcUsage, short srcTolerance)toolbox CTab2Palette(CTabHandle srcCTab, PaletteHandle dstPalette, short srcUsage, short srcTolerance)toolbox Palette2CTab(PaletteHandle srcPalette, CTabHandle dstCTab)toolbox fn Entry2Index(short entry) = longtoolbox RestoreDeviceClut(GDHandle gd)toolbox ResizePalette(PaletteHandle p, short size)toolbox SaveFore( Ptr *c )toolbox SaveBack( Ptr *c )toolbox RestoreFore( const Ptr *c )toolbox RestoreBack( const Ptr *c )toolbox fn SetDepth( GDHandle gd, short depth, short whichFlags, short flags ) = OSErr'toolbox fn HasDepth(GDHandle gd, short depth, short whichFlags, short flags) =shorttoolbox fn PMgrVersion() = shorttoolbox SetPaletteUpdates(PaletteHandle p, short updates)toolbox fn GetPaletteUpdates(PaletteHandle p) = shorttoolbox fn GetGray(GDHandle device, const RGBColor *backGround, RGBColor *foreGround) = Boolean#endif // ndef _DEFINEDINCARBON