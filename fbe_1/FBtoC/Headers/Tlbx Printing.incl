include "Tlbx CFString.incl"#if ndef _DEFINEDINCARBON// pointers to opaque PMObjects#define PMPrintSession  as ptr#define PMPageFormat    as ptr#define PMPrintSettings as ptr//#define PMPrintContext  as ptr//#define PMDialog        as ptrbegin record PMRectdim as double top, left, bottom, rightend record_kPMPortrait  = 1_kPMLandscape = 2_kPMNoData = 0_kPMNoPageFormat = 0_kPMNoPrintSettings = 0_kPMDontWantBoolean = 0_kPMDontWantData = 0_kPMCancel = 128_kPMPrintAllPages = -1/*// result codes_kPMNoError = 0_kPMGeneralError = -30870_kPMOutOfScope = -30871_kPMInvalidParameter = -50_kPMNoDefaultPrinter = -30872_kPMNotImplemented = -30873_kPMNoSuchEntry = -30874_kPMInvalidPrintSettings = -30875_kPMInvalidPageFormat = -30876_kPMValueOutOfRange = -30877_kPMLockIgnored = -30878*/toolbox fn PMSessionMakeOldPrintRecord(PMPrintSession printSession,PMPrintSettings printSettings,PMPageFormat pageFormat,Handle *printRecordHandle) = OSStatustoolbox fn PMSessionConvertOldPrintRecord(PMPrintSession printSession, Handle printRecordHandle, PMPrintSettings *printSettings, PMPageFormat *pageFormat) = OSStatustoolbox fn PMCreateSession(PMPrintSession *printSession) = OSStatustoolbox fn PMCreatePageFormat(PMPageFormat * pageFormat) = OSStatustoolbox fn PMSessionDefaultPageFormat(PMPrintSession printSession, PMPageFormat pageFormat) = OSStatustoolbox fn PMSessionPageSetupDialog(PMPrintSession printSession,PMPageFormat pageFormat,Boolean * accepted) = OSStatustoolbox fn PMSessionValidatePrintSettings(PMPrintSession printSession,PMPrintSettings printSettings,Boolean * result) = OSStatustoolbox fn PMSessionPrintDialog(PMPrintSession printSession,PMPrintSettings printSettings,PMPageFormat constPageFormat,Boolean * accepted) = OSStatustoolbox fn PMSessionValidatePageFormat(PMPrintSession printSession,PMPageFormat pageFormat,Boolean * result) = OSStatustoolbox fn PMRelease(ptr) = OSStatustoolbox fn PMCreatePrintSettings(PMPrintSettings *printSettings) = OSStatustoolbox fn PMSessionDefaultPrintSettings(PMPrintSession printSession,PMPrintSettings printSettings) = OSStatustoolbox fn PMSetJobNameCFString( PMPrintSettings printSettings, CFStringRef name ) = OSStatustoolbox fn PMSetCopies( PMPrintSettings printSettings,  UInt32 copies,  Boolean lock ) = OSStatustoolbox fn PMGetAdjustedPageRect( PMPageFormat pageFormat,  PMRect *pageRect ) = OSStatusbegin record PMResolutiondim hRes as doubledim vRes as doubleend recordtoolbox fn PMGetResolution( PMPageFormat pageFormat,  PMResolution * res ) = OSStatustoolbox fn PMGetAdjustedPaperRect( PMPageFormat pageFormat,  PMRect*pageRect ) = OSStatustoolbox fn PMGetFirstPage( PMPrintSettings printSettings,  UInt32 *first ) = OSStatustoolbox fn PMGetLastPage ( PMPrintSettings printSettings,  UInt32 *last  ) = OSStatustoolbox fn PMUnflattenPageFormat( Handle flatFormat, PMPageFormat *pageFormat ) = OSStatustoolbox fn PMFlattenPageFormat( PMPageFormat pageFormat, Handle *flatFormat ) = OSStatus#define PMOrientation as UInt16toolbox fn PMSetPageRange( PMPrintSettings printSettings,  UInt32 minPage,  UInt32 maxPage ) = OSStatustoolbox fn PMSetFirstPage( PMPrintSettings printSettings,  UInt32 first  ,  Boolean lock   ) = OSStatustoolbox fn PMSetLastPage ( PMPrintSettings printSettings,  UInt32 last   ,  Boolean lock   ) = OSStatustoolbox fn PMGetOrientation ( PMPageFormat pageFormat, PMOrientation *orientation ) = OSStatustoolbox fn PMSetOrientation( PMPageFormat pageFormat,UInt16 orientation, Boolean lock ) = OSStatustoolbox fn PMGetPageFormatExtendedData ( PMPageFormat pageFormat, OSType dataID, UInt32 *size, long ) = OSStatustoolbox fn PMSetPageFormatExtendedData ( PMPageFormat pageFormat, OSType dataID, UInt32 size, long ) = OSStatustoolbox fn PMSetResolution( PMPageFormat pageFormat,  PMResolution * res ) = OSStatustoolbox fn PMGetScale ( PMPageFormat pageFormat, double *scale ) = OSStatustoolbox fn PMSetScale ( PMPageFormat pageFormat, double scale ) = OSStatus'Toolbox fn PMSessionCreatePageFormatList( PMPrintSession printSession, PMPrinter printer, CFArrayRef *pageFormatList ) = OSStatustoolbox fn PMGetUnadjustedPageRect( PMPageFormat pageFormat,  PMRect*pageRect ) = OSStatustoolbox fn PMGetUnadjustedPaperRect( PMPageFormat pageFormat,  PMRect*pageRect ) = OSStatus// Print loop toolbox fn PMSessionBeginDocument( PMPrintSession printSession, PMPrintSettings printSettings, PMPageFormat pageFormat ) = OSStatus//You can use this function to determine whether the user has canceled the current print job. The result code kPMCancel is returned if the user clicks the Cancel button in the printer driver’s status dialog box. //If this or any other error is//encountered during the print loop, your application should call the appropriate “end” routines (for example, PMSessionEndPage and PMSessionEndDocument) to exit the print loop before reporting the error. toolbox fn PMSessionError( PMPrintSession printSession ) = OSStatustoolbox fn PMSessionBeginPage( PMPrintSession printSession, PMPageFormat pageFormat, const PMRect *pageFrame) = OSStatustoolbox fn PMSessionGetGraphicsContext( PMPrintSession printSession, CFStringRef graphicsType, ptr *graphicsContextPtr ) = OSStatus/*You should not call PMSessionEndPage if PMSessionBeginPage returns an error. PMSessionEndPage is equivalent to the Classic Printing Manager function PrClosePage. */toolbox fn PMSessionEndPage( PMPrintSession printSession ) = OSStatus/*On return, printSession is no longer valid; however, you must still call PMRelease to release the object. You should call PMSessionEndDocument after the last PMSessionEndPage in your print loop and before releasing the session. PMSessionEndDocument is equivalent to the Classic Printing Manager function PrCloseDoc. */toolbox fn PMSessionEndDocument( PMPrintSession printSession ) = OSStatus/* for customised dialogstoolbox fn NewModalFilterUPP( proc ) = proctoolbox DisposeModalFilterUPP( proc )#define PMPrintDialogInitUPP as proctoolbox fn PMSessionPrintDialogInit( PMPrintSession printSession, PMPrintSettings printSettings, PMPageFormat pageFormat, PMDialog *newDialog ) = OSStatustoolbox fn PMSessionPrintDialogMain( PMPrintSession printSession, PMPrintSettings printSettings, PMPageFormat constPageFormat, Boolean *accepted, PMPrintDialogInitUPP myInitProc ) = OSStatustoolbox fn NewPMPrintDialogInitUPP( proc ) = proctoolbox DisposePMPrintDialogInitUPP( proc )toolbox fn NewPMPItemUPP( proc ) = proctoolbox DisposePMItemUPP( proc )*///toolbox fn PMBeginDocument(PMPrintSettings printSettings,PMPageFormat pageFormat,PMPrintContext * printContext) = OSStatus//toolbox fn PMEndDocument(PMPrintContext printContext) = OSStatus//toolbox fn PMBeginPage(PMPrintContext printContext,const PMRect * pageFrame) = OSStatus//toolbox fn PMEndPage(PMPrintContext printContext) = OSStatus//toolbox fn PMPageSetupDialog(PMPageFormat pageFormat,Boolean * accepted) = OSStatus//toolbox fn PMPrintDialog(PMPrintSettings printSettings,PMPageFormat constPageFormat,Boolean * accepted) = OSStatus//toolbox fn PMPageSetupDialogInit(PMPageFormat pageFormat,PMDialog * newDialog) = OSStatus//toolbox fn PMPrintDialogInitWithPageFormat(PMPrintSettings printSettings,PMPageFormat constPageFormat,PMDialog * newDialog) = OSStatus//toolbox fn PMPrintDialogMain(PMPrintSettings printSettings,PMPageFormat constPageFormat,Boolean * accepted,proc PMPrintDialogInitUPP) = OSStatus//toolbox fn PMPageSetupDialogMain(PMPageFormat pageFormat,Boolean * accepted,proc PMPageSetupDialogInitUPP) = OSStatus//toolbox fn PMGetItemProc(PMDialog pmDialog,proc * PMItemUPP) = OSStatus// not recommended toolbox fn PMPrintDialogInit(PMPrintSettings printSettings,PMDialog * newDialog) = OSStatus// not recommended toolbox fn PMGetDialogPtr(long long,long * theDialog) = OSStatus// not recommended toolbox fn PMGetModalFilterProc(long long,long * ModalFilterUPP) = OSStatus// not recommended toolbox fn PMSetModalFilterProc(long long,long ModalFilterUPP) = OSStatus// not recommended toolbox fn PMSetItemProc(long long,long PMItemUPP) = OSStatus// not recommended toolbox fn PMGetDialogAccepted(long long,Boolean * process) = OSStatus// not recommended toolbox fn PMSetDialogAccepted(long long,Boolean process) = OSStatus// not recommended toolbox fn PMGetDialogDone(long long,Boolean * done) = OSStatus// not recommended  toolbox fn PMSetDialogDone(long long,Boolean done) = OSStatus#define PMSheetDoneUPP as proctoolbox fn PMSessionUseSheets (PMPrintSession,WindowRef,PMSheetDoneUPP) = OSStatustoolbox fn NewPMSheetDoneUPP (PMSheetDoneUPP) = PMSheetDoneUPP#endif