// param mods    14 August 2007   bw#if ndef _DEFINEDINCARBON// ImageCompression.hbegin record MatrixRecord'ARG Date { 7/24/03 }dim as Fixed  matrix(2, 2) // 3x3 matrixend record'ARG Date { 7/24/03 }// MacTypes.h/* moved to Tlbx MacTypes.incl   20090806#define CompTimeValue           as SInt64#define TimeBase                as long#define TimeScale               as long#define TimeValue as SInt32*/// Movies.h#define MoviesErrorUPP          as proc#define MoviePreviewCallOutUPP  as proc#define MovieDrawingCompleteUPP as proc#define TrackTransferUPP        as proc// Movies.h#define UserData                as long#define Movie                   as Handle#define Track                   as Handle#define Media                   as Handle#define MediaHandler            as Handle#define MediaHandlerComponent   as Handle#define QTAtomContainer         as Handle#define DataHandler             as proc#define DataHandlerComponent    as long#define SampleReferencePtr      as ptr#define SampleDescriptionHandle as Handle#define MovieController as ComponentInstance// ImageCompression.h#define GraphicsImportComponent as ComponentInstance// Dialogs.h#define ModalFilterYDUPP        as proc// MacTypes.h/* moved to Tlbx MacTypes.incl   20090806begin record TimeRecord'Changed { 1/15/01 } A.G. / C.S.dim value as CompTimeValuedim scale as TimeScaledim base  as TimeBaseend record'Changed { 1/15/01 } A.G. / C.S.*/// Components.htoolbox fn OpenComponent( Component aComponent ) = ComponentResulttoolbox fn OpenDefaultComponent( OSType componentType, OSType componentSubType ) = ComponentInstancetoolbox fn CloseComponent( ComponentInstance aComponentInstance ) = OSErr// Movies.htoolbox fn EnterMovies = OSErr// ImageCompression.h#if ndef _DEFINEDINCARBON#define CodecQ as unsigned long#define CodecType as OSType#endif// ndef _DEFINEDINCARBONtoolbox fn GetGraphicsImporterForFile(const FSSpec *theFile, ComponentInstance *gi) = OSErrtoolbox fn GraphicsImportSetBoundsRect(GraphicsImportComponent ci,const Rect *bounds) = ComponentResulttoolbox fn GraphicsImportGetBoundsRect(GraphicsImportComponent ci,Rect *bounds) = ComponentResulttoolbox fn GraphicsImportDraw(GraphicsImportComponent ci) = ComponentResulttoolbox fn GraphicsImportSetGWorld(GraphicsImportComponent ci,CGrafPtr port,GDHandle gd) = ComponentResulttoolbox fn GraphicsImportGetGWorld(GraphicsImportComponent ci,CGrafPtr *port,GDHandle *gd) = ComponentResulttoolbox fn GraphicsImportSetMatrix(GraphicsImportComponent ci,const MatrixRecord *matrix) = ComponentResulttoolbox fn GraphicsImportGetMatrix(GraphicsImportComponent ci,MatrixRecord *matrix) = ComponentResulttoolbox fn GraphicsImportSetDataHandle(GraphicsImportComponent ci,Handle h) = ComponentResulttoolbox fn GraphicsImportGetAsPicture(GraphicsImportComponent ci,PicHandle *PictHndl) = ComponentResulttoolbox fn GraphicsImportSaveAsPicture(GraphicsImportComponent ci,const FSSpec *fss,ScriptCode scriptTag) = ComponentResulttoolbox fn GraphicsImportGetExportImageTypeList(GraphicsImportComponent  ci,Ptr qtAtomContainerPtr) = ComponentResulttoolbox fn GraphicsImportExportImageFile(GraphicsImportComponent ci,OSType fileType,OSType fileCreator,const FSSpec *fss,ScriptCode scriptTag) = ComponentResulttoolbox fn GraphicsImportDoExportImageFileDialog(GraphicsImportComponent ci,FSSpec *inDefaultSpec,Str255 *prompt,Â               ModalFilterYDUPP filterProc,OSType *outType,FSSpec *outSpec,ScriptCode *outTag) = ComponentResulttoolbox fn GraphicsImportSetClip         (GraphicsImportComponent ci,RgnHandle clipRgn)   = ComponentResulttoolbox fn GraphicsImportGetClip         (GraphicsImportComponent ci,RgnHandle *clipRgn)  = ComponentResulttoolbox fn GraphicsImportSetSourceRect   (GraphicsImportComponent ci,Rect *sourceRect)    = ComponentResulttoolbox fn GraphicsImportGetSourceRect   (GraphicsImportComponent ci,Rect *sourceRect)    = ComponentResulttoolbox fn GraphicsImportGetNaturalBounds(GraphicsImportComponent ci,Rect *naturalBounds) = ComponentResulttoolbox fn GraphicsImportSetDestRect     (GraphicsImportComponent ci,Rect *destRect)      = ComponentResulttoolbox fn GraphicsImportGetDestRect     (GraphicsImportComponent ci,Rect *destRect)      = ComponentResulttoolbox fn GraphicsImportSetFlags        (GraphicsImportComponent ci,long  flags)         = ComponentResulttoolbox fn GraphicsImportGetFlags        (GraphicsImportComponent ci,long *flags)         = ComponentResulttoolbox fn GraphicsImportGetDefaultSourceRect(GraphicsImportComponent ci,Rect *defaultSourceRect) = ComponentResulttoolbox SFGetFilePreview(Point,@Str255,proc,short numTypes,long *typeList,proc dlgHook,long *reply)// *** delete?toolbox StandardGetFilePreview(proc fileFilter,short numTypes,long *typeList,long *reply)// *** delete?toolbox fn CompressPicture(PicHandle srcPicture,PicHandle dstPicture,CodecQ quality,CodecType cType) = OSErrtoolbox fn CompressPictureFile(short srcFile,short dstFile,CodecQ quality,CodecType cType)   = OSErr// Movies.htoolbox ExitMoviestoolbox fn GetMoviesError = OSErrtoolbox ClearMoviesStickyErrortoolbox fn GetMoviesStickyError = OSErrtoolbox SetMoviesErrorProc(MoviesErrorUPP errProc,long refcon)toolbox MoviesTask(Movie theMovie,long maxMilliSecToUse)toolbox fn PrerollMovie(Movie theMovie,TimeValue time,Fixed rate) = OSErrtoolbox fn LoadMovieIntoRam(Movie theMovie,TimeValue time,TimeValue dur,long flags) = OSErrtoolbox fn LoadTrackIntoRam(Track theTrack,TimeValue time,TimeValue dur,long flags) = OSErrtoolbox fn LoadMediaIntoRam(Media mda,TimeValue time,TimeValue dur,long flags) = OSErrtoolbox SetMovieActive(Movie theMovie,Boolean active)toolbox fn GetMovieActive(Movie theMovie) = Booleantoolbox StartMovie(Movie theMovie)toolbox StopMovie(Movie theMovie)toolbox GoToBeginningOfMovie(Movie theMovie)toolbox GoToEndOfMovie(Movie theMovie)toolbox fn IsMovieDone(Movie theMovie) = Booleantoolbox fn GetMoviePreviewMode(Movie theMovie) = Booleantoolbox SetMoviePreviewMode(Movie theMovie,Boolean usePreview)toolbox ShowMoviePoster(Movie theMovie)toolbox PlayMoviePreview(Movie theMovie,MoviePreviewCallOutUPP callOutProc,long refcon)toolbox fn GetMovieTimeBase(Movie theMovie) = TimeBasetoolbox SetMovieMasterTimeBase(Movie theMovie,TimeBase tb,const TimeRecord *slaveZero)toolbox SetMovieMasterClock(Movie theMovie,Component clockMeister,const TimeRecord *slaveZero)toolbox GetMovieGWorld(Movie theMovie,CGrafPtr *port,GDHandle *gdh)toolbox SetMovieGWorld(Movie theMovie,CGrafPtr port,GDHandle gdh)toolbox SetMovieDrawingCompleteProc(Movie theMovie,long flags,MovieDrawingCompleteUPP proc,long refCon)toolbox GetMovieNaturalBoundsRect(Movie theMovie,Rect *naturalBounds)toolbox fn GetNextTrackForCompositing(Movie theMovie,Track theTrack) = Tracktoolbox fn GetPrevTrackForCompositing(Movie theMovie,Track theTrack) = Track// ????.htoolbox fn SetMovieCompositeBufferFlags(Movie theMovie,long flags) = OSErr// *** delete?toolbox fn GetMovieCompositeBufferFlags(Movie theMovie,long *flags) = OSErr// *** delete?// Movies.htoolbox SetTrackGWorld(Track theTrack,CGrafPtr port,GDHandle gdh,TrackTransferUPP proc,long refCon)toolbox fn GetMoviePict(Movie theMovie,TimeValue time) = PicHandletoolbox fn GetTrackPict(Track theTrack,TimeValue time) = PicHandletoolbox fn GetMoviePosterPict(Movie theMovie) = PicHandle/* called between Begin & EndUpdate */toolbox fn UpdateMovie(Movie theMovie) = OSErrtoolbox fn InvalidateMovieRegion(Movie theMovie,RgnHandle invalidRgn) = OSErr/**** spatial movie routines ****/toolbox GetMovieBox(Movie theMovie,Rect *boxRect)toolbox SetMovieBox(Movie theMovie,const Rect *boxRect)/** movie display clip */toolbox fn GetMovieDisplayClipRgn(Movie theMovie) = RgnHandletoolbox SetMovieDisplayClipRgn(Movie theMovie,RgnHandle theClip)/** movie src clip */toolbox fn GetMovieClipRgn(Movie theMovie) = RgnHandletoolbox SetMovieClipRgn(Movie theMovie,RgnHandle theClip)/** track src clip */toolbox fn GetTrackClipRgn(Track theTrack) = RgnHandletoolbox SetTrackClipRgn(Track theTrack,RgnHandle theClip)/** bounds in display space (not clipped by display clip) */toolbox fn GetMovieDisplayBoundsRgn(Movie theMovie) = RgnHandletoolbox fn GetTrackDisplayBoundsRgn(Track theTrack) = RgnHandle/** bounds in movie space */toolbox fn GetMovieBoundsRgn(Movie theMovie) = RgnHandletoolbox fn GetTrackMovieBoundsRgn(Track theTrack) = RgnHandle/** bounds in track space */toolbox fn GetTrackBoundsRgn(Track theTrack) = RgnHandle/** mattes - always in track space */toolbox fn GetTrackMatte(Track theTrack) = Handletoolbox SetTrackMatte(Track theTrack,PixMapHandle theMatte)toolbox DisposeMatte(PixMapHandle theMatte)/************************** calls for getting/saving movies**************************/toolbox fn NewMovie(long flags) = Movietoolbox fn PutMovieIntoHandle(Movie theMovie,Handle publicMovie) = OSErrtoolbox fn PutMovieIntoDataFork(Movie theMovie,short fRefNum,long offset,long maxSize) = OSErrtoolbox DisposeMovie(Movie theMovie)/************************** Movie State Routines**************************/toolbox fn GetMovieCreationTime(Movie theMovie) = unsigned longtoolbox fn GetMovieModificationTime(Movie theMovie) = unsigned longtoolbox fn GetMovieTimeScale(Movie theMovie) = TimeScaletoolbox SetMovieTimeScale(Movie theMovie,TimeScale timeScale)toolbox fn GetMovieDuration(Movie theMovie) = TimeValuetoolbox fn GetMovieRate(Movie theMovie) = Fixedtoolbox SetMovieRate(Movie theMovie,Fixed rate)toolbox fn GetMoviePreferredRate(Movie theMovie) = Fixedtoolbox SetMoviePreferredRate(Movie theMovie,Fixed rate)toolbox fn GetMoviePreferredVolume(Movie theMovie) = shorttoolbox SetMoviePreferredVolume(Movie theMovie,short volume)toolbox fn GetMovieVolume(Movie theMovie) = shorttoolbox SetMovieVolume(Movie theMovie,short volume)toolbox GetMovieMatrix(Movie theMovie,MatrixRecord *matrix)toolbox SetMovieMatrix(Movie theMovie,const MatrixRecord *matrix)toolbox GetMoviePreviewTime(Movie theMovie,TimeValue *previewTime,TimeValue *previewDuration)toolbox SetMoviePreviewTime(Movie theMovie,TimeValue previewTime,TimeValue previewDuration)toolbox fn GetMoviePosterTime(Movie theMovie) = TimeValuetoolbox SetMoviePosterTime(Movie theMovie,TimeValue posterTime)toolbox GetMovieSelection(Movie theMovie,TimeValue *selectionTime,TimeValue *selectionDuration)toolbox SetMovieSelection(Movie theMovie,TimeValue selectionTime,TimeValue selectionDuration)toolbox SetMovieActiveSegment(Movie theMovie,TimeValue startTime,TimeValue dur)toolbox GetMovieActiveSegment(Movie theMovie,TimeValue *startTime,TimeValue *duration)toolbox fn GetMovieTime(Movie theMovie,TimeRecord *currentTime) = TimeValuetoolbox SetMovieTime(Movie theMovie,const TimeRecord *newtime)toolbox SetMovieTimeValue(Movie theMovie,TimeValue newtime)toolbox fn GetMovieUserData(Movie theMovie) = UserData/**************************Track/Media finding routines**************************/toolbox fn GetMovieTrackCount(Movie theMovie) = longtoolbox fn GetMovieTrack(Movie theMovie,long trackID) = Tracktoolbox fn GetMovieIndTrack(Movie theMovie,long index) = Tracktoolbox fn GetMovieIndTrackType(Movie theMovie,long index,OSType trackType,long flags) = Tracktoolbox fn GetTrackID(Track trk) = longtoolbox fn GetTrackMovie(Track trk) = Movie/**************************Track creation routines**************************/toolbox fn NewMovieTrack(Movie theMovie,Fixed width,Fixed height,short trackVolume) = Tracktoolbox DisposeMovieTrack(Track trk)/**************************Track State routines**************************/toolbox fn GetTrackCreationTime(Track trk) = unsigned longtoolbox fn GetTrackModificationTime(Track trk) = unsigned longtoolbox fn GetTrackEnabled(Track trk) = Booleantoolbox SetTrackEnabled(Track trk,Boolean isEnabled)toolbox fn GetTrackUsage(Track trk) = longtoolbox SetTrackUsage(Track trk,long usage)toolbox fn GetTrackDuration(Track trk) = TimeValuetoolbox fn GetTrackOffset(Track trk) = TimeValuetoolbox SetTrackOffset(Track trk,TimeValue movieOffsetTime)toolbox fn GetTrackLayer(Track trk) = shorttoolbox SetTrackLayer(Track trk,short layer)toolbox fn GetTrackAlternate(Track trk) = Tracktoolbox SetTrackAlternate(Track trk,Track alternateT)toolbox SetAutoTrackAlternatesEnabled(Movie theMovie,Boolean enable)toolbox SelectMovieAlternates(Movie theMovie)toolbox fn GetTrackVolume(Track trk) = shorttoolbox SetTrackVolume(Track trk,short volume)toolbox GetTrackMatrix(Track trk,MatrixRecord *matrix)toolbox SetTrackMatrix(Track trk,const MatrixRecord *matrix)toolbox GetTrackDimensions(Track trk,Fixed *width,Fixed *height)toolbox SetTrackDimensions(Track trk,Fixed width,Fixed height)toolbox fn GetTrackUserData(Track trk) = UserDatatoolbox fn GetTrackDisplayMatrix(Track trk,MatrixRecord *matrix) = OSErrtoolbox fn GetTrackSoundLocalizationSettings (Track trk,Handle *settings)= OSErrtoolbox fn SetTrackSoundLocalizationSettings (Track trk,Handle settings) = OSErr/**************************get Media routines**************************/toolbox fn NewTrackMedia(Track trk,OSType mediaType,TimeScale timeScale,Handle dataRef,OSType dataRefType) = Mediatoolbox DisposeTrackMedia(Media mda)toolbox fn GetTrackMedia(Track trk) = Mediatoolbox fn GetMediaTrack(Media mda) = Track/**************************Media State routines**************************/toolbox fn GetMediaCreationTime(Media mda) = unsigned longtoolbox fn GetMediaModificationTime(Media mda) = unsigned longtoolbox fn GetMediaTimeScale(Media mda) = TimeScaletoolbox SetMediaTimeScale(Media mda,TimeScale timeScale)toolbox fn GetMediaDuration(Media mda) = TimeValuetoolbox fn GetMediaLanguage(Media mda) = shorttoolbox SetMediaLanguage(Media mda,short language)toolbox fn GetMediaQuality(Media mda) = shorttoolbox SetMediaQuality(Media mda,short quality)toolbox GetMediaHandlerDescription(Media mda,OSType *mediaType,Str255 creatorName,OSType *creatorManufacturer)toolbox fn GetMediaUserData(Media mda) = UserDatatoolbox fn GetMediaInputMap(Media mda,QTAtomContainer *inputMap) = OSErrtoolbox fn SetMediaInputMap(Media mda,QTAtomContainer inputMap) = OSErr/**************************Media Handler routines**************************/toolbox fn GetMediaHandler(Media mda) = MediaHandlertoolbox fn SetMediaHandler(Media mda,MediaHandlerComponent mH) = OSErr/**************************Media's Data routines**************************/toolbox fn BeginMediaEdits(Media mda) = OSErrtoolbox fn EndMediaEdits(Media mda) = OSErrtoolbox fn SetMediaDefaultDataRefIndex(Media mda,short index) = OSErrtoolbox GetMediaDataHandlerDescription(Media mda,short index,OSType *dhType,Str255 creatorName,OSType *creatorManufacturer)toolbox fn GetMediaDataHandler(Media mda,short index) = DataHandlertoolbox fn SetMediaDataHandler(Media mda,short index,DataHandlerComponent dataHandler) = OSErrtoolbox fn GetDataHandler(Handle dataRef,OSType dataHandlerSubType,long flags) = Component/**************************Media Sample Table Routines**************************/toolbox fn GetMediaSampleDescriptionCount(Media mda) = longtoolbox GetMediaSampleDescription(Media mda,long index,SampleDescriptionHandle descH)toolbox fn SetMediaSampleDescription(Media mda,long index,SampleDescriptionHandle descH) = OSErrtoolbox fn GetMediaSampleCount(Media mda) = longtoolbox SampleNumToMediaTime(Media mda,long logicalSampleNum,TimeValue *sTime,TimeValue *sampleDuration)toolbox MediaTimeToSampleNum(Media mda,TimeValue time,long *sampleNum,TimeValue *sTime,TimeValue *sampleDuration)toolbox fn AddMediaSample(Media mda,Handle dataIn,long inOffset,unsigned long size,TimeValue durPerSmpl,SampleDescriptionHandle sDesH,long noS,short sFlgs,TimeValue *sTime) = OSErrtoolbox fn AddMediaSampleReference(Media mda,long dataOffset,unsigned long size,TimeValue durPerSmpl,SampleDescriptionHandle sDesH,long noS,short sFlgs,TimeValue *sTime) = OSErrtoolbox fn AddMediaSampleReferences(Media mda,SampleDescriptionHandle sDesH,long noS,SampleReferencePtr sRefs,TimeValue *sTime) = OSErrtoolbox fn GetMediaSample(Media mda,Handle dataOut,long maxSizeToGrow,long *size,TimeValue time,TimeValue *sTime,TimeValue *durPerS,SampleDescriptionHandle sdH,long *sDIndx,long maxSmpls,long *noS,short *sFlgs) = OSErrtoolbox fn GetMediaSampleReference(Media mda,long *dataOffset,long *size,TimeValue time,TimeValue *sTime,TimeValue *durPerSmpl,SampleDescriptionHandle sDesH,long *sDIndx,long maxSmpls,long *noS,short *sFlgs) = OSErrtoolbox fn GetMediaSampleReferences(Media mda,TimeValue time,TimeValue *sTime,SampleDescriptionHandle sDesH,long *sDIndx,long maxE,long *actualEntr,SampleReferencePtr sRefs) = OSErrtoolbox fn SetMediaPreferredChunkSize(Media mda,long maxChunkSize) = OSErrtoolbox fn GetMediaPreferredChunkSize(Media mda,long *maxChunkSize) = OSErrtoolbox fn SetMediaShadowSync(Media mda,long frameDiffSampleNum,long syncSampleNum) = OSErrtoolbox fn GetMediaShadowSync(Media mda,long frameDiffSampleNum,long *syncSampleNum) = OSErr/**************************Editing Routines**************************/toolbox fn InsertMediaIntoTrack(Track trk,TimeValue trackStart,TimeValue mediaTime,TimeValue mediaDuration,Fixed mediaRate) = OSErrtoolbox fn InsertTrackSegment(Track srcTrack,Track dstTrack,TimeValue srcIn,TimeValue srcDuration,TimeValue dstIn) = OSErrtoolbox fn InsertMovieSegment(Movie srcMovie,Movie dstMovie,TimeValue srcIn,TimeValue srcDuration,TimeValue dstIn) = OSErrtoolbox fn InsertEmptyTrackSegment(Track dstTrack,TimeValue dstIn,TimeValue dstDuration) = OSErrtoolbox fn InsertEmptyMovieSegment(Movie dstMovie,TimeValue dstIn,TimeValue dstDuration) = OSErrtoolbox fn DeleteTrackSegment(Track trk,TimeValue startTime,TimeValue duration) = OSErrtoolbox fn DeleteMovieSegment(Movie theMovie,TimeValue startTime,TimeValue duration) = OSErrtoolbox fn ScaleTrackSegment(Track trk,TimeValue startTime,TimeValue oldDuration,TimeValue newDuration) = OSErrtoolbox fn ScaleMovieSegment(Movie theMovie,TimeValue startTime,TimeValue oldDuration,TimeValue newDuration) = OSErrtoolbox fn OpenMovieFile( const FSSpec * fileSpec,short *resRefNum,SInt8 permission) = OSErrtoolbox fn CloseMovieFile(short resRefNum) = OSErrtoolbox fn NewMovieFromFile(Movie *theMovie,short resRefNum,short *resId,Str255 *resName,short newMovieFlags,Boolean *dataRefWasChanged) = OSErrtoolbox fn NewMovieController(Movie theMovie,Rect *movieRect,long someFlags) = ComponentInstancetoolbox DisposeMovieController(ComponentInstance mc)toolbox fn MCIsPlayerEvent(MovieController mc,long *eventRec) = ComponentResulttoolbox fn MCNewAttachedController(MovieController mc,Movie theMovie,WindowRef w,Point where) = ComponentResulttoolbox fn MCMovieChanged(MovieController mc,Movie m) = ComponentResulttoolbox fn MCDoAction(MovieController mc, short action,Ptr params) = ComponentResulttoolbox fn MCEnableEditing(MovieController mc,Boolean enabled) = ComponentResulttoolbox fn MCIsEditingEnabled(MovieController mc) = longtoolbox fn MCCopy(MovieController mc) = Movietoolbox fn MCCut(MovieController mc) = Movietoolbox fn MCPaste(MovieController mc, Movie srcMovie) = ComponentResulttoolbox fn MCClear(MovieController mc) = ComponentResulttoolbox fn MCUndo(MovieController mc) = ComponentResulttoolbox fn MCIdle(MovieController mc) = ComponentResulttoolbox fn MCGetControllerBoundsRect(MovieController mc,Rect *bounds) = ComponentResulttoolbox fn NewMovieFromHandle(Movie *theMovie,Handle h, short newMovieFlags,Boolean *dataRefWasChanged ) = OSErrtoolbox fn MCSetUpEditMenu(MovieController mc,long modifiers,MenuRef mh) = ComponentResulttoolbox fn PutMovieOnScrap(Movie theMovie, long movieScrapFlags) = OSErrtoolbox fn NewMovieFromScrap(long newMovieFlags) = Movietoolbox GetMovieNextInterestingTime(Movie theMovie, short interestingTimeFlags, short numMediaTypes, const OSType *whichMediaTypes, TimeValue time, Fixed rate, TimeValue *interestingTime, TimeValue *interestingDuration)// QuicktimeComponents.h#if ndef _DEFINEDINCARBON#define SeqGrabComponent as ComponentInstance#endif// ndef _DEFINEDINCARBON/**************************     Seq Grabber**************************/'Modified { 5/10/00 } A.G.toolbox fn SGInitialize(SeqGrabComponent s) = ComponentResulttoolbox fn SGGrabPict(SeqGrabComponent s, PicHandle *p, const Rect *bounds, short offscreenDepth, long grapPictFlags) = ComponentResult// Movies.h''     Modified { 5/10/00 } A.G.'toolbox PasteMovieSelection(Movie theMovie,Movie src)toolbox AddMovieSelection(Movie theMovie,Movie src)toolbox fn CopyMovieSelection(Movie theMovie) = Movietoolbox ClearMovieSelection(Movie theMovie)toolbox fn CutMovieSelection(Movie theMovie) = Movie_hintsHighQuality                  = &0100_MovieFileType                     = _"MooV"_MediaHandlerType                  = _"mhlr"_DataHandlerType                   = _"dhlr"_VideoMediaType                    = _"vide"_SoundMediaType                    = _"soun"_TextMediaType                     = _"text"_BaseMediaType                     = _"gnrc"_MPEGMediaType                     = _"MPEG"_MusicMediaType                    = _"musi"_TimeCodeMediaType                 = _"tmcd"_SpriteMediaType                   = _"sprt"_HandleDataHandlerSubType          = _"hndl"_VisualMediaCharacteristic         = _"eyes"_AudioMediaCharacteristic          = _"ears"_DoTheRightThing                   = 0'---------------------------------'_dfDontDisplay                     = &000001_dfDontAutoScale                   = &000002_dfClipToTextBox                   = &000004_dfUseMovieBGColor                 = &000008_dfShrinkTextBoxToFit              = &000010_dfScrollIn                        = &000020_dfScrollOut                       = &000040_dfHorizScroll                     = &000080_dfReverseScroll                   = &000100_dfContinuousScroll                = &000200_dfFlowHoriz                       = &000400_dfDropShadow                      = &001000_dfAntiAlias                       = &002000_dfKeyedText                       = &004000_dfInverseHilite                   = &008000_searchTextDontGoToFoundTime       = &010000_searchTextDontHiliteFoundText     = &020000_searchTextOneTrackOnly            = &040000_searchTextEnabledTracksOnly       = &080000'---------------------------------'_mcActionIdle                      = 1_mcActionDraw                      = 2_mcActionActivate                  = 3_mcActionDeactivate                = 4_mcActionMouseDown                 = 5_mcActionKey                       = 6_mcActionPlay                      = 8_mcActionGoToTime                  = 12_mcActionSetVolume                 = 14_mcActionGetVolume                 = 15_mcActionStep                      = 18_mcActionSetLooping                = 21_mcActionGetLooping                = 22_mcActionSetLoopIsPalindrome       = 23_mcActionGetLoopIsPalindrome       = 24_mcActionSetGrowBoxBounds          = 25_mcActionControllerSizeChanged     = 26_mcActionSetSelectionBegin         = 29_mcActionSetSelectionDuration      = 30_mcActionSetKeysEnabled            = 32_mcActionGetKeysEnabled            = 33_mcActionSetPlaySelection          = 34_mcActionGetPlaySelection          = 35_mcActionSetUseBadge               = 36_mcActionGetUseBadge               = 37_mcActionSetFlags                  = 38_mcActionGetFlags                  = 39_mcActionSetPlayEveryFrame         = 40_mcActionGetPlayEveryFrame         = 41_mcActionGetPlayRate               = 42_mcActionShowBalloon               = 43_mcActionBadgeClick                = 44_mcActionMovieClick                = 45_mcActionSuspend                   = 46_mcActionResume                    = 47_mcActionSetControllerKeysEnabled  = 48_mcActionGetTimeSliderRect         = 49_mcActionMovieEdited               = 50_mcActionGetDragEnabled            = 51_mcActionSetDragEnabled            = 52_mcActionGetSelectionBegin         = 53_mcActionGetSelectionDuration      = 54_mcActionPrerollAndPlay            = 55_mcActionGetCursorSettingEnabled   = 56_mcActionSetCursorSettingEnabled   = 57'---------------------------------''---------------------------------''---------------------------------'_mcFlagSuppressMovieFrame          = &01_mcFlagSuppressStepButtons         = &02_mcFlagSuppressSpeakerButton       = &04_mcFlagsUseWindowPalette           = &08_mcFlagsDontInvalidate             = &10_mcPositionDontInvalidate          = &20'---------------------------------''---------------------------------'_mcInfoUndoAvailable               = &0001_mcInfoCutAvailable                = &0002_mcInfoCopyAvailable               = &0004_mcInfoPasteAvailable              = &0008_mcInfoClearAvailable              = &0010_mcInfoHasSound                    = &0020_mcInfoIsPlaying                   = &0040_mcInfoIsLooping                   = &0080_mcInfoIsInPalindrome              = &0100_mcInfoEditingEnabled              = &0200_mcInfoMovieIsInteractive          = &0400_mcMenuUndo                        = 1_mcMenuCut                         = 3_mcMenuCopy                        = 4_mcMenuPaste                       = 5_mcMenuClear                       = 6'---------------------------------'_kMCSetMovieSelect                 = 0x2_kMCGetIndMovieSelect              = 0x5_kMCGetMovieExtendedSelect         = 0x5_kMCRemoveMovieSelect              = 0x6_kMCIsPlayerEventSelect            = 0x7_kMCSetActionFilterSelect          = 0x8_kMCDoActionSelect                 = 0x9_kMCSetControllerAttachedSelect    = 0xA_kMCIsControllerAttachedSelect     = 0xB_kMCSetControllerPortSelect        = 0xC_kMCGetControllerPortSelect        = 0xD_kMCSetVisibleSelect               = 0xE_kMCGetVisibleSelect               = 0xF_kMCGetControllerBoundsRectSelect  = 0x10_kMCSetControllerBoundsRectSelect  = 0x11_kMCGetControllerBoundsRgnSelect   = 0x12_kMCGetWindowRgnSelect             = 0x13_kMCMovieChangedSelect             = 0x14_kMCSetDurationSelect              = 0x15_kMCGetCurrentTimeSelect           = 0x16_kMCNewAttachedControllerSelect    = 0x17_kMCDrawSelect                     = 0x18_kMCActivateSelect                 = 0x19_kMCIdleSelect                     = 0x1A_kMCKeySelect                      = 0x1B_kMCClickSelect                    = 0x1C_kMCEnableEditingSelect            = 0x1D_kMCIsEditingEnabledSelect         = 0x1E_kMCCopySelect                     = 0x1F_kMCCutSelect                      = 0x20_kMCPasteSelect                    = 0x21_kMCClearSelect                    = 0x22_kMCUndoSelect                     = 0x23_kMCPositionControllerSelect       = 0x24_kMCGetControllerInfoSelect        = 0x25_kMCSetClipSelect                  = 0x28_kMCGetClipSelect                  = 0x29_kMCDrawBadgeSelect                = 0x2A_kMCSetUpEditMenuSelect            = 0x2B_kMCGetMenuStringSelect            = 0x2C_kMCSetActionFilterWithRefConSelect= 0x2D_kMCPtInControllerSelect           = 0x2E'---------------------------------'_keepInRam                         = 0x01_unkeepInRam                       = 0x02_flushFromRam                      = 0x04_loadForwardTrackEdits             = 0x08_loadBackwardTrackEdits            = 0x10_newMovieActive                    = 0x01_newMovieDontResolveDataRefs       = 0x02_newMovieDontAskUnresolvedDataRefs = 0x04_newMovieDontAutoAlternates        = 0x08_trackUsageInMovie                 = 0x02_trackUsageInPreview               = 0x04_trackUsageInPoster                = 0x08_mediaSampleNotSync                = 0x01_mediaSampleShadowSync             = 0x02_pasteInParallel                   = 1_showUserSettingsDialog            = 2_movieToFileOnlyExport             = 4_movieFileSpecValid                = 8_nextTimeMediaSample               = 0x0001_nextTimeMediaEdit                 = 0x0002_nextTimeTrackEdit                 = 0x0004_nextTimeSyncSample                = 0x0008_nextTimeStep                      = 0x0010_nextTimeEdgeOK                    = 0x4000_nextTimeIgnoreActiveSegment       = 0x8000'---------------------------------'///_createMovieFileDeleteCurFile      = &80000000///_createMovieFileDontCreateMovie    = &40000000///_createMovieFileDontOpenFile       = &20000000'---------------------------------'_flattenAddMovieToDataFork         = &01_flattenActiveTracksOnly           = &04_flattenDontInterleaveFlatten      = &08_flattenFSSpecPtrIsDataRefRecordPtr= &10'---------------------------------'_movieInDataForkResID              = -1_mcTopLeftMovie                    = &01_mcScaleMovieToFit                 = &02_mcWithBadge                       = &04_mcNotVisible                      = &08_mcWithFrame                       = &10_movieScrapDontZeroScrap           = &01_movieScrapOnlyPutMovie            = &02_dataRefSelfReference              = &01_dataRefWasNotResolved             = &02'---------------------------------''_SeqGrabComponentType           = _"barg"_SeqGrabChannelType             = _"sgch"_SeqGrabPanelType               = _"sgpn"_SeqGrabCompressionPanelType    = _"comp"_SeqGrabSourcePanelType         = _"sour"_seqGrabToDisk                  = 1_seqGrabToMemory                = 2_seqGrabUseTempMemory           = 4_seqGrabAppendToFile            = 8_seqGrabDontAddMovieResource    = &10_seqGrabDontMakeMovie           = &20_seqGrabPreExtendFile           = &40_seqGrabRecord                  = 1_seqGrabPreview                 = 2_seqGrabPlayDuringRecord        = 4_seqGrabHasBounds               = 1_seqGrabHasVolume               = 2_seqGrabHasDiscreteSamples      = 4_grabPictOffScreen              = 1_grabPictIgnoreClip             = 2_sgFlagControlledGrab           = 1'_seqGrabUnpause                 = 0_seqGrabPause                   = 1_seqGrabPauseForMenu            = 3''_codecMinQuality                = 0x000'minimum  quality reproduction_codecLowQuality                = 0x100'low      quality reproduction_codecNormalQuality             = 0x200'normal   quality reproduction_codecHighQuality               = 0x300'high     quality reproduction_codecMaxQuality                = 0x3FF'maximum  quality reproduction_codecLosslessQuality           = 0x400'lossless quality reproduction'_anyCodec                       = 0 'first         component of specified type_bestSpeedCodec                 =-1 'fastest       component of specified type_bestFidelityCodec              =-2 'most accurate component of specified type_bestCompressionCodec           =-3 'component with smallest resulting DATA'Modified { 5/22/00 } A.G.begin enum_createMovieFileDeleteCurFile     = 1 << 31_createMovieFileDontCreateMovie   = 1 << 30_createMovieFileDontOpenFile      = 1 << 29_createMovieFileDontCreateResFile = 1 << 28end enum// ImageCodec.htoolbox fn ImageCodecGetMaxCompressionSize(ComponentInstance ci,PixMapHandle src,const Rect *srcRect,short depth,CodecQ quality,long *size) = ComponentResult// ImageCompression.htoolbox fn CompressImage(PixMapHandle src,const Rect *srcRect,CodecQ quality,CodecType codecType,Handle descHandle,Ptr dataPtr) = OSErr// Movies.htoolbox fn AddMovieResource(Movie theMovie,short resRefNum,short *resId,ConstStr255Param resName) = OSErrtoolbox fn CreateMovieFile(const FSSpec *fileSpec,OSType creator,ScriptCode scriptTag,long createMovieFileFlags,short *resRefNum,Movie *newmovie) = OSErr// ImageCompression.h#if ndef _DEFINEDINCARBON#define CompressorComponent as Component#define CodecComponent as Component#define GraphicsExportComponent as ComponentInstance#endif// ndef _DEFINEDINCARBONtoolbox fn GetMaxCompressionSize(PixMapHandle src,const Rect *srcRect,short colorDepth,CodecQ quality,CodecType cType,CompressorComponent codec,long *size) = OSErrtoolbox fn GetCodecNameList(Ptr *list,short showAll) = OSErrtoolbox fn GetCodecInfo(Ptr *info, CodecType cType, CodecComponent codec) = OSErrtoolbox fn GraphicsExportSetInputGraphicsImporter( GraphicsExportComponent ci, GraphicsExportComponent grip) = ComponentResult// QuickTimeComponents.h_kQTFileTypePicture   = _"PICT"_kQTFileTypeGIF       = _"GIFf"_kQTFileTypeJPEG      = _"JPEG"_kQTFileTypeTIFF      = _"TIFF"_kQTFileTypeBMP       = _"BMPf"_kQTFileTypeMacPaint  = _"PNTG"_kQTFileTypePhotoShop = _"8BPS"_kJPEGCodecType     = _"jpeg"'Date { 10/21/02 }_kGIFCodecType      = _"gif "_kBMPCodecType      = _"WRLE"_kMacPaintCodecType = _"PNTG"_kTIFFCodecType     = _"tiff"_kPlanarRGBCodecType= _"8BPS"_graphicsExporterComponentType = _"grex"_graphicsImporterComponentType = _"grip"// ImageCompression.htoolbox fn GraphicsExportSetOutputFileTypeAndCreator(GraphicsExportComponent ci,OSType fileType,OSType fileCreator) = ComponentResulttoolbox fn GraphicsExportGetDefaultFileTypeAndCreator(GraphicsExportComponent ci,OSType *fileType,OSType *fileCreator) = ComponentResulttoolbox fn GraphicsExportGetDefaultFileNameExtension(GraphicsExportComponent ci,OSType *fileNameExtension) = ComponentResulttoolbox fn GraphicsExportSetResolution(GraphicsExportComponent ci,Fixed  HorzRes, Fixed  VertRes) = ComponentResulttoolbox fn GraphicsExportGetResolution(GraphicsExportComponent ci,Fixed *HorzRes, Fixed *VertRes) = ComponentResulttoolbox fn GraphicsExportSetInputPicture( GraphicsExportComponent ci, PicHandle picture)          = ComponentResulttoolbox fn GraphicsExportSetInputGWorld( GraphicsExportComponent ci, Ptr gworld)                 = ComponentResulttoolbox fn GraphicsExportSetInputPixmap( GraphicsExportComponent ci, PixMapHandle pixmap)         = ComponentResulttoolbox fn GraphicsExportSetOutputFile(GraphicsExportComponent ci,const FSSpec * theFile)         = ComponentResulttoolbox fn GraphicsExportSetCompressionQuality( GraphicsExportComponent ci, CodecQ spatialQuality)  = ComponentResulttoolbox fn GraphicsExportDoExport( GraphicsExportComponent ci, unsigned long * actualSizeWritten) = ComponentResult// Components.htoolbox fn OpenADefaultComponent( OSType componentType, OSType componentSubType, ComponentInstance * ci) = OSErr#endif