/*  Util_Dictionary.incl  Bernie Wylde 20170423  1.0.1*/BeginCDeclarationCFMutableDictionaryRef DictionaryWithCapacity( UInt32 numItems );CFDictionaryRef DictionaryWithContentsOfURL( CFURLRef url );CFDictionaryRef DictionaryWithObject( CFTypeRef obj, CFStringRef key );CFDictionaryRef DictionaryWithObjects( CFTypeRef obj, ... );Boolean DictionaryWriteToURL( CFDictionaryRef dict, CFURLRef url, Boolean atomically );EndCBeginCFunctionCFMutableDictionaryRef DictionaryWithCapacity( UInt32 numItems ){ return (CFMutableDictionaryRef)[NSMutableDictionary dictionaryWithCapacity:numItems]; }CFDictionaryRef DictionaryWithContentsOfURL( CFURLRef url ){ return (CFDictionaryRef)[NSDictionary dictionaryWithContentsOfURL:(NSURL *)url]; }CFDictionaryRef DictionaryWithObject( CFTypeRef obj, CFStringRef key ){ return (CFDictionaryRef)[NSDictionary dictionaryWithObject:(id)obj forKey:(NSString *)key]; }CFDictionaryRef DictionaryWithObjects( CFTypeRef obj, ... ){     va_list ap;     va_start( ap, obj );     NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithCapacity:0];     while ( obj ) {          NSString *key = va_arg( ap, id );          if ( key == NULL ) break;          [dict setObject:obj forKey:key];          obj = va_arg( ap, id );     }     va_end( ap );     return (CFDictionaryRef)dict;}Boolean DictionaryWriteToURL( CFDictionaryRef dict, CFURLRef url, Boolean atomically ){ return [(NSDictionary *)dict writeToURL:(NSURL *)url atomically:atomically]; }EndC/*  DictionaryWithCapacity( numItems )  Creates and returns an autoreleased mutable dictionary, initially giving it enough allocated memory to hold a given number of entries  Params:    numItems - The initial capacity of the new dictionary  Return value: A new mutable dictionary with enough allocated memory to hold numItems entries*/toolbox fn DictionaryWithCapacity( UInt32 numItems ) = CFMutableDictionaryRef/*  DictionaryWithContentsOfURL( url )  Creates and returns an autoreleased dictionary using the keys and values found in a resource specified by a given URL  Params:    url - An URL that identifies a resource containing a string representation of a property list whose root object is a dictionary  Return value: A new dictionary that contains the dictionary at url, or nil if there is an error or if the contents of the resource are an invalid representation of a dictionary*/toolbox fn DictionaryWithContentsOfURL( CFURLRef url ) = CFDictionaryRef/*  DictionaryWithObject( obj, key )  Creates and returns an autoreleased dictionary containing a given key and value  Params:    obj - The value corresponding to aKey. If this value is NULL, an NSInvalidArgumentException is raised    key - The key for obj. If this value is NULL, an NSInvalidArgumentException is raised  Return value: An autoreleased dictionary containing the objects and keys in the argument list*/toolbox fn DictionaryWithObject( CFTypeRef obj, CFStringRef key ) = CFDictionaryRef/*  DictionaryWithObjects( obj, ... )  Creates and returns an autoreleased dictionary containing entries constructed from the specified set of values and keys  Params:    obj - The first value to add to the new dictionary    ... - First the key for obj, then a null-terminated list of alternating values and keys. If any key is NULL, an NSInvalidArgumentException is raised  Return value: A new dictionary containing a single object, obj, for a single key, key*/toolbox fn DictionaryWithObjects( CFTypeRef obj, ... ) = CFDictionaryRef/*  DictionaryWriteToURL( dict, url, atomically )  Writes a property list representation of the contents of the dictionary to a given URL  Params:    dict       - A dictionary    url        - The URL to which to write the dictionary    atomically - A flag that specifies whether the output should be written atomically.                 If flag is true, the dictionary is written to an auxiliary location, and then the auxiliary location is renamed to url.                 If flag is false, the dictionary is written directly to url.                 The true option guarantees that url, if it exists at all, won’t be corrupted even if the system should crash during writing.                 atomically is ignored if url is of a type that cannot be written atomically  Return value: true if the location is written successfully, otherwise false*/toolbox fn DictionaryWriteToURL( CFDictionaryRef dict, CFURLRef url, Boolean atomically ) = Boolean