/*   Util_Toolbar.incl   Bernie Wylde    October 2008   20090730  bw: replace dynamic array with dict. toolbarIDs can now be any value in the range: 0 - 4294967295   20110824  bw: fix 'discards qualifiers...' warnings for FutureBasic_5_6_1b12   User functions:   ToolbarCreate   ToolbarAttachToWindow   ToolbarRelease   ToolbarGetAttributes   ToolbarChangeAttributes   ToolbarGetDisplayMode   ToolbarSetDisplayMode   ToolbarGetDisplaySize   ToolbarSetDisplaySize   ToolbarCopyIdentifier   ToolbarSetSelectionHighlight   ToolbarSelectItemByIdentifierInWindow   ToolbarSelectItemByIndexInWindow   ToolbarItemSet   ToolbarItemSetAllowed   ToolbarItemSetDefault   ToolbarItemSetAttributes   ToolbarItemSetCommandID   ToolbarItemSetIconRef   ToolbarItemSetImage   ToolbarItemSetLabel   ToolbarItemSetMenu   ToolbarItemSetEnabled   ToolbarItemSetHelp   ToolbarCustomItem*/include "Tlbx HIView.incl"include "Tlbx ControlDefinitions.incl"include "Tlbx CoreGraphics.incl"'~data/*   ToolbarGetIDDict [private]*/local fn ToolbarIDDict( clr as Boolean ) as CFMutableDictionaryRef'~'1begin globalsdim as CFMutableDictionaryRef   sToolbarIDDictend globalslong if ( clr )if ( sToolbarIDDict != 0 ) then CFRelease( sToolbarIDDict )sToolbarIDDict = 0xelseif ( sToolbarIDDict == 0 ) then sToolbarIDDict = fn CFDictionaryCreateMutable( _kCFAllocatorDefault, 0, @kCFCopyStringDictionaryKeyCallBacks, @kCFTypeDictionaryValueCallBacks )end ifend fn = sToolbarIDDict/*   ToolbarIDRemove [private]   called from ToolbarRelease*/local fn ToolbarIDRemove( toolbarID as CFIndex )'~'1dim as CFMutableDictionaryRef   toolbarIDDictdim as CFStringRef              keytoolbarIDDict = fn ToolbarIDDict( _false )long if ( toolbarIDDict )key = fn CFStringCreateWithFormat( _kCFAllocatorDefault, #0, @"%ld", toolbarID )long if ( key )CFDictionaryRemoveValue( toolbarIDDict, key )CFRelease( key )end iflong if ( fn CFDictionaryGetCount( toolbarIDDict ) == 0 )fn ToolbarIDDict( _true )end ifend ifend fn/*   ToolbarGetDataDict [private]*/local fn ToolbarGetDataDict( toolbarID as CFIndex ) as CFMutableDictionaryRef'~'1dim as CFStringRef              keydim as CFMutableDictionaryRef   toolbarIDDict, dict : dict = 0toolbarIDDict = fn ToolbarIDDict( _false )long if ( toolbarIDDict )key = fn CFStringCreateWithFormat( _kCFAllocatorDefault, #0, @"%ld", toolbarID )long if ( key )dict = (CFMutableDictionaryRef)fn CFDictionaryGetValue( toolbarIDDict, key )long if ( dict == 0 )dict = fn CFDictionaryCreateMutable( _kCFAllocatorDefault, 0, @kCFCopyStringDictionaryKeyCallBacks, @kCFTypeDictionaryValueCallBacks )CFDictionarySetValue( toolbarIDDict, key, dict )CFRelease( dict )end ifCFRelease( key )end ifend ifend fn = dict/*   ToolbarGetRef [private]*/local fn ToolbarGetRef( toolbarID as CFIndex ) as HIToolbarRef'~'1dim as HIToolbarRef             tb : tb = NULLdim as CFMutableDictionaryRef   dictdim as CFNumberRef              numberdict = fn ToolbarGetDataDict( toolbarID )long if ( dict )number = fn CFDictionaryGetValue( dict, @"ToolbarRef" )long if ( number )fn CFNumberGetValue( number, _kCFNumberSInt32Type, @tb )end ifend ifend fn = tb/*   ToolbarSetRef [private]*/local fn ToolbarSetRef( toolbarID as CFIndex, tb as HIToolbarRef )'~'1dim as CFMutableDictionaryRef   dictdim as CFNumberRef              numberdict = fn ToolbarGetDataDict( toolbarID )long if ( dict )number = fn CFNumberCreate( _kCFAllocatorDefault, _kCFNumberSInt32Type, @tb )long if ( number )CFDictionarySetValue( dict, @"ToolbarRef", number )CFRelease( number )end ifend ifend fn'~-'~items'~   ¥ allowed/default identifiers/*   ToolbarGetAllowedIdentifiers [private]   called from ToolbarDelegate*/local fn ToolbarGetAllowedIdentifiers( toolbarID as CFIndex ) as CFMutableArrayRef'~'1dim as CFMutableDictionaryRef   dictdim as CFMutableArrayRef        array : array = 0dict = fn ToolbarGetDataDict( toolbarID )long if ( dict )array = (CFMutableArrayRef)fn CFDictionaryGetValue( dict, @"AllowedIdentifiers" )end ifend fn = array/*   ToolbarItemSetAllowed*/local fn ToolbarItemSetAllowed( toolbarID as CFIndex, identifier as CFStringRef )'~'1dim as CFMutableDictionaryRef   dictdim as CFMutableArrayRef        arraydict = fn ToolbarGetDataDict( toolbarID )long if ( dict )array = (CFMutableArrayRef)fn CFDictionaryGetValue( dict, @"AllowedIdentifiers" )long if ( array == 0 )array = fn CFArrayCreateMutable( _kCFAllocatorDefault, 0, @kCFTypeArrayCallBacks )long if ( array )CFDictionarySetValue( dict, @"AllowedIdentifiers", array )CFRelease( array )end ifend iflong if ( array )long if ( fn CFArrayContainsValue( array, fn CFRangeMake( 0, fn CFArrayGetCount( array ) ), identifier ) == _false )CFArrayAppendValue( array, identifier )end ifend ifend ifend fn/*   ToolbarGetDefaultIdentifiers [private]   called from ToolbarDelegate*/local fn ToolbarGetDefaultIdentifiers( toolbarID as CFIndex ) as CFMutableArrayRef'~'1dim as CFMutableDictionaryRef   dictdim as CFMutableArrayRef        array : array = 0dict = fn ToolbarGetDataDict( toolbarID )long if ( dict )array = (CFMutableArrayRef)fn CFDictionaryGetValue( dict, @"DefaultIdentifiers" )end ifend fn = array/*   ToolbarItemSetDefault*/local fn ToolbarItemSetDefault( toolbarID as CFIndex, identifier as CFStringRef )'~'1dim as CFMutableDictionaryRef   dictdim as CFMutableArrayRef        arraydict = fn ToolbarGetDataDict( toolbarID )long if ( dict )array = (CFMutableArrayRef)fn CFDictionaryGetValue( dict, @"DefaultIdentifiers" )long if ( array == 0 )array = fn CFArrayCreateMutable( _kCFAllocatorDefault, 0, @kCFTypeArrayCallBacks )long if ( array )CFDictionarySetValue( dict, @"DefaultIdentifiers", array )CFRelease( array )end ifend iflong if ( array )long if ( fn CFArrayContainsValue( array, fn CFRangeMake( 0, fn CFArrayGetCount( array ) ), identifier ) == _false )CFArrayAppendValue( array, identifier )end ifend ifend iffn ToolbarItemSetAllowed( toolbarID, identifier )end fn'~   ¥ settings/*   ToolbarGetItemsDict [private]*/local fn ToolbarGetItemsDict( toolbarID as CFIndex ) as CFMutableDictionaryRef'~'1dim as CFMutableDictionaryRef   dataDict, itemsDict : itemsDict = 0dataDict = fn ToolbarGetDataDict( toolbarID )long if ( dataDict )itemsDict = (CFMutableDictionaryRef)fn CFDictionaryGetValue( dataDict, @"Items" )long if ( itemsDict == 0 )itemsDict = (CFMutableDictionaryRef)fn CFDictionaryCreateMutable( _kCFAllocatorDefault, 0, @kCFCopyStringDictionaryKeyCallBacks, @kCFTypeDictionaryValueCallBacks )long if ( itemsDict )CFDictionarySetValue( dataDict, @"Items", itemsDict )CFRelease( itemsDict )end ifend ifend ifend fn = itemsDict/*   ToolbarGetItemDataDict [private]*/local fn ToolbarGetItemDataDict( toolbarID as CFIndex, identifier as CFStringRef ) as CFMutableDictionaryRef'~'1dim as CFMutableDictionaryRef   itemsDict, itemDataDict : itemDataDict = 0itemsDict = fn ToolbarGetItemsDict( toolbarID )long if ( itemsDict )itemDataDict = (CFMutableDictionaryRef)fn CFDictionaryGetValue( itemsDict, identifier )long if ( itemDataDict == 0 )itemDataDict = (CFMutableDictionaryRef)fn CFDictionaryCreateMutable( _kCFAllocatorDefault, 0, @kCFCopyStringDictionaryKeyCallBacks, @kCFTypeDictionaryValueCallBacks )long if ( itemDataDict )CFDictionarySetValue( itemsDict, identifier, itemDataDict )CFRelease( itemDataDict )end ifend ifend ifend fn = itemDataDict/*   ToolbarGetItemDataValue [private]*/local fn ToolbarGetItemDataValue( toolbarID as CFIndex, identifier as CFStringRef, key as CFStringRef, value as ^CFTypeRef )'~'1dim as CFMutableDictionaryRef   dictdim as CFTypeRef                vdim as Boolean                  result : result = _falsedict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )v = fn CFDictionaryGetValue( dict, key )long if ( v )value.nil& = vresult = _zTrueend ifend ifend fn = result/*   ToolbarItemExists [private]   called from ToolbarDelegate*/local fn ToolbarItemExists( toolbarID as CFIndex, identifier as CFStringRef )'~'1dim as CFMutableDictionaryRef   itemsDictdim as Boolean                  exists : exists = _falseitemsDict = fn ToolbarGetItemsDict( toolbarID )long if ( itemsDict )exists = fn CFDictionaryContainsKey( itemsDict, identifier )end ifend fn = exists'~   ¥ attributes/*   ToolbarItemGetAttributes [private]   called from ToolbarDelegate*/local fn ToolbarItemGetAttributes( toolbarID as CFIndex, identifier as CFStringRef, attributes as ^OptionBits )'~'1dim as CFTypeRef   valuedim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"Attributes", @value )long if ( result )result = fn CFNumberGetValue( value, _kCFNumberSInt32Type, #attributes )end ifend fn = result/*   ToolbarItemSetAttributes*/local fn ToolbarItemSetAttributes( toolbarID as CFIndex, identifier as CFStringRef, attributes as UInt32 )'~'1dim as CFMutableDictionaryRef   dictdim as CFNumberRef              numberdict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )number = fn CFNumberCreate( _kCFAllocatorDefault, _kCFNumberSInt32Type, @attributes )long if ( number )CFDictionarySetValue( dict, @"Attributes", number )CFRelease( number )end ifend ifend fn'~   ¥ commandID/*   ToolbarItemGetCommandID [private]   called from ToolbarDelegate*/local fn ToolbarItemGetCommandID( toolbarID as CFIndex, identifier as CFStringRef, commandID as ^MenuCommand )'~'1dim as CFTypeRef   valuedim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"CommandID", @value )long if ( result )result = fn CFNumberGetValue( value, _kCFNumberSInt32Type, #commandID )end ifend fn = result/*   ToolbarItemSetCommandID*/local fn ToolbarItemSetCommandID( toolbarID as CFIndex, identifier as CFStringRef, commandID as MenuCommand )'~'1dim as CFMutableDictionaryRef   dictdim as CFNumberRef              numberdict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )number = fn CFNumberCreate( _kCFAllocatorDefault, _kCFNumberSInt32Type, @commandID )long if ( number )CFDictionarySetValue( dict, @"CommandID", number )CFRelease( number )end ifend ifend fn'~   ¥ icon ref/*   ToolbarItemGetIconRef [private]   called from ToolbarDelegate*/local fn ToolbarItemGetIconRef( toolbarID as CFIndex, identifier as CFStringRef, icon as ^IconRef )'~'1dim as CFTypeRef   valuedim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"IconRef", @value )long if ( result )result = fn CFNumberGetValue( value, _kCFNumberSInt32Type, #icon )end ifend fn = result/*   ToolbarItemSetIconRef*/local fn ToolbarItemSetIconRef( toolbarID as CFIndex, identifier as CFStringRef, iconRef as IconRef )'~'1dim as CFMutableDictionaryRef   dictdim as CFNumberRef              numberdict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )number = fn CFNumberCreate( _kCFAllocatorDefault, _kCFNumberSInt32Type, @iconRef )long if ( number )CFDictionarySetValue( dict, @"IconRef", number )CFRelease( number )end ifend ifend fn'~   ¥ image/*   CreateCGImageFromBundleResource [private]   called from ToolbarItemSetImageFromBundleResource*/local fn ToolbarCreateCGImageFromBundleResource( fileName as CFStringRef ) as CGImageRef'~'1dim as CFURLRef            urldim as CGDataProviderRef   providerdim as CGImageRef          image : image = 0url = fn CFBundleCopyResourceURL( fn CFBundleGetMainBundle(), fileName, 0, 0 )long if ( url )provider = fn CGDataProviderCreateWithURL( url )long if ( provider )// quick, and very dirty, determination of image typeselectcase fn CFStringHasSuffix( fileName, @".jpg" )image = fn CGImageCreateWithJPEGDataProvider( provider, 0, _false, _kCGRenderingIntentDefault )case fn CFStringHasSuffix( fileName, @".png" )image = fn CGImageCreateWithPNGDataProvider( provider, 0, _false, _kCGRenderingIntentDefault )end selectfn CGDataProviderRelease( provider )end ifCFRelease( url )end ifend fn = image/*   ToolbarItemGetImage [private]   called from ToolbarDelegate*/local fn ToolbarItemGetImage( toolbarID as CFIndex, identifier as CFStringRef, image as ^CGImageRef )'~'1dim as CFTypeRef   valuedim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"Image", @value )if ( result ) then image.nil& = valueend fn = result/*   ToolbarItemSetImage*/local fn ToolbarItemSetImage( toolbarID as CFIndex, identifier as CFStringRef, image as CGImageRef )'~'1dim as CFMutableDictionaryRef   dictdict = fn ToolbarGetItemDataDict( toolbarID, identifier )if ( dict ) then CFDictionarySetValue( dict, @"Image", image )end fn/*   ToolbarItemSetImageFromBundleResource*/local fn ToolbarItemSetImageFromBundleResource( toolbarID as CFIndex, identifier as CFStringRef, imageName as CFStringRef )'~'1dim as CGImageRef   imageimage = fn ToolbarCreateCGImageFromBundleResource( imageName )long if ( image )fn ToolbarItemSetImage( toolbarID, identifier, image )CFRelease( image )end ifend fn'~   ¥ label/*   ToolbarItemGetLabel [private]   called from ToolbarDelegate*/local fn ToolbarItemGetLabel( toolbarID as CFIndex, identifier as CFStringRef, lbl as ^CFStringRef )'~'1dim as CFTypeRef   valuedim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"Label", @value )if ( result ) then lbl.nil& = valueend fn = result/*   ToolbarItemSetLabel*/local fn ToolbarItemSetLabel( toolbarID as CFIndex, identifier as CFStringRef, lbl as CFStringRef )'~'1dim as CFMutableDictionaryRef   dictdict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )CFDictionarySetValue( dict, @"Label", lbl )end ifend fn'~   ¥ menu/*   ToolbarItemGetMenu [private]   called from ToolbarDelegate*/local fn ToolbarItemGetMenu( toolbarID as CFIndex, identifier as CFStringRef, @m as ^MenuRef )'~'1dim as CFTypeRef   valuedim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"Menu", @value )long if ( result )result = fn CFNumberGetValue( value, _kCFNumberSInt32Type, #m )end ifend fn = result/*   ToolbarItemSetMenu*/local fn ToolbarItemSetMenu( toolbarID as CFIndex, identifier as CFStringRef, m as MenuRef )'~'1dim as CFMutableDictionaryRef   dictdim as CFNumberRef              numberdict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )number = fn CFNumberCreate( _kCFAllocatorDefault, _kCFNumberSInt32Type, @m )long if ( number )CFDictionarySetValue( dict, @"Menu", number )CFRelease( number )end ifend ifend fn'~   ¥ enabled/*   ToolbarItemGetEnabled [private]   called from ToolbarDelegate*/local fn ToolbarItemGetEnabled( toolbarID as CFIndex, identifier as CFStringRef, enabled as ^Boolean )'~'1dim as CFTypeRef   valuedim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"Enabled", @value )long if ( result )enabled.nil` = ( value == kCFBooleanTrue )end ifend fn = result/*   ToolbarItemSetEnabled*/local fn ToolbarItemSetEnabled( toolbarID as CFIndex, identifier as CFStringRef, enabled as Boolean )'~'1dim as CFMutableDictionaryRef   dictdict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )long if ( enabled )CFDictionarySetValue( dict, @"Enabled", kCFBooleanTrue )xelseCFDictionarySetValue( dict, @"Enabled", kCFBooleanFalse )end ifend ifend fn'~   ¥ help/*   ToolbarItemGetHelp [private]   called from ToolbarDelegate*/local fn ToolbarItemGetHelp( toolbarID as CFIndex, identifier as CFStringRef, helpText as ^CFStringRef )'~'1dim as CFTypeRef   valuedim as Boolean     resulthelpText.nil& = 0result = fn ToolbarGetItemDataValue( toolbarID, identifier, @"ShortHelp", @value )if ( result ) then helpText.nil& = valueend fn = ( helpText.nil& != 0 )/*   ToolbarItemSetHelp*/local fn ToolbarItemSetHelp( toolbarID as CFIndex, identifier as CFStringRef, helpText as CFStringRef )'~'1dim as CFMutableDictionaryRef   dictdict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )if ( helpText ) then CFDictionarySetValue( dict, @"ShortHelp", helpText )end ifend fn'~   ¥ all-in-one/*   ToolbarItem   popular settings in one call*/local fn ToolbarItemSet( toolbarID as CFIndex, identifier as CFStringRef, imageName as CFStringRef, lbl as CFStringRef, commandID as UInt32, attributes as OptionBits, default as Boolean )'~'1if ( imageName ) then fn ToolbarItemSetImageFromBundleResource( toolbarID, identifier, imageName )if ( lbl ) then fn ToolbarItemSetLabel( toolbarID, identifier, lbl )if ( commandID ) then fn ToolbarItemSetCommandID( toolbarID, identifier, commandID )fn ToolbarItemSetAttributes( toolbarID, identifier, attributes )if ( default ) then fn ToolbarItemSetDefault( toolbarID, identifier )fn ToolbarItemSetAllowed( toolbarID, identifier )end fn'~-'~custom items/*  All this custom item handling code is going to change  {bw:20081220}*/begin record ToolbarCustomItemInfodim as HIToolbarItemRef   itemRefdim as CFIndex            toolbarIDdim as CFStringRef        identifierdim as pointer            userFndim as HIRect             minMaxSizeend record // temp storage for most recent toolbarID & identifierbegin globalsdim as CFIndex       sLastToolbarIDdim as CFStringRef   sLastIdentifierend globals'~   ¥ userFn/*   ToolbarCustomItemGetUserFn [private]   called from ToolbarCustomItemConstructHandler*/local fn ToolbarCustomItemGetUserFn( toolbarID as CFIndex, identifier as CFStringRef, userFn as pointer )'~'1dim as CFTypeRef   valuedim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"UserFn", @value )long if ( result )result = fn CFNumberGetValue( value, _kCFNumberSInt32Type, #userFn )end ifend fn = result/*   ToolbarCustomItemSetUserFn*/local fn ToolbarCustomItemSetUserFn( toolbarID as CFIndex, identifier as CFStringRef, userFn as pointer )'~'1dim as CFMutableDictionaryRef   dictdim as CFNumberRef              numberdict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )number = fn CFNumberCreate( _kCFAllocatorDefault, _kCFNumberSInt32Type, @userFn )long if ( number )CFDictionarySetValue( dict, @"UserFn", number )CFRelease( number )end ifend ifend fn'~   ¥ classID/*   ToolbarCustomItemGetClassID [private]   called from ToolbarDelegate*/local fn ToolbarCustomItemGetClassID( toolbarID as CFIndex, identifier as CFStringRef, classID as ^CFStringRef )'~'1dim as CFTypeRef   valuedim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"ClassID", @value )if ( result ) then classID.nil& = valueend fn = result/*   ToolbarCustomItemSetClassID*/local fn ToolbarCustomItemSetClassID( toolbarID as CFIndex, identifier as CFStringRef, classID as CFStringRef )'~'1dim as CFMutableDictionaryRef   dictdict = fn ToolbarGetItemDataDict( toolbarID, identifier )if ( dict ) then CFDictionarySetValue( dict, @"ClassID", classID )end fn'~   ¥ min/max size/*   ToolbarCustomItemGetMinMaxSize [private]   called from ToolbarCustomItemConstructHandler*/local fn ToolbarCustomItemGetMinMaxSize( toolbarID as CFIndex, identifier as CFStringRef, minMaxSize as pointer )'~'1dim as CFTypeRef   dataRefdim as Boolean     resultresult = fn ToolbarGetItemDataValue( toolbarID, identifier, @"MinMaxSize", @dataRef )long if ( result )CFDataGetBytes( dataRef, fn CFRangeMake( 0, sizeof( HIRect ) ), minMaxSize )result = _trueend ifend fn = result/*   ToolbarCustomItemSetMinMaxSize*/local fn ToolbarCustomItemSetMinMaxSize( toolbarID as CFIndex, identifier as CFStringRef, minMaxSize as pointer )'~'1dim as CFMutableDictionaryRef   dictdim as CFDataRef                dataRefdict = fn ToolbarGetItemDataDict( toolbarID, identifier )long if ( dict )dataRef = fn CFDataCreate( _kCFAllocatorDefault, minMaxSize, sizeof( HIRect ) )long if ( dataRef )CFDictionarySetValue( dict, @"MinMaxSize", dataRef )CFRelease( dataRef )end ifend ifend fn'~   ¥ registered/*   ToolbarCustomItemIsRegistered [private]   called from ToolbarCustomItemCreate*/local fn ToolbarCustomItemIsRegistered( toolbarID as CFIndex, identifier as CFStringRef )'~'1dim as CFTypeRef   valuedim as Boolean     reg : reg = _falselong if ( fn ToolbarGetItemDataValue( toolbarID, identifier, @"Registered", @value ) )reg = ( value == kCFBooleanTrue )end ifend fn = reg/*   ToolbarItemSetRegistered [private]   called from ToolbarCustomItemCreate*/local fn ToolbarCustomItemSetRegistered( toolbarID as CFIndex, identifier as CFStringRef )'~'1dim as CFMutableDictionaryRef   dictdict = fn ToolbarGetItemDataDict( toolbarID, identifier )if ( dict ) then CFDictionarySetValue( dict, @"Registered", kCFBooleanTrue )end fn'~   ¥ handlers/*   ToolbarCustomItemSizeConstraintHandler [private]   called from ToolbarCustomItemConstructHandler*/local fn ToolbarCustomItemSizeConstraintHandler( inCallRef as EventHandlerCallRef, inEvent as EventRef, userData as pointer )'~'1dim as ^ToolbarCustomItemInfo   info : info = userDatadim as OSStatus                 result : result = _eventNotHandledErrselect ( fn GetEventKind( inEvent ) )case _kEventControlGetSizeConstraintsfn SetEventParameter( inEvent, _kEventParamMinimumSize, _typeHISize, sizeof( HISize ), @info.minMaxSize.origin )fn SetEventParameter( inEvent, _kEventParamMaximumSize, _typeHISize, sizeof( HISize ), @info.minMaxSize.size )result = _noErrend selectend fn = result/*   ToolbarCustomItemConstructHandler [private]*/local fn ToolbarCustomItemConstructHandler( inCallRef as EventHandlerCallRef, inEvent as EventRef, userData as pointer )'~'1dim as ^ToolbarCustomItemInfo     info : info = userDatadim as ControlButtonContentInfo   cbcdim as EventTypeSpec              eventSpecdim as CFStringRef                lbl, helpTextdim as HIViewRef                  vwdim as CGImageRef                 imagedim as MenuCommand                commandIDdim as OSStatus                   result : result = _eventNotHandledErrselect ( fn GetEventClass( inEvent ) )case _kEventClassHIObjectselect ( fn GetEventKind( inEvent ) )case _kEventHIObjectConstructinfo = fn malloc( sizeof( ToolbarCustomItemInfo ) )long if ( info != 0 )info.toolbarID = sLastToolbarIDinfo.identifier = sLastIdentifierfn ToolbarCustomItemGetUserFn( info.toolbarID, info.identifier, @info.userFn )fn ToolbarCustomItemGetMinMaxSize( info.toolbarID, info.identifier, @info.minMaxSize )fn GetEventParameter( inEvent, _kEventParamHIObjectInstance, _typeHIObjectRef, 0, sizeof( HIObjectRef ), 0, @info.itemRef )fn SetEventParameter( inEvent, _kEventParamHIObjectInstance, _typeVoidPtr, sizeof( pointer ), @info )result = _noErrend ifcase _kEventHIObjectInitializeresult = fn CallNextEventHandler( inCallRef, inEvent )if ( result != _noErr ) then exit fnif ( fn ToolbarItemGetLabel( info.toolbarID, info.identifier, @lbl ) ) then fn HIToolbarItemSetLabel( info.itemRef, lbl )if ( fn ToolbarItemGetHelp( info.toolbarID, info.identifier, @helpText ) ) then fn HIToolbarItemSetHelpText( info.itemRef, helpText, 0 )result = _noErrcase _kEventHIObjectDestructfree( info )result = _noErrend select case _kEventClassToolbarItemselect ( fn GetEventKind( inEvent ) )case _kEventToolbarItemCreateCustomViewlong if ( info.userFn )def fn ToolbarCustomItemUserBuildFn using info.userFnvw = fn ToolbarCustomItemUserBuildFn()if ( fn ToolbarItemGetCommandID( info.toolbarID, info.identifier, @commandID ) ) then fn SetControlCommandID( vw, commandID )long if ( fn ToolbarItemGetImage( info.toolbarID, info.identifier, @image ) )cbc.contentType = _kHIViewContentCGImageRefcbc.u.imageRef = imagefn SetControlData( vw, _kControlEntireControl, _"cont", sizeof( cbc ), @cbc )end iffn SetEventParameter( inEvent, _kEventParamControlRef, _typeControlRef, sizeof( HIViewRef ), @vw )eventSpec.eventClass = _kEventClassControleventSpec.eventKind = _kEventControlGetSizeConstraintsfn InstallEventHandler( fn GetControlEventTarget( vw ), @fn ToolbarCustomItemSizeConstraintHandler, 1, @eventSpec, #info, 0 )result = _noErrend ifend select end selectend fn = result'~   ¥ create/*   ToolbarCustomItemCreate [private]   called from ToolbarDelegate*/local fn ToolbarCustomItemCreate( toolbarID as CFIndex, identifier as CFStringRef, classID as CFStringRef ) as HIToolbarItemRef'~'1dim as EventTypeSpec   ev( 3 )dim as EventRef        evntdim as HIObjectRef     itemRef : itemRef = 0dim as OptionBits      attributesev.eventClass( 0 ) = _kEventClassHIObject    : ev.eventKind( 0 ) = _kEventHIObjectConstructev.eventClass( 1 ) = _kEventClassHIObject    : ev.eventKind( 1 ) = _kEventHIObjectInitializeev.eventClass( 2 ) = _kEventClassHIObject    : ev.eventKind( 2 ) = _kEventHIObjectDestructev.eventClass( 3 ) = _kEventClassToolbarItem : ev.eventKind( 3 ) = _kEventToolbarItemCreateCustomViewlong if ( fn ToolbarCustomItemIsRegistered( toolbarID, identifier ) == _false )fn HIObjectRegisterSubclass( classID, kHIToolbarItemClassID, 0, @fn ToolbarCustomItemConstructHandler, 4, @ev( 0 ), #0, #0 )fn ToolbarCustomItemSetRegistered( toolbarID, identifier )end ifsLastToolbarID = toolbarIDsLastIdentifier = identifierlong if ( fn CreateEvent( _kCFAllocatorDefault, _kEventClassHIObject, _kEventHIObjectInitialize, fn GetCurrentEventTime(), 0, @evnt ) == _noErr )fn SetEventParameter( evnt, _kEventParamToolbarItemIdentifier, _typeCFStringRef, sizeof( CFStringRef ), @identifier )fn ToolbarItemGetAttributes( toolbarID, identifier, @attributes )fn SetEventParameter( evnt, _kEventParamAttributes, _typeUInt32, sizeof( UInt32 ), @attributes )fn HIObjectCreate( classID, evnt, @itemRef )ReleaseEvent( evnt )end ifend fn = itemRef/*   ToolbarCustomItem*/local fn ToolbarCustomItem( toolbarID as CFIndex, identifier as CFStringRef, classID as CFStringRef, userFn as pointer, minWidth as single, minHeight as single, maxWidth as single, maxHeight as single )'~'1dim as HIRect   minMaxminMax.origin.x = minWidthminMax.origin.y = minHeightminMax.size.width = maxWidthminMax.size.height = maxHeightfn ToolbarCustomItemSetClassID( toolbarID, identifier, classID )fn ToolbarCustomItemSetUserFn( toolbarID, identifier, userFn )fn ToolbarCustomItemSetMinMaxSize( toolbarID, identifier, @minMax )end fn'~-'~toolbar'~   ¥ selection/*   ToolbarGetSelectionHighlight [private]   called from ToolbarDelegate*/local fn ToolbarGetSelectionHighlight( toolbarID as CFIndex )'~'1dim as CFMutableDictionaryRef   dictdim as CFBooleanRef             valuedim as Boolean                  ok : ok = _falsedict = fn ToolbarGetDataDict( toolbarID )long if ( dict )value = fn CFDictionaryGetValue( dict, @"SelectionHighlight" )if ( value ) then ok = ( value == kCFBooleanTrue )end ifend fn = ok/*   ToolbarSetSelectionHighlight*/local fn ToolbarSetSelectionHighlight( toolbarID as CFIndex, set as Boolean )'~'1dim as CFMutableDictionaryRef   dictdict = fn ToolbarGetDataDict( toolbarID )long if ( dict )long if ( set )CFDictionarySetValue( dict, @"SelectionHighlight", kCFBooleanTrue )xelseCFDictionarySetValue( dict, @"SelectionHighlight", kCFBooleanFalse )end ifend ifend fn/*   ToolbarCopySelectedIdentifierInWindow*/local fn ToolbarCopySelectedIdentifierInWindow( w as WindowRef ) as CFStringRef'~'1dim as HIToolbarRef       tbdim as HIToolbarItemRef   itemdim as CFStringRef        identifier : identifier = 0long if ( fn GetWindowToolbar( w, @tb ) == _noErr )long if ( fn HIToolbarGetSelectedItemInWindow( tb, w, @item ) == _noErr )fn HIToolbarItemCopyIdentifier( item, @identifier )end ifend ifend fn = identifier/*    ToolbarSelectItemByIdentifierInWindow*/local fn ToolbarSelectItemByIdentifierInWindow( w as WindowRef, identifier as CFStringRef )'~'1dim as HIToolbarRef       tbdim as HIToolbarItemRef   itemdim as CFArrayRef         arraydim as CFStringRef        identdim as CFIndex            count, indexlong if ( fn GetWindowToolbar( w, @tb ) == _noErr )long if ( fn HIToolbarCopyItems( tb, @array ) == _noErr )count = fn CFArrayGetCount( array )long if ( count )for index = 0 to count - 1item = (HIToolbarItemRef)fn CFArrayGetValueAtIndex( array, index )long if ( item )long if ( fn HIToolbarItemCopyIdentifier( item, @ident ) == _noErr )long if ( fn CFStringCompare( ident, identifier, 0 ) == _kCFCompareEqualTo )fn HIToolbarItemChangeAttributesInWindow( item, w, _kHIToolbarItemSelected, 0, 0 )end ifCFRelease( ident )end ifend ifnext indexend ifCFRelease( array ) //  rp 20090825end ifend ifend fn/*   ToolbarSelectItemByIndexInWindow*/local fn ToolbarSelectItemByIndexInWindow( w as WindowRef, index as CFIndex )'~'1dim as HIToolbarRef       tbdim as HIToolbarItemRef   itemdim as CFArrayRef         arraydim as CFIndex            countlong if ( fn GetWindowToolbar( w, @tb ) == _noErr )long if ( fn HIToolbarCopyItems( tb, @array ) == _noErr )count = fn CFArrayGetCount( array )long if ( index >= 0 and index < count )item = (HIToolbarItemRef)fn CFArrayGetValueAtIndex( array, index )if ( item ) then fn HIToolbarItemChangeAttributesInWindow( item, w, _kHIToolbarItemSelected, 0, 0 )end ifCFRelease( array ) //  rp 20090826end ifend ifend fn'~   ¥ delegate/*   ToolbarDelegate [private]*/local fn ToolbarDelegate( inCallRef as EventHandlerCallRef, inEvent as EventRef, userData as pointer )'~'1dim as CFMutableArrayRef   array, defaultIdentifiers, allowedIdentifiersdim as HIToolbarItemRef    item : item = 0dim as CFStringRef         identifier, lbl, helpTextdim as CFTypeRef           refDatadim as MenuCommand         commandIDdim as OptionBits          attributesdim as IconRef             icondim as MenuRef             mdim as CFStringRef         classIDdim as pointer             imagedim as CFIndex             toolbarID : toolbarID = userDatadim as OSStatus            result : result = _eventNotHandledErrdim as Boolean             enabledselect ( fn GetEventClass( inEvent ) )case _kEventClassToolbarselect ( fn GetEventKind( inEvent ) )case _kEventToolbarGetDefaultIdentifiersfn GetEventParameter( inEvent, _kEventParamMutableArray, _typeCFMutableArrayRef, #0, sizeof( array ), #0, @array )defaultIdentifiers = fn ToolbarGetDefaultIdentifiers( toolbarID )long if ( defaultIdentifiers )CFArrayAppendArray( array, defaultIdentifiers, fn CFRangeMake( 0, fn CFArrayGetCount( defaultIdentifiers ) ) )end ifresult = _noErrcase _kEventToolbarGetAllowedIdentifiersfn GetEventParameter( inEvent, _kEventParamMutableArray, _typeCFMutableArrayRef, #0, sizeof( array ), #0, @array )allowedIdentifiers = fn ToolbarGetAllowedIdentifiers( toolbarID )long if ( allowedIdentifiers )CFArrayAppendArray( array, allowedIdentifiers, fn CFRangeMake( 0, fn CFArrayGetCount( allowedIdentifiers ) ) )end ifresult = _noErrcase _kEventToolbarGetSelectableIdentifierslong if ( fn ToolbarGetSelectionHighlight( toolbarID ) )fn GetEventParameter( inEvent, _kEventParamMutableArray, _typeCFMutableArrayRef, #0, sizeof( array ), #0, @array )allowedIdentifiers = fn ToolbarGetAllowedIdentifiers( toolbarID )long if ( allowedIdentifiers )CFArrayAppendArray( array, allowedIdentifiers, fn CFRangeMake( 0, fn CFArrayGetCount( allowedIdentifiers ) ) )end ifresult = _noErrend ifcase _kEventToolbarCreateItemWithIdentifierfn GetEventParameter( inEvent, _kEventParamToolbarItemIdentifier, _typeCFStringRef, #0, sizeof( identifier ), #0, @identifier )fn GetEventParameter( inEvent, _kEventParamToolbarItemConfigData, _typeCFTypeRef, #0, sizeof( refData ), #0, @refData )long if ( fn ToolbarItemExists( toolbarID, identifier ) )long if ( fn ToolbarCustomItemGetClassID( toolbarID, identifier, @classID ) )// custom itemitem = fn ToolbarCustomItemCreate( toolbarID, identifier, classID )xelse// normal itemif ( fn ToolbarItemGetAttributes( toolbarID, identifier, @attributes ) == _false ) then attributes = 0long if ( fn HIToolbarItemCreate( identifier, attributes, @item ) == _noErr )long if ( fn ToolbarItemGetCommandID( toolbarID, identifier, @commandID ) )fn HIToolbarItemSetCommandID( item, commandID )end iflong if ( fn ToolbarItemGetEnabled( toolbarID, identifier, @enabled ) )fn HIToolbarItemSetEnabled( item, enabled )end iflong if ( fn ToolbarItemGetIconRef( toolbarID, identifier, @icon ) )fn HIToolbarItemSetIconRef( item, icon )end iflong if ( fn ToolbarItemGetImage( toolbarID, identifier, (ptr)@image ) )fn HIToolbarItemSetImage( item, image )end iflong if ( fn ToolbarItemGetLabel( toolbarID, identifier, @lbl ) )fn HIToolbarItemSetLabel( item, lbl )end iflong if ( fn ToolbarItemGetMenu( toolbarID, identifier, @m ) )fn HIToolbarItemSetMenu( item, m )end iflong if ( fn ToolbarItemGetHelp( toolbarID, identifier, @helpText ) )fn HIToolbarItemSetHelpText( item, helpText, 0 )end ifend ifend ifif ( item ) then fn SetEventParameter( inEvent, _kEventParamToolbarItem, _typeHIToolbarItemRef, sizeof( item ), @item )result = _noErrend ifend selectend selectend fn = result'~   ¥ release/*   ToolbarRelease   release everything*/local fn ToolbarRelease( toolbarID as CFIndex )'~'1dim as CFMutableDictionaryRef   itemsDict, itemDataDictdim as CFStringRef              keydim as CFNumberRef              numberdim as pointer                  keys, valuesdim as CFIndex                  count, indexdim as long                     pdim as IconRef                  iconitemsDict = fn ToolbarGetItemsDict( toolbarID )count = fn CFDictionaryGetCount( itemsDict )long if ( count )keys = fn malloc( count * sizeof( CFStringRef ) )values = fn malloc( count * sizeof( CFTypeRef ) )CFDictionaryGetKeysAndValues( itemsDict, keys, values )for index = 0 to count - 1p = keys + ( index * sizeof( CFStringRef ) )BlockMoveData( p, @key,  sizeof( CFStringRef ) )itemDataDict = (CFMutableDictionaryRef)fn CFDictionaryGetValue( itemsDict, key )long if ( itemDataDict )// icon reflong if ( fn CFDictionaryContainsKey( itemDataDict, @"IconRef" ) )number = fn CFDictionaryGetValue( itemDataDict, @"IconRef" )long if ( fn CFNumberGetValue( number, _kCFNumberSInt32Type, @icon ) )if ( icon ) then fn ReleaseIconRef( icon )end ifend ifend ifnext indexfree( keys )free( values )end iffn ToolbarIDRemove( toolbarID )end fn'~   ¥ create/*   ToolbarCreate*/local fn ToolbarCreate( toolbarID as CFIndex, identifier as CFStringRef, attributes as OptionBits )'~'1dim as HIToolbarRef    tbdim as EventTypeSpec   eventSpec( 3 )long if ( fn HIToolbarCreate( identifier, attributes, @tb) == _noErr )fn ToolbarSetRef( toolbarID, tb )eventSpec.eventClass( 0 ) = _kEventClassToolbareventSpec.eventKind( 0 ) = _kEventToolbarGetDefaultIdentifierseventSpec.eventClass( 1 ) = _kEventClassToolbareventSpec.eventKind( 1 ) = _kEventToolbarGetAllowedIdentifierseventSpec.eventClass( 2 ) = _kEventClassToolbareventSpec.eventKind( 2 ) = _kEventToolbarGetSelectableIdentifierseventSpec.eventClass( 3 ) = _kEventClassToolbareventSpec.eventKind( 3 ) = _kEventToolbarCreateItemWithIdentifierfn InstallEventHandler( fn HIObjectGetEventTarget( tb ), @fn ToolbarDelegate, 4, @eventSpec( 0 ), #toolbarID, #0 )end ifend fn'~   ¥ attach to window/*   ToolbarAttachToWindow*/local fn ToolbarAttachToWindow( toolbarID as CFIndex, w as WindowRef, show as Boolean )'~'1dim as HIToolbarRef   tbtb = fn ToolbarGetRef( toolbarID )long if ( tb )fn SetWindowToolbar( w, tb )fn ShowHideWindowToolbar( w, show, _false )fn SetAutomaticControlDragTrackingEnabledForWindow( w, _true )end ifend fn'~   ¥ attributes/*   ToolbarGetAttributes*/local fn ToolbarGetAttributes( toolbarID as CFIndex )'~'1dim as HIToolbarRef   tbdim as OptionBits     attributes : attributes = 0tb = fn ToolbarGetRef( toolbarID )if ( tb ) then fn HIToolbarGetAttributes( tb, @attributes )end fn = attributes/*   ToolbarChangeAttributes*/local fn ToolbarChangeAttributes( toolbarID as CFIndex, attributesToSet as OptionBits, attributesToClear as OptionBits )'~'1dim as HIToolbarRef   tbtb = fn ToolbarGetRef( toolbarID )if ( tb ) then fn HIToolbarChangeAttributes( tb, attributesToSet, attributesToClear )end fn/*   ToolbarGetDisplayMode*/local fn ToolbarGetDisplayMode( toolbarID as CFIndex )'~'1dim as HIToolbarRef           tbdim as HIToolbarDisplayMode   displayMode : displayMode = 0tb = fn ToolbarGetRef( toolbarID )if ( tb ) then fn HIToolbarGetDisplayMode( tb, @displayMode)end fn = displayMode/*   ToolbarSetDisplayMode*/local fn ToolbarSetDisplayMode( toolbarID as CFIndex, displayMode as HIToolbarDisplayMode )'~'1dim as HIToolbarRef   tbtb = fn ToolbarGetRef( toolbarID )if ( tb ) then fn HIToolbarSetDisplayMode( tb, displayMode )end fn/*   ToolbarGetDisplaySize*/local fn ToolbarGetDisplaySize( toolbarID as CFIndex )'~'1dim as HIToolbarRef           tbdim as HIToolbarDisplaySize   displaySize : displaySize = 0tb = fn ToolbarGetRef( toolbarID )if ( tb ) then fn HIToolbarGetDisplaySize( tb, @displaySize)end fn = displaySize/*   ToolbarSetDisplaySize*/local fn ToolbarSetDisplaySize( toolbarID as CFIndex, displaySize as HIToolbarDisplaySize )'~'1dim as HIToolbarRef   tbtb = fn ToolbarGetRef( toolbarID )if ( tb ) then fn HIToolbarSetDisplaySize( tb, displaySize )end fn/*   ToolbarCopyIdentifier*/local fn ToolbarCopyIdentifier( toolbarID as CFIndex ) as CFStringRef'~'1dim as HIToolbarRef   tbdim as CFStringRef    identifier : identifier = 0tb = fn ToolbarGetRef( toolbarID )if ( tb ) then fn HIToolbarCopyIdentifier( tb, @identifier)end fn = identifier