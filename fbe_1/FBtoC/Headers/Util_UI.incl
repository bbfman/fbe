/*   Util_UI.incl   Bernie Wylde 20160209   20161027 Application utilities   20161126 TabView utilities*//*   Nib utilities*/BeginCDeclaration#import <objc/runtime.h>@interface NSNib (Additions)@property (nonatomic, retain) NSArray *topLevelObjects;- (NSNib *)initWithName:(NSString *)name;+ (NSNib *)nibWithName:(NSString *)name;- (id)objectWithIdentifier:(NSString *)identifier;- (NSWindow *)windowWithIdentifier:(NSString *)identifier;- (id)objectOfClass:(Class)cls;- (id)objectWithClassName:(NSString *)className;- (NSMenu *)menuWithTitle:(NSString *)title;- (NSWindow *)windowWithTitle:(NSString *)title;@endEndCBeginCFunctionstatic char TopLevelObjectsKey;@implementation NSNib (Additions)@dynamic topLevelObjects;- (NSArray *)topLevelObjects {     return objc_getAssociatedObject(self,&TopLevelObjectsKey);}- (void)setTopLevelObjects:(id)topLevelObjects {    objc_setAssociatedObject(self, &TopLevelObjectsKey, topLevelObjects, OBJC_ASSOCIATION_RETAIN_NONATOMIC);}- (NSNib *)initWithName:(NSString *)name {    NSNib *nib = [self initWithNibNamed:name bundle:nil];    NSArray *objects = nil;    if ( [nib respondsToSelector:@selector(instantiateWithOwner:topLevelObjects:)])        [nib instantiateWithOwner:nil topLevelObjects:&objects];    else        [nib instantiateNibWithOwner:nil topLevelObjects:&objects];    [nib setTopLevelObjects:objects];    [objects makeObjectsPerformSelector:@selector(release)];// 20160224 bw    return nib;}+ (NSNib *)nibWithName:(NSString *)name {    NSNib *nib = [[[NSNib alloc] initWithNibNamed:name bundle:nil] autorelease];    NSArray *objects = nil;    if ( [nib respondsToSelector:@selector(instantiateWithOwner:topLevelObjects:)])        [nib instantiateWithOwner:nil topLevelObjects:&objects];    else        [nib instantiateNibWithOwner:nil topLevelObjects:&objects];    [nib setTopLevelObjects:objects];    [objects makeObjectsPerformSelector:@selector(release)];// 20160224 bw    return nib;}- (id)objectWithIdentifier:(NSString *)identifier {    for ( id obj in [self topLevelObjects] ) {        if ( class_respondsToSelector( [obj class], NSSelectorFromString( @"identifier" ) ) ) {            if ( [obj identifier] != nil ) {                if ( [(NSString *)[obj identifier] isEqualToString:identifier] ) {                    return [obj retain];                }            }        }    }    return nil;}- (NSWindow *)windowWithIdentifier:(NSString *)identifier {    for ( id obj in [self topLevelObjects] ) {        if ( [obj class] == [NSWindow class] ) {            if ( [obj identifier] != nil ) {                if ( [(NSString *)[obj identifier] isEqualToString:identifier] ) {                    return [obj retain];                }            }        }    }    return nil;}- (id)objectOfClass:(Class)cls {    for ( id obj in [self topLevelObjects] ) {        if ( [obj class] == cls ) {            return [obj retain];        }    }    return nil;}- (id)objectWithClassName:(NSString *)className {     return [self objectOfClass:NSClassFromString( className )];}- (NSMenu *)menuWithTitle:(NSString *)title {    for ( id obj in [self topLevelObjects] ) {        if ( [obj class] == [NSMenu class] ) {            if ( [[obj title] isEqual:title] ) {                return [obj retain];            }        }    }    return nil;}- (NSWindow *)windowWithTitle:(NSString *)title {    for ( id obj in [self topLevelObjects] ) {        if ( [obj class] == [NSWindow class] ) {            if ( [[obj title] isEqual:title] ) {                return [obj retain];            }        }    }    return nil;}@endEndC/*   Application utilities*/BegincDeclarationNSWindow *ApplicationFrontWindow();EndCBeginCFunctionNSWindow *ApplicationFrontWindow(){     NSArray *windows = [NSApp windows];     return [windows objectAtIndex:0];}EndC/*   Menu utilities*/BegincDeclarationNSMenuItem *MenuItemWithTag( NSMenu *menu, NSInteger tag );EndCBeginCFunctionNSMenuItem *MenuItemWithTag( NSMenu *menu, NSInteger tag ){    NSMenuItem *item = [menu itemWithTag:tag];    if ( item == nil ) {        NSArray *items = [menu itemArray];        for ( NSMenuItem *i in items ) {            NSMenu *submenu = [i submenu];            if ( submenu ) {                item = MenuItemWithTag( submenu, tag );                if ( item ) break;            }        }    }    return item;}EndC/*   Window utilities*/BegincDeclarationNSWindow *WindowWithIdentifier( NSString *identifier );id WindowViewWithTag( NSWindow *window, NSInteger tag );id WindowViewWithIdentifier( NSWindow *window, NSString *identifier );id WindowViewOfClass( NSWindow *window, Class cls );id WindowViewWithClassName( NSWindow *window, NSString *className );EndCBeginCFunctionNSWindow *WindowWithIdentifier( NSString *identifier ){     NSArray *windows = [NSApp windows];     for ( NSWindow *w in windows ) {          if ( [[w identifier] isEqualToString:identifier] ) return w;     }     return nil;}id WindowViewWithTag( NSWindow *window, NSInteger tag ){ return [[window contentView] viewWithTag:tag]; }id WindowViewWithIdentifier( NSWindow *window, NSString *identifier ){ return ViewWithIdentifier( [window contentView], identifier ); }id WindowViewOfClass( NSWindow *window, Class cls ){ return ViewOfClass( [window contentView], cls ); }id WindowViewWithClassName( NSWindow *window, NSString *className ){ return ViewWithClassName( [window contentView], className ); }EndC/*   View utilities*/BegincDeclarationid ViewWithIdentifier( NSView *superview, NSString *identifier );id ViewOfClass( NSView *superview, Class cls );id ViewWithClassName( NSView *superview, NSString *className );EndCBeginCFunctionid ViewWithIdentifier( NSView *superview, NSString *identifier ){    NSArray *subviews = [superview subviews];    for (id obj in subviews ) {        if ( class_respondsToSelector( [obj class], NSSelectorFromString( @"identifier" ) ) ) {            if ( [obj identifier] != nil ) {                if ( [(NSString *)[obj identifier] compare:(NSString *)identifier] == NSOrderedSame ) {                    return obj;                }            }            obj = (id)ViewWithIdentifier( obj, identifier );            if ( obj != nil ) return obj;        }    }    return nil;}id ViewOfClass( NSView *superview, Class cls ){    NSArray *subviews = [superview subviews];    for (id obj in subviews ) {        if ( [obj class] == cls ) {             return obj;         }         obj = (id)ViewOfClass( obj, cls );         if ( obj != nil ) return obj;    }    return nil;}id ViewWithClassName( NSView *superview, NSString *className ){ return ViewOfClass( superview, NSClassFromString( className ) ); }EndC/*   TabView utilities*/BeginCDeclarationNSTabView *TabViewInit( NSRect rect, NSArray *tabLabels );void TabViewAddItem( NSTabView *tabView, NSString *label, NSString *identifier );void TabViewSetItemView( NSTabView *tabView, NSInteger tabIndex, NSView *view );NSView *TabViewItemView( NSTabView *tabView, NSInteger tabIndex );void TabViewAddSubview( NSTabView *tabView, NSInteger tabIndex, NSView *view );EndCBeginCFunctionNSTabView *TabViewInit( NSRect rect, NSArray *tabLabels ){     NSTabView *tabView = [[NSTabView alloc] initWithFrame:rect];     NSInteger count = [tabLabels count];     for ( NSInteger index = 0; index < count; index++ ) {          NSTabViewItem *item = [[NSTabViewItem alloc] initWithIdentifier:[NSString stringWithFormat:@"%ld",(long)index+1]];          [item setLabel:[tabLabels objectAtIndex:index]];          [[item view] setFrame:[tabView contentRect]];          [tabView addTabViewItem:item];          [item release];     }     return tabView;}void TabViewAddItem( NSTabView *tabView, NSString *label, NSString *identifier ){     NSTabViewItem *item = [[NSTabViewItem alloc] initWithIdentifier:identifier];     [item setLabel:label];     [tabView addTabViewItem:item];     [item release];}void TabViewSetItemView( NSTabView *tabView, NSInteger tabIndex, NSView *view ){     NSTabViewItem *item = [tabView tabViewItemAtIndex:tabIndex];     [item setView:view];}NSView *TabViewItemView( NSTabView *tabView, NSInteger tabIndex ){ return [[tabView tabViewItemAtIndex:tabIndex] view]; }void TabViewAddSubview( NSTabView *tabView, NSInteger tabIndex, NSView *view ){     NSTabViewItem *item = [tabView tabViewItemAtIndex:tabIndex];     [[item view] addSubview:view];}EndC