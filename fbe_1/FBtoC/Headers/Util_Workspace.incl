/*   Util_Workspace.incl   Bernie Wylde 20170401   1.0.3  20170815*/include "Util_URL.incl"// NSWorkspaceLaunchOptions#if ndef _DEFINEDINCOCOA#define NSWorkspaceLaunchOptions as UInt64#endifsystem NSWorkspaceLaunchOptions NSWorkspaceLaunchAndPrintsystem NSWorkspaceLaunchOptions NSWorkspaceLaunchWithErrorPresentationsystem NSWorkspaceLaunchOptions NSWorkspaceLaunchInhibitingBackgroundOnlysystem NSWorkspaceLaunchOptions NSWorkspaceLaunchWithoutAddingToRecentssystem NSWorkspaceLaunchOptions NSWorkspaceLaunchWithoutActivationsystem NSWorkspaceLaunchOptions NSWorkspaceLaunchAsyncsystem NSWorkspaceLaunchOptions NSWorkspaceLaunchNewInstancesystem NSWorkspaceLaunchOptions NSWorkspaceLaunchAndHidesystem NSWorkspaceLaunchOptions NSWorkspaceLaunchAndHideOtherssystem NSWorkspaceLaunchOptions NSWorkspaceLaunchDefaultsystem NSWorkspaceLaunchOptions NSWorkspaceLaunchAllowingClassicStartupsystem NSWorkspaceLaunchOptions NSWorkspaceLaunchPreferringClassic// NSWorkspaceLaunchConfiguration optionssystem CFStringRef NSWorkspaceLaunchConfigurationAppleEventsystem CFStringRef NSWorkspaceLaunchConfigurationArgumentssystem CFStringRef NSWorkspaceLaunchConfigurationEnvironmentsystem CFStringRef NSWorkspaceLaunchConfigurationArchitectureBeginCDeclarationBoolean WS_OpenURL( CFURLRef url );Boolean WS_OpenURLWithApplication( CFURLRef url, CFStringRef appName, Boolean deactivate );Boolean WS_OpenURLsWithApplicationAtURL( CFArrayRef urls, CFURLRef appURL, NSWorkspaceLaunchOptions options, CFDictionaryRef configuration );Boolean WS_OpenURLWithApplicationAtURL( CFURLRef url, CFURLRef appURL, NSWorkspaceLaunchOptions options, CFDictionaryRef configuration );Boolean WS_LaunchApplication( CFStringRef appName );void WS_HideOtherApplications();void WS_DuplicateURLs( CFArrayRef urls );void WS_RecycleURL( CFURLRef url);void WS_RecycleURLs( CFArrayRef urls );CFStringRef WS_TypeOfFileAtURL( CFURLRef url );CFStringRef WS_PreferredFilenameExtensionForType( CFStringRef typeName );Boolean WS_FilenameExtensionIsValidForType( CFStringRef filenameExtension, CFStringRef typeName );Boolean WS_FileTypeConformToType( CFStringRef firstTypeName, CFStringRef secondTypeName );Boolean WS_GetInfoForFileAtURL( CFURLRef url, CFStringRef *appName, CFStringRef *type );CFURLRef WS_URLForApplicationToOpenURL( CFURLRef url );Boolean WS_IsFilePackageAtURL( CFURLRef url );CFURLRef WS_URLForApplicationWithBundleIdentifier( CFStringRef identifier );void WS_NoteFileSystemChangedAtURL( CFURLRef url );EndCBeginCFunctionBoolean WS_OpenURL( CFURLRef url ){ return [[NSWorkspace sharedWorkspace] openURL:(NSURL *)url]; }Boolean WS_OpenURLWithApplication( CFURLRef url, CFStringRef appName, Boolean deactivate ){ return [[NSWorkspace sharedWorkspace] openFile:[(NSURL *)url path] withApplication:(NSString *)appName andDeactivate:deactivate]; }Boolean WS_OpenURLsWithApplicationAtURL( CFArrayRef urls, CFURLRef appURL, NSWorkspaceLaunchOptions options, CFDictionaryRef configuration ){#if __MAC_OS_X_VERSION_MAX_ALLOWED > 1090     return ( [[NSWorkspace sharedWorkspace] openURLs:(NSArray *)urls withApplicationAtURL:(NSURL *)appURL options:options configuration:(NSDictionary *)configuration error:nil] != nil );#endif     return false;}Boolean WS_OpenURLWithApplicationAtURL( CFURLRef url, CFURLRef appURL, NSWorkspaceLaunchOptions options, CFDictionaryRef configuration ){#if __MAC_OS_X_VERSION_MAX_ALLOWED > 1090     return ( [[NSWorkspace sharedWorkspace] openURLs:[NSArray arrayWithObject:(NSURL *)url] withApplicationAtURL:(NSURL *)appURL options:options configuration:(NSDictionary *)configuration error:nil] != nil );#endif     return false;}Boolean WS_LaunchApplication( CFStringRef appName ){ return [[NSWorkspace sharedWorkspace] launchApplication:(NSString *)appName]; }Boolean WS_LaunchApplicationAtURL( CFURLRef url, NSWorkspaceLaunchOptions options, CFDictionaryRef configuration ){ return ( [[NSWorkspace sharedWorkspace] launchApplicationAtURL:(NSURL *)url options:options configuration:(NSDictionary *)configuration error:nil] != nil ); }void WS_HideOtherApplications(){ [[NSWorkspace sharedWorkspace] hideOtherApplications]; }void WS_DuplicateURLs( CFArrayRef urls ){ [[NSWorkspace sharedWorkspace] duplicateURLs:(NSArray *)urls completionHandler:nil]; }void WS_RecycleURL( CFURLRef url){ [[NSWorkspace sharedWorkspace] recycleURLs:[NSArray arrayWithObject:(NSURL *)url] completionHandler:nil]; }void WS_RecycleURLs( CFArrayRef urls ){ [[NSWorkspace sharedWorkspace] recycleURLs:(NSArray *)urls completionHandler:nil]; }CFStringRef WS_TypeOfFileAtURL( CFURLRef url ){ return (CFStringRef)[[NSWorkspace sharedWorkspace] typeOfFile:[(NSURL *)url path] error:nil]; }CFStringRef WS_PreferredFilenameExtensionForType( CFStringRef typeName ){ return (CFStringRef)[[NSWorkspace sharedWorkspace] preferredFilenameExtensionForType:(NSString *)typeName]; }Boolean WS_FilenameExtensionIsValidForType( CFStringRef filenameExtension, CFStringRef typeName ){ return [[NSWorkspace sharedWorkspace] filenameExtension:(NSString *)filenameExtension isValidForType:(NSString *)typeName]; }Boolean WS_FileTypeConformToType( CFStringRef firstTypeName, CFStringRef secondTypeName ){ return [[NSWorkspace sharedWorkspace] type:(NSString *)firstTypeName conformsToType:(NSString *)secondTypeName]; }Boolean WS_GetInfoForFileAtURL( CFURLRef url, CFStringRef *appName, CFStringRef *type ){ return [[NSWorkspace sharedWorkspace] getInfoForFile:[(NSURL *)url path] application:(NSString **)appName type:(NSString **)type]; }CFURLRef WS_URLForApplicationToOpenURL( CFURLRef url ){ return (CFURLRef)[[NSWorkspace sharedWorkspace] URLForApplicationToOpenURL:(NSURL *)url]; }Boolean WS_IsFilePackageAtURL( CFURLRef url ){ return [[NSWorkspace sharedWorkspace] isFilePackageAtPath:[(NSURL *)url path]]; }CFURLRef WS_URLForApplicationWithBundleIdentifier( CFStringRef identifier ){ return (CFURLRef)[[NSWorkspace sharedWorkspace] URLForApplicationWithBundleIdentifier:(NSString *)identifier]; }void WS_NoteFileSystemChangedAtURL( CFURLRef url ){ [[NSWorkspace sharedWorkspace] noteFileSystemChanged:[(NSURL *)url path]]; }EndC/*  WS_OpenURL( url )    Params:      url - The file URL.    Return value: A boolean indicating if the location was successfully opened.*/toolbox fn WS_OpenURL( CFURLRef url ) = Boolean/*  WS_OpenURLWithApplication( url, appName, deactivate )    Params:      url        - The file URL.      appName    - The name of the application.      deactivate - Deactivate the sending application.    Return value: A boolean indicating if the file was successfully opened.*/toolbox fn WS_OpenURLWithApplication( CFURLRef url, CFStringRef appName, Boolean deactivate ) = Boolean/*  WS_OpenURLsWithApplicationAtURL( urls, appURL, options, configuration )          // macOS 10.10 and later    Params:      urls          - An array of file URLs.      appURL        - The application URL.      options       - See NSWorkspaceLaunchOptions above.      configuration - See NSWorkspaceLaunchConfigurationXxxx options above.    Return value: A boolean indicating if the files were successfully opened.*/toolbox fn WS_OpenURLsWithApplicationAtURL( CFArrayRef urls, CFURLRef appURL, NSWorkspaceLaunchOptions options, CFDictionaryRef configuration )  = Boolean/*  WS_OpenURLWithApplicationAtURL( url, appURL, options, configuration )          // macOS 10.10 and later    Params:      url           - File URL.      appURL        - The application URL.      options       - See NSWorkspaceLaunchOptions above.      configuration - See NSWorkspaceLaunchConfigurationXxxx options above.    Return value: A boolean indicating if the file was successfully opened.*/toolbox fn WS_OpenURLWithApplicationAtURL( CFURLRef url, CFURLRef appURL, NSWorkspaceLaunchOptions options, CFDictionaryRef configuration )  = Boolean/*  WS_LaunchApplication( appName )    Params:      appName - The application name.    Return value: A boolean indicating if the application was successfully launched or was already running.*/toolbox fn WS_LaunchApplication( CFStringRef appName ) = Boolean/*  WS_LaunchApplicationAtURL( url, options, configuration )    Params:      url           - The application URL.      options       - See NSWorkspaceLaunchOptions above.      configuration - See NSWorkspaceLaunchConfigurationXxxx options above.    Return value: A boolean indicating if the application was successfully launched or was already running.*/toolbox WS_HideOtherApplications/*  WS_DuplicateURLs( urls )    Duplicates the specified URLs in the same manner as the Finder    Params:      urls - An array of URLs.*/toolbox WS_DuplicateURLs( CFArrayRef urls )/*  WS_RecycleURL( url )    Moves the specified URL to the trash in the same manner as the Finder.    Params:      url - A file URL.*/toolbox WS_RecycleURL( CFURLRef url)/*  WS_RecycleURLs( urls )    Moves the specified URLs to the trash in the same manner as the Finder.    Params:      urls - An array of URLs.*/toolbox WS_RecycleURLs( CFArrayRef urls )/*  WS_TypeOfFileAtURL( url )    Returns the uniform type identifier of the specified file, if it can be determined.    Params:      url - A file URL.    Return value: A CFStringRef containing the uniform type identifier of the file at url.                  If no UTI can be determined the return value is NULL.*/toolbox fn WS_TypeOfFileAtURL( CFURLRef url ) = CFStringRef/*  WS_PreferredFilenameExtensionForType( typeName )    Returns the preferred filename extension for the specified Uniform Type Identifier.    Params:      typeName - A string containing the Uniform Type Identifier.    Return value: The appropriate filename extension for typeName, or NULL if no extension could be determined.*/toolbox fn WS_PreferredFilenameExtensionForType( CFStringRef typeName ) = CFStringRef/*  WS_FilenameExtensionIsValidForType( typeName )    Returns whether the specified filename extension is appropriate for the Uniform Type Identifier.    Params:      filenameExtension - A string containing the filename extension.      typeName          - A string containing the Uniform Type Identifier.    Return value: true if filenameExtension is a valid extension for typeName, false otherwise.*/toolbox fn WS_FilenameExtensionIsValidForType( CFStringRef filenameExtension, CFStringRef typeName ) = Boolean/*  WS_FileTypeConformToType( firstTypeName, secondTypeName )    Returns a Boolean indicating that the first Uniform Type Identifier conforms to the second Uniform Type Identifier.    Params:      firstTypeName  - A string containing the Uniform Type Identifier that should conform to secondTypeName.      secondTypeName - A string containing a Uniform Type Identifier.    Return value: true if firstTypeName conforms to the uniform type identifier hierarchy of secondTypeName, false otherwise.*/toolbox fn WS_FileTypeConformToType( CFStringRef firstTypeName, CFStringRef secondTypeName ) = Boolean/*  WS_GetInfoForFileAtURL( url, appName, type )    Retrieves information about the specified file.    Params:      url     - The URL of the desired file.      appName - The app the system would use to open the file.      type    - On input, a pointer to a string object variable; on return, if the method is successful, this variable.                contains a string object with the filename extension or encoded HFS file type of the file.    Return value: true if the information was retrieved successfully; otherwise, false if the file could not be found or the app was not associated with the file.*/toolbox fn WS_GetInfoForFileAtURL( CFURLRef url, CFStringRef *appName, CFStringRef *type ) = Boolean/*  WS_URLForApplicationToOpenURL( url )    Returns the URL to the default app that would be used to open the given URL.    Params:      url - The URL of the file to open.    Return value: The URL of the default app that would open the specified URL.                  Returns NULL if no app is able to open the URL, or if the file URL does not exist.*/toolbox fn WS_URLForApplicationToOpenURL( CFURLRef url ) = CFURLRef/*  WS_IsFilePackageAtURL( url )    Determines whether the specified URL is a file package.    Params:      url - A file URL.    Return value: A boolean indicating if the URL is a file package.*/toolbox fn WS_IsFilePackageAtURL( CFURLRef url ) = Boolean/*  WS_URLForApplicationWithBundleIdentifier( identifier )    Returns the URL for the app with the specified identifier.    Params:      identifier - A bundle identifier.    Return value: The URL of the app.*/toolbox fn WS_URLForApplicationWithBundleIdentifier( CFStringRef identifier ) = CFURLRef/*  WS_NoteFileSystemChangedAtURL( url )    Informs the workspace object that the file system changed at the specified URL.    Params:      url - The URL of the file that changed.*/toolbox WS_NoteFileSystemChangedAtURL( CFURLRef url )