/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        5 January 2009*//* CoreGraphics - CGAffineTransform.h * Copyright (c) 1998-2005 Apple Computer, Inc. * All rights reserved.*/include "CoreGraphics:CGBase.incl"include "CoreGraphics:CGGeometry.incl"#if ndef _DEFINEDINCARBONbegin record CGAffineTransformdim as CGFloat a, b, c, ddim as CGFloat tx, tyend record/* The identity transform: [ 1 0 0 1 0 0 ]. */system CGAffineTransform CGAffineTransformIdentity/* Return the transform [ a b c d tx ty ]. */toolbox fn CGAffineTransformMake( CGFloat a, CGFloat b, CGFloat c, CGFloat d, CGFloat tx, CGFloat ty ) = CGAffineTransform/* Return a transform which translates by `(tx, ty)':* t' = [ 1 0 0 1 tx ty ] */toolbox fn CGAffineTransformMakeTranslation( CGFloat tx, CGFloat ty ) = CGAffineTransform/* Return a transform which scales by `(sx, sy)':* t' = [ sx 0 0 sy 0 0 ] */toolbox fn CGAffineTransformMakeScale( CGFloat sx, CGFloat sy ) = CGAffineTransform/* Return a transform which rotates by `angle' radians:* t' = [ cos(angle) sin(angle) -sin(angle) cos(angle) 0 0 ] */toolbox fn CGAffineTransformMakeRotation( CGFloat angle ) = CGAffineTransform/* Return true if `t' is the identity transform, false otherwise. */toolbox fn CGAffineTransformIsIdentity( CGAffineTransform t ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Translate `t' by `(tx, ty)' and return the result:* t' = [ 1 0 0 1 tx ty ] * t */toolbox fn CGAffineTransformTranslate( CGAffineTransform t, CGFloat tx, CGFloat ty ) = CGAffineTransform/* Scale `t' by `(sx, sy)' and return the result:* t' = [ sx 0 0 sy 0 0 ] * t */toolbox fn CGAffineTransformScale( CGAffineTransform t, CGFloat sx, CGFloat sy ) = CGAffineTransform/* Rotate `t' by `angle' radians and return the result:* t' = [ cos(angle) sin(angle) -sin(angle) cos(angle) 0 0 ] * t */toolbox fn CGAffineTransformRotate( CGAffineTransform t, CGFloat angle ) = CGAffineTransform/* Invert `t' and return the result. If `t' has zero determinant, then `t'* is returned unchanged. */toolbox fn CGAffineTransformInvert( CGAffineTransform t ) = CGAffineTransform/* Concatenate `t2' to `t1' and return the result:* t' = t1 * t2 */toolbox fn CGAffineTransformConcat( CGAffineTransform t1, CGAffineTransform t2 ) = CGAffineTransform/* Return true if `t1' and `t2' are equal, false otherwise. */toolbox fn CGAffineTransformEqualToTransform( CGAffineTransform t1, CGAffineTransform t2 ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Transform `point' by `t' and return the result: * p' = p * t* where p = [ x y 1 ]. */toolbox fn CGPointApplyAffineTransform( CGPoint point, CGAffineTransform t ) = CGPoint/* Transform `size' by `t' and return the result: * s' = s * t* where s = [ width height 0 ]. */toolbox fn CGSizeApplyAffineTransform( CGSize size, CGAffineTransform t ) = CGSize/* Transform `rect' by `t' and return the result. Since affine transforms * do not preserve rectangles in general, this function returns the * smallest rectangle which contains the transformed corner points of * `rect'. If `t' consists solely of scales, flips and translations, then * the returned rectangle coincides with the rectangle constructed from the* four transformed corners. */toolbox fn CGRectApplyAffineTransform( CGRect rect, CGAffineTransform t ) = CGRect// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/*** Definitions of inline functions. ***/// CG_INLINE CGAffineTransform// __CGAffineTransformMake(CGFloat a, CGFloat b, CGFloat c, CGFloat d,// CGFloat tx, CGFloat ty)// {// CGAffineTransform t;// t.a = a; t.b = b; t.c = c; t.d = d; t.tx = tx; t.ty = ty;// return t;// }// CG_INLINE CGPoint// __CGPointApplyAffineTransform(CGPoint point, CGAffineTransform t)// {// CGPoint p;// p.x = (CGFloat)((double)t.a * point.x + (double)t.c * point.y + t.tx);// p.y = (CGFloat)((double)t.b * point.x + (double)t.d * point.y + t.ty);// return p;// }// CG_INLINE CGSize// __CGSizeApplyAffineTransform(CGSize size, CGAffineTransform t)// {// CGSize s;// s.width = (CGFloat)((double)t.a * size.width + (double)t.c * size.height);// s.height = (CGFloat)((double)t.b * size.width + (double)t.d * size.height);// return s;// }#endif// _DEFINEDINCARBON