/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        5 January 2009*//* CoreGraphics - CGBitmapContext.h * Copyright (c) 2000-2006 Apple Computer, Inc. * All rights reserved.*/include "CoreGraphics:CGColorSpace.incl"include "CoreGraphics:CGImage.incl"include "CoreGraphics:CGContext.incl"#if ndef _DEFINEDINCARBON/* Create a bitmap context. The context draws into a bitmap which is * `width' pixels wide and `height' pixels high. The number of components * for each pixel is specified by `colorspace', which may also specify a * destination color profile. The number of bits for each component of a * pixel is specified by `bitsPerComponent'. The number of bytes per pixel * is equal to `(bitsPerComponent * number of components + 7)/8'. Each row * of the bitmap consists of `bytesPerRow' bytes, which must be at least * `width * bytes per pixel' bytes; in addition, `bytesPerRow' must be an * integer multiple of the number of bytes per pixel. `data' points a block * of memory at least `bytesPerRow * height' bytes. `bitmapInfo' specifies * whether the bitmap should contain an alpha channel and how it's to be * generated, along with whether the components are floating-point or* integer. */toolbox fn CGBitmapContextCreate( pointer dat, long width, long height, long bitsPerComponent, long bytesPerRow, CGColorSpaceRef colorspace, CGImageAlphaInfo alphaInfo ) = CGContextRef/* Return the data associated with the bitmap context `c', or NULL if `c'* is not a bitmap context. */toolbox fn CGBitmapContextGetData( CGContextRef c ) = ptr // returns data associated with bitmap context 'c' or NULL if 'c' is not a bitmap context./* Return the width of the bitmap context `c', or 0 if `c' is not a bitmap* context. */toolbox fn CGBitmapContextGetWidth( CGContextRef c ) = UInt32// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Return the height of the bitmap context `c', or 0 if `c' is not a bitmap* context. */toolbox fn CGBitmapContextGetHeight( CGContextRef c ) = UInt32// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Return the bits per component of the bitmap context `c', or 0 if `c' is* not a bitmap context. */toolbox fn CGBitmapContextGetBitsPerComponent( CGContextRef c ) = UInt32// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Return the bits per pixel of the bitmap context `c', or 0 if `c' is not* a bitmap context. */toolbox fn CGBitmapContextGetBitsPerPixel( CGContextRef c ) = UInt32// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Return the bytes per row of the bitmap context `c', or 0 if `c' is not a* bitmap context. */toolbox fn CGBitmapContextGetBytesPerRow( CGContextRef c ) = UInt32// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Return the colorspace of the bitmap context `c', or NULL if `c' is not a* bitmap context. */toolbox fn CGBitmapContextGetColorSpace( CGContextRef c ) = CGColorSpaceRef// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Return the alpha info of the bitmap context `c', or kCGImageAlphaNone if* `c' is not a bitmap context. */toolbox fn CGBitmapContextGetAlphaInfo( CGContextRef c ) = CGImageAlphaInfo// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Return the bitmap info of the bitmap context `c', or 0 if `c' is not a* bitmap context. */toolbox fn CGBitmapContextGetBitmapInfo( CGContextRef c ) = CGBitmapInfo// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Return an image containing a snapshot of the bitmap context `c'. If * context is not a bitmap context, or if the image cannot be created for * any reason, this function returns NULL. This is a "copy" operation --- * subsequent changes to context will not affect the contents of the * returned image. * * Note that in some cases the copy will actually follow "copy-on-write" * semantics, so that the actual physical copy of the bits will only occur * if the underlying data in the bitmap context is modified. As a * consequence, you may wish to use the resulting image and release it * before performing more drawing into the bitmap context; in this way, the* actual physical copy of the data may be avoided. */toolbox fn CGBitmapContextCreateImage( CGContextRef c ) = CGImageRef// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;#endif// _DEFINEDINCARBON