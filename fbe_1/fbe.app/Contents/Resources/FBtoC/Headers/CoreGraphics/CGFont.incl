/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        5 January 2009*//* CoreGraphics - CGFont.h * Copyright (c) 1999-2006 Apple Computer, Inc. * All rights reserved.*//* The type used to represent a CoreGraphics font. */#if ndef _DEFINEDINCARBON#define CGFontRef as pointer/* A type to represent indexes in a CGFontRef. */#define CGFontIndex as unsigned short/* A type to represent glyph identifiers in a CGFontRef. */#define CGGlyph as CGFontIndex/* The format of a PostScript font subset. Type1 is documented in the * "Adobe Type 1 Font Format"; Type3 in the "PostScript Language Reference, * 3rd ed." and Type42 in "Adobe Technical Note 5012, The Type 42 Font* Format Specification". */begin enum_kCGFontPostScriptFormatType1  = 1_kCGFontPostScriptFormatType3  = 3_kCGFontPostScriptFormatType42 = 42end enum#define CGFontPostScriptFormat as UInt32begin enum/* The maximum allowed value of a CGFontIndex. Always <= USHRT_MAX - 1. */_kCGFontIndexMax     = ((1 << 16) - 2)                      /* A value representing an invalid CGFontIndex. Always <= USHRT_MAX. */_kCGFontIndexInvalid = ((1 << 16) - 1)                      /* The maximum allowed value of a CGGlyph. */_kCGGlyphMax         = _kCGFontIndexMaxend enum/* Return the CFTypeID for CGFontRefs. */toolbox fn CGFontGetTypeID = CFTypeID// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Create a CGFontRef using `platformFontReference', a pointer to a * platform-specific font reference. For MacOS X, `platformFontReference'* should be a pointer to an ATSFontRef. */toolbox fn CGFontCreateWithPlatformFont( pointer platformFontReference ) = CGFontRef/* Return the font defined by the data provided by `provider', or NULL if* the font can't be created. */toolbox fn CGFontCreateWithDataProvider( CGDataProviderRef provider ) = CGFontRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the font identified by `name', corresponding to the font's * PostScript name or its full name, or NULL if the font can't be* created. */toolbox fn CGFontCreateWithFontName( CFStringRef name ) = CGFontRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return a font based on `font' with the variation specification * dictionary `variations' applied to `font'. A variation specification * dictionary contains keys corresponding the variation axis names of the * font. Each key is a variation axis name; the value for each key is the * value specified for that particular variation axis represented as a * CFNumberRef. If a variation axis name is not specified in `variations',* then the current value from `font' is used. */toolbox fn CGFontCreateCopyWithVariations( CGFontRef font, CFDictionaryRef variations ) = CGFontRef// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Equivalent to `CFRetain(font)', except it doesn't crash (as CFRetain* does) if `font' is NULL. */toolbox fn CGFontRetain( CGFontRef font ) = CGFontRef/* Equivalent to `CFRelease(font)', except it doesn't crash (as CFRelease* does) if `font' is NULL. */toolbox CGFontRelease( CGFontRef font )/* Return the number of glyphs in `font'. */toolbox fn CGFontGetNumberOfGlyphs( CGFontRef font ) = UInt32/* Return the glyph space units/em for `font'. */toolbox fn CGFontGetUnitsPerEm( CGFontRef font ) = long/* Return the PostScript name of `font'. */toolbox fn CGFontCopyPostScriptName( CGFontRef font ) = CFStringRef// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Return the "full name" of `font'. */toolbox fn CGFontCopyFullName( CGFontRef font ) = CFStringRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the ascent of `font'. The "ascent" is the maximum distance above * the baseline of glyphs in a font. The value is specified in glyph space* units. */toolbox fn CGFontGetAscent( CGFontRef font ) = long// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the descent of `font'. The "descent" is the maximum distance * below the baseline of glyphs in a font. The value is specified in glyph* space units. */toolbox fn CGFontGetDescent( CGFontRef font ) = long// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the leading of `font'. The "leading" is the spacing between * consecutive lines of text in a font. The value is specified in glyph* space units. */toolbox fn CGFontGetLeading( CGFontRef font ) = long// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the cap height of `font'. The "cap height" is the distance above * the baseline of the top of flat capital letters of glyphs in a font. The* value is specified in glyph space units. */toolbox fn CGFontGetCapHeight( CGFontRef font ) = long// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the x-height of `font'. The "x height" is the distance above the * baseline of the top of flat, non-ascending lowercase letters (such as * "x") of glyphs in a font. The value is specified in glyph space* units. */toolbox fn CGFontGetXHeight( CGFontRef font ) = long// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the font bounding box of `font'. The "font bounding box" is the * union of all of the bounding boxes for all the glyphs in a font. The* value is specified in glyph space units. */toolbox fn CGFontGetFontBBox( CGFontRef font ) = CGRect// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the italic angle of `font', measured in degrees counter-clockwise* from the vertical. */toolbox fn CGFontGetItalicAngle( CGFontRef font ) = CGFloat// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the thickness of the dominant vertical stems of glyphs in `font'.* The value is specified in glyph space units. */toolbox fn CGFontGetStemV( CGFontRef font ) = CGFloat// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return an array of the variation axis dictionaries for `font'. Each * variation axis dictionary contains values for the variation axis keys * listed below. This function returns NULL if `font' doesn't support* variations. */toolbox fn CGFontCopyVariationAxes( CGFontRef font ) = CFArrayRef// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Return the variation specification dictionary from `font'. This * dictionary contains keys corresponding the variation axis names of the * font. Each key is a variation axis name; the value for each key is the * value specified for that particular variation axis represented as a * CFNumberRef. This function returns NULL if `font' doesn't support* variations. */toolbox fn CGFontCopyVariations( CGFontRef font ) = CFDictionaryRef// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Get the advance of each glyph in `glyphs', an array of `count' glyphs, * and return it in the corresponding entry of `advances', an array of * `count' integers. The advances are specified in glyph space. Returns* false if advances can't be retrieved for any reason; true otherwise. */toolbox fn CGFontGetGlyphAdvances( CGFontRef font, const CGGlyph *glyphs, UInt32 count, long *advances ) = Boolean/* Get the bounding box of each glyph in `glyphs', an array of `count' * glyphs, and return it in the corresponding entry of `bboxes', an array * of `count' rectangles. The bounding boxes are specified in glyph space. * Returns false if bounding boxes can't be retrieved for any reason; true* otherwise. */toolbox fn CGFontGetGlyphBBoxes( CGFontRef font, const CGGlyph *glyphs, UInt32 count, CGRect *bboxes ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the glyph associated with `name' in `font'. If `name' isn't found* in the font, return 0. */toolbox fn CGFontGetGlyphWithGlyphName( CGFontRef font, CFStringRef name ) = CGGlyph// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the glyph name of `glyph' in `font', or NULL if `glyph' does not* appear in `font'. */toolbox fn CGFontCopyGlyphNameForGlyph( CGFontRef font, CGGlyph glyph ) = CFStringRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return true if a subset in the PostScript format `format' can be created* for `font'; false otherwise. *///toolbox fn CGFontCanCreatePostScriptSubset( CGFontRef font, CGFontPostScriptFormat format ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Create a subset of `font' named `subsetName' in the PostScript format * `format'. The subset will contain the glyphs specified by `glyphs', an * array of `count' CGGlyphs. If non-NULL, `encoding' specifies the default* encoding for the subset. *///toolbox fn CGFontCreatePostScriptSubset( CGFontRef font, CFStringRef subsetName, CGFontPostScriptFormat format, const CGGlyph *glyphs, UInt32 count, const CGGlyph *encoding ) = CFDataRef// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Return a PostScript encoding of `font' containing glyphs in* `encoding'. */toolbox fn CGFontCreatePostScriptEncoding( CGFontRef font, const CGGlyph *encoding ) = CFDataRef// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Return an array of font table tags in `font'. Each entry in the array is * a four-byte value representing a single TrueType or OpenType font table* tag. */toolbox fn CGFontCopyTableTags( CGFontRef font ) = CFArrayRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return the table in `font' corresponding to `tag', or NULL if no such* table exists. */toolbox fn CGFontCopyTableForTag( CGFontRef font, UInt32 tag ) = CFDataRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*** Keys for the font variation axis dictionary. ***//* The key used to obtain the variation axis name from a variation axis * dictionary. The value obtained with this key is a CFStringRef specifying* the name of the variation axis. */system CFStringRef kCGFontVariationAxisName// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* The key used to obtain the minimum variation axis value from a variation * axis dictionary. The value obtained with this key is a CFNumberRef* specifying the minimum value of the variation axis. */system CFStringRef kCGFontVariationAxisMinValue// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* The key used to obtain the maximum variation axis value from a variation * axis dictionary. The value obtained with this key is a CFNumberRef* specifying the maximum value of the variation axis. */system CFStringRef kCGFontVariationAxisMaxValue// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* The key used to obtain the default variation axis value from a variation * axis dictionary. The value obtained with this key is a CFNumberRef* specifying the default value of the variation axis. */system CFStringRef kCGFontVariationAxisDefaultValue// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Obsolete; don't use these. */begin enum_CGGlyphMin = 0 _CGGlyphMax = _kCGGlyphMaxend enum#endif// _DEFINEDINCARBON