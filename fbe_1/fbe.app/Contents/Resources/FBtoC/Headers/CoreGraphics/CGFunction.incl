/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        5 January 2009*//* CoreGraphics - CGFunction.h * Copyright (c) 1999-2005 Apple Computer, Inc. (unpublished) * All rights reserved.*//* A CGFunction is a general floating-point function evaluator which uses a * user-specified callback to map an arbitrary number of inputs to an* arbitrary number of outputs. */#if ndef _DEFINEDINCARBON#define CGFunctionRef as pointer/* This callback evaluates a function, using `in' as inputs, and places the * result in `out'. `info' is the info parameter passed to the CGFunction* creation functions. *///typedef void (*CGFunctionEvaluateCallback)(void *info, const CGFloat *in, CGFloat *out);#define CGFunctionEvaluateCallback as pointer/* When a function is deallocated, this callback releases `info', the info* parameter passed to the CGFunction creation functions. *///typedef void (*CGFunctionReleaseInfoCallback)(void *info);#define CGFunctionReleaseInfoCallback as pointer/* Callbacks for a CGFunction. * `version' is the version number of this structure. This structure is * version 0. * * `evaluate' is the callback used to evaluate the function. * * `releaseInfo', if non-NULL, is the callback used to release the info * parameter passed to the CGFunction creation functions when the * function is deallocated.*/begin record CGFunctionCallbacksdim as unsigned long                  versiondim as CGFunctionEvaluateCallback     evaluatedim as CGFunctionReleaseInfoCallback  releaseInfoend record/* Return the CFTypeID for CGFunctionRefs. */toolbox fn CGFunctionGetTypeID = CFTypeID// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Create a CGFunction using `callbacks' to evaluate the function. `info' * is passed to each of the callback functions. `domainDimension' is the * number of input values to the function; `rangeDimension' is the number * of output values from the function. * * `domain' is an array of 2M values, where M is the number of input * values. For each k from 0 to M-1, domain[2*k] must be less than or equal * to domain[2*k+1]. The k'th input value (in[k]) will be clipped to lie in * this interval, so that domain[2*k] <= in[k] <= domain[2*k+1]. If * `domain' is NULL, then the input values will not be clipped. However, * it's strongly recommended that `domain' be specified; each domain * interval should specify reasonable values for the minimum and maximum in * that dimension. * * `range' is an array of 2N values, where N is the number of output * values. For each k from 0 to N-1, range[2*k] must be less than or equal * to range[2*k+1]. The k'th output value (out[k]) will be clipped to lie * in this interval, so that range[2*k] <= out[k] <= range[2*k+1]. If * `range' is NULL, then the output values will not be clipped. However, * it's strongly recommended that `range' be specified; each range interval * should specify reasonable values for the minimum and maximum in that * dimension. * * The contents of the callbacks structure is copied, so, for example, a* pointer to a structure on the stack can be passed to this function. */toolbox fn CGFunctionCreate( pointer info, UInt32 domainDimension, const CGFloat *domain, UInt32 rangeDimension, const CGFloat *range, const CGFunctionCallbacks *callbacks ) = CGFunctionRef// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Equivalent to `CFRetain(function)', except it doesn't crash (as CFRetain* does) if `function' is NULL. */toolbox fn CGFunctionRetain( CGFunctionRef function ) = CGFunctionRef// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* Equivalent to `CFRelease(function)', except it doesn't crash (as CFRelease* does) if `function' is NULL. */toolbox CGFunctionRelease( CGFunctionRef function )// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;#endif// _DEFINEDINCARBON