/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        4 January 2009*//* CoreGraphics - CGGeometry.h * Copyright (c) 1998-2006 Apple Computer, Inc. * All rights reserved.*/include "CoreGraphics:CGBase.incl"#if ndef _DEFINEDINCARBON/* Points. */begin record CGPointdim as CGFloat  xdim as CGFloat  yend record// typedef struct CGPoint CGPoint;/* Sizes. */begin record CGSizedim as CGFloat  widthdim as CGFloat  heightend record// typedef struct CGSize CGSize;/* Rectangles. */begin record CGRectdim as CGPoint  origindim as CGSize   sizeend record// typedef struct CGRect CGRect;/* Rectangle edges. */system UInt32 CGRectMinXEdgesystem UInt32 CGRectMinYEdgesystem UInt32 CGRectMaxXEdgesystem UInt32 CGRectMaxYEdge#define CGRectEdge as UInt32/* The "zero" point -- equivalent to CGPointMake(0, 0). */ system CGPoint CGPointZero/* The "zero" size -- equivalent to CGSizeMake(0, 0). */ system CGSize CGSizeZero/* The "zero" rectangle -- equivalent to CGRectMake(0, 0, 0, 0). */ system CGRect CGRectZero/* The "empty" rect. This is the rectangle returned when, for example, we * intersect two disjoint rectangles. Note that the null rect is not the* same as the zero rect. */system CGRect CGRectNull/* The infinite rectangle. */system CGRect CGRectInfinite// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Make a point from `(x, y)'. */toolbox fn CGPointMake( CGFloat x, CGFloat y ) = CGPoint/* Make a size from `(width, height)'. */toolbox fn CGSizeMake( CGFloat width, CGFloat height ) = CGSize/* Make a rect from `(x, y; width, height)'. */toolbox fn CGRectMake( CGFloat x, CGFloat y, CGFloat width, CGFloat height ) = CGRect/* Return the leftmost x-value of `rect'. */toolbox fn CGRectGetMinX( CGRect rect ) = CGFloat/* Return the midpoint x-value of `rect'. */toolbox fn CGRectGetMidX( CGRect rect ) = CGFloat/* Return the rightmost x-value of `rect'. */toolbox fn CGRectGetMaxX( CGRect rect ) = CGFloat/* Return the bottommost y-value of `rect'. */toolbox fn CGRectGetMinY( CGRect rect ) = CGFloat/* Return the midpoint y-value of `rect'. */toolbox fn CGRectGetMidY( CGRect rect ) = CGFloat/* Return the topmost y-value of `rect'. */toolbox fn CGRectGetMaxY( CGRect rect ) = CGFloat/* Return the width of `rect'. */toolbox fn CGRectGetWidth( CGRect rect ) = CGFloat/* Return the height of `rect'. */toolbox fn CGRectGetHeight( CGRect rect ) = CGFloat/* Return true if `point1' and `point2' are the same, false otherwise. */toolbox fn CGPointEqualToPoint( CGPoint point1, CGPoint point2 ) = Boolean/* Return true if `size1' and `size2' are the same, false otherwise. */toolbox fn CGSizeEqualToSize( CGSize size1, CGSize size2 ) = Boolean/* Return true if `rect1' and `rect2' are the same, false otherwise. */toolbox fn CGRectEqualToRect( CGRect rect1, CGRect rect2 ) = Boolean/* Standardize `rect' -- i.e., convert it to an equivalent rect which has* positive width and height. */toolbox fn CGRectStandardize( CGRect rect ) = CGRect/* Return true if `rect' is empty (that is, if it has zero width or* height), false otherwise. A null rect is defined to be empty. */toolbox fn CGRectIsEmpty( CGRect rect ) = Boolean/* Return true if `rect' is the null rectangle, false otherwise. */toolbox fn CGRectIsNull( CGRect rect ) = Boolean/* Return true if `rect' is the infinite rectangle, false otherwise. */toolbox fn CGRectIsInfinite( CGRect rect ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;/* Inset `rect' by `(dx, dy)' -- i.e., offset its origin by `(dx, dy)', and* decrease its size by `(2*dx, 2*dy)'. */toolbox fn CGRectInset( CGRect rect, CGFloat dx, CGFloat dy ) = CGRect/* Expand `rect' to the smallest rect containing it with integral origin* and size. */toolbox fn CGRectIntegral( CGRect rect ) = CGRect/* Return the union of `r1' and `r2'. */toolbox fn CGRectUnion( CGRect r1, CGRect r2 ) = CGRect/* Return the intersection of `r1' and `r2'. This may return a null* rect. */toolbox fn CGRectIntersection( CGRect r1, CGRect r2 ) = CGRect/* Offset `rect' by `(dx, dy)'. */toolbox fn CGRectOffset( CGRect rect, CGFloat dx, CGFloat dy ) = CGRect/* Make two new rectangles, `slice' and `remainder', by dividing `rect' * with a line that's parallel to one of its sides, specified by `edge' -- * either `CGRectMinXEdge', `CGRectMinYEdge', `CGRectMaxXEdge', or * `CGRectMaxYEdge'. The size of `slice' is determined by `amount', which* measures the distance from the specified edge. */toolbox CGRectDivide( CGRect rect, CGRect *slice, CGRect *remainder, CGFloat amount, CGRectEdge edge )/* Return true if `point' is contained in `rect', false otherwise. */toolbox fn CGRectContainsPoint( CGRect rect, CGPoint point ) = Boolean/* Return true if `rect2' is contained in `rect1', false otherwise. `rect2' * is contained in `rect1' if the union of `rect1' and `rect2' is equal to* `rect1'. */toolbox fn CGRectContainsRect( CGRect rect1, CGRect rect2 ) = Boolean/* Return true if `rect1' intersects `rect2', false otherwise. `rect1' * intersects `rect2' if the intersection of `rect1' and `rect2' is not the* null rect. */toolbox fn CGRectIntersectsRect( CGRect rect1, CGRect rect2 ) = Boolean/*** Persistent representations. ***//* Return a dictionary representation of `point'. */toolbox fn CGPointCreateDictionaryRepresentation( CGPoint point ) = CFDictionaryRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Make a CGPoint from the contents of `dict' (presumably returned earlier * from `CGPointCreateDictionaryRepresentation') and store the value in* `point'. Returns true on success; false otherwise. */toolbox fn CGPointMakeWithDictionaryRepresentation( CFDictionaryRef dict, CGPoint *point ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return a dictionary representation of `size'. */toolbox fn CGSizeCreateDictionaryRepresentation( CGSize size ) = CFDictionaryRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Make a CGSize from the contents of `dict' (presumably returned earlier * from `CGSizeCreateDictionaryRepresentation') and store the value in* `size'. Returns true on success; false otherwise. */toolbox fn CGSizeMakeWithDictionaryRepresentation( CFDictionaryRef dict, CGSize *size ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Return a dictionary representation of `rect'. */toolbox fn CGRectCreateDictionaryRepresentation( CGRect ) = CFDictionaryRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* Make a CGRect from the contents of `dict' (presumably returned earlier * from `CGRectCreateDictionaryRepresentation') and store the value in* `rect'. Returns true on success; false otherwise. */toolbox fn CGRectMakeWithDictionaryRepresentation( CFDictionaryRef dict, CGRect *rect ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;#endif// _DEFINEDINCARBON