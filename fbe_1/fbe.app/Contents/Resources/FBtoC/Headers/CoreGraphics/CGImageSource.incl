include "Tlbx CoreGraphics.incl"// CGImageSource.hbegin enum_kCGImageStatusUnexpectedEOF = -5 _kCGImageStatusInvalidData   = -4 _kCGImageStatusUnknownType   = -3 _kCGImageStatusReadingHeader = -2 _kCGImageStatusIncomplete    = -1 _kCGImageStatusComplete      = 0end enum#if ndef _DEFINEDINCARBON#define CGImageSourceStatus as UInt32#define CGImageSourceRef as pointer // to struct CGImageSource#endif/** Keys for the options dictionary when creating a CGImageSourceRef. **//* Specifies the "best guess" of the type identifier for the format of the * image source file. If specified, the value of this key must be a * CFStringRef. For more information about type identifiers, see "UTType.h"* in the Application Services framework. */system CFStringRef kCGImageSourceTypeIdentifierHint /** Keys for the options dictionary of "CGImageSourceCopyPropertiesAtIndex"** and "CGImageSourceCreateImageAtIndex". **//* Specifies whether the image should be cached in a decoded form. The * value of this key must be a CFBooleanRef; the default value is* kCFBooleanFalse. */system CFStringRef kCGImageSourceShouldCache /* Specifies whether the image should be returned as a floating * point CGImageRef if supported by the file format. Extended * range floating point CGImageRef may require additional * processing to render pleasingly. The value of this key must* be a CFBooleanRef; the default value is kCFBooleanFalse. */system CFStringRef kCGImageSourceShouldAllowFloat /** Keys for the options dictionary of** "CGImageSourceCreateThumbnailAtIndex". **//* Specifies whether a thumbnail should be automatically created for an * image if a thumbnail isn't present in the image source file. The * thumbnail will be created from the full image, subject to the limit * specified by kCGImageSourceThumbnailMaxPixelSize---if a maximum pixel * size isn't specified, then the thumbnail will be the size of the full * image, which probably isn't what you want. The value of this key must be* a CFBooleanRef; the default value of this key is kCFBooleanFalse. */system CFStringRef kCGImageSourceCreateThumbnailFromImageIfAbsent /* Specifies whether a thumbnail should be created from the full image even * if a thumbnail is present in the image source file. The thumbnail will * be created from the full image, subject to the limit specified by * kCGImageSourceThumbnailMaxPixelSize---if a maximum pixel size isn't * specified, then the thumbnail will be the size of the full image, which * probably isn't what you want. The value of this key must be a* CFBooleanRef; the default value of this key is kCFBooleanFalse. */system CFStringRef kCGImageSourceCreateThumbnailFromImageAlways /* Specifies the maximum width and height in pixels of a thumbnail. If * this this key is not specified, the width and height of a thumbnail is * not limited and thumbnails may be as big as the image itself. If* present, this value of this key must be a CFNumberRef. */system CFStringRef kCGImageSourceThumbnailMaxPixelSize /* Specifies whether the thumbnail should be rotated and scaled according * to the orientation and pixel aspect ratio of the full image. The value * of this key must be a CFBooleanRef; the default value of this key is * kCFBooleanFalse. */system CFStringRef kCGImageSourceCreateThumbnailWithTransform /* Return the CFTypeID for CGImageSources. */toolbox fn CGImageSourceGetTypeID = CFTypeID/* Return an array of supported type identifiers. */toolbox fn CGImageSourceCopyTypeIdentifiers = CFArrayRef/* Create an image source reading from the data provider `provider'. The * `options' dictionary may be used to request additional creation options;* see the list of keys above for more information. */toolbox fn CGImageSourceCreateWithDataProvider( CGDataProviderRef provider, CFDictionaryRef options ) = CGImageSourceRef/* Create an image source reading from `data'. The `options' dictionary * may be used to request additional creation options; see the list of keys* above for more information. */toolbox fn CGImageSourceCreateWithData( CFDataRef data, CFDictionaryRef options ) = CGImageSourceRef/* Create an image source reading from `url'. The `options' dictionary may * be used to request additional creation options; see the list of keys* above for more information. */toolbox fn CGImageSourceCreateWithURL( CFURLRef url, CFDictionaryRef options ) = CGImageSourceRef/* Return the type identifier of the image source `isrc'. This type is the * type of the source "container", which is not necessarily the type of the * image(s) in the container. For example, the .icns format supports* embedded JPEG2000 but the source type will be "com.apple.icns". */toolbox fn CGImageSourceGetType( CGImageSourceRef isrc ) = CFStringRef/* Return the number of images (not including thumbnails) in the image* source `isrc'. */toolbox fn CGImageSourceGetCount( CGImageSourceRef isrc ) = long/* Return the properties of the image source `isrc'. These properties * apply to the container in general but not necessarily to any individual* image that it contains. */toolbox fn CGImageSourceCopyProperties( CGImageSourceRef isrc, CFDictionaryRef options ) = CFDictionaryRef/* Return the properties of the image at `index' in the image source * `isrc'. The index is zero-based. The `options' dictionary may be used * to request additional options; see the list of keys above for more* information. */toolbox fn CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, long index, CFDictionaryRef options) = CFDictionaryRef/* Return the image at `index' in the image source `isrc'. The index is * zero-based. The `options' dictionary may be used to request additional* creation options; see the list of keys above for more information. */toolbox fn CGImageSourceCreateImageAtIndex( CGImageSourceRef isrc, long index, CFDictionaryRef options ) = CGImageRef/* Return the thumbnail of the image at `index' in the image source `isrc'. * The index is zero-based. The `options' dictionary may be used to request * additional thumbnail creation options; see the list of keys above for* more information. */toolbox fn CGImageSourceCreateThumbnailAtIndex( CGImageSourceRef isrc, long index, CFDictionaryRef options ) = CGImageRef/* Create an incremental image source. No data is provided at creation * time; it is assumed that data will eventually be provided using * "CGImageSourceUpdateDataProvider" or "CGImageSourceUpdateData". The * `options' dictionary may be used to request additional creation options;* see the list of keys above for more information. */toolbox fn CGImageSourceCreateIncremental( CFDictionaryRef options ) = CGImageSourceRef/* Update the incremental image source `isrc' with new data. The new data * must include all the previous data plus any additional new data. The * `final' parameter should be true when the final set of data is provided;* false otherwise. */toolbox CGImageSourceUpdateData( CGImageSourceRef isrc, CFDataRef data, Boolean final )/* Update the incremental image source `isrc' with a new data provider. * The new data provider must provide all the previous data plus any * additional new data. The `final' parameter should be true when the final* set of data is provided; false otherwise. */toolbox CGImageSourceUpdateDataProvider( CGImageSourceRef isrc, CGDataProviderRef provider, Boolean final )/* Return the overall status of the image source `isrc'. The status is * particularly informative for incremental image sources, but may be used* by clients providing non-incremental data as well. */toolbox fn CGImageSourceGetStatus( CGImageSourceRef isrc ) = CGImageSourceStatus/* Return the current status of the image at `index' in the image source * `isrc'. The index is zero-based. The returned status is particularly * informative for incremental image sources but may used by clients* providing non-incremental data as well. */toolbox fn CGImageSourceGetStatusAtIndex( CGImageSourceRef isrc, long index ) = CGImageSourceStatus