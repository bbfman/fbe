/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        2 January 2009*//* * CTFont.h * CoreText * * Copyright (c) 2006-2007 Apple Inc. All rights reserved. **//*! @header CTFont @abstract The Core Text Font public API. @discussion This header defines the public API and related constants for using the Core Text Font object.*/include "CoreText:CTFontDescriptor.incl"include "CoreText:CTFontTraits.incl"include "Tlbx ATSTypes.incl"#if ndef _DEFINEDINCARBON// ---------------------------------------------------------------------------// Font Types// ---------------------------------------------------------------------------/*! @typedef CTFontRef @abstract The Core Text Font reference. @discussion This is a opaque reference to a core font object.*/#define CTFontRef as pointer// ---------------------------------------------------------------------------// Font Constants// ---------------------------------------------------------------------------//  // Name specifier constants/*! @defined kCTFontCopyrightNameKey @abstract The name specifier for the copyright name.*/system CFStringRef kCTFontCopyrightNameKey/*! @defined kCTFontFamilyNameKey @abstract The name specifier for the family name.*/system CFStringRef kCTFontFamilyNameKey/*! @defined kCTFontSubFamilyNameKey @abstract The name specifier for the subfamily name.*/system CFStringRef kCTFontSubFamilyNameKey/*! @defined kCTFontStyleNameKey @abstract The name specifier for the style name.*/system CFStringRef kCTFontStyleNameKey/*! @defined kCTFontUniqueNameKey @abstract The name specifier for the unique name. @discussion Note that this name is often not unique and should not be  assumed to be truly unique.*/system CFStringRef kCTFontUniqueNameKey/*! @defined kCTFontFullNameKey @abstract The name specifier for the full name.*/system CFStringRef kCTFontFullNameKey/*! @defined kCTFontVersionNameKey @abstract The name specifier for the version name.*/system CFStringRef kCTFontVersionNameKey/*! @defined kCTFontPostScriptNameKey @abstract The name specifier for the Postscript name.*/system CFStringRef kCTFontPostScriptNameKey/*! @defined kCTFontTrademarkNameKey @abstract The name specifier for the trademark name.*/system CFStringRef kCTFontTrademarkNameKey/*! @defined kCTFontManufacturerNameKey @abstract The name specifier for the manufacturer name.*/system CFStringRef kCTFontManufacturerNameKey/*! @defined kCTFontDesignerNameKey @abstract The name specifier for the designer name.*/system CFStringRef kCTFontDesignerNameKey/*! @defined kCTFontDescriptionNameKey @abstract The name specifier for the description name.*/system CFStringRef kCTFontDescriptionNameKey/*! @defined kCTFontVendorURLNameKey @abstract The name specifier for the vendor url name.*/system CFStringRef kCTFontVendorURLNameKey/*! @defined kCTFontDesignerURLNameKey @abstract The name specifier for the designer url name.*/system CFStringRef kCTFontDesignerURLNameKey/*! @defined kCTFontLicenseNameKey @abstract The name specifier for the license name.*/system CFStringRef kCTFontLicenseNameKey/*! @defined kCTFontLicenseURLNameKey @abstract The name specifier for the license url name.*/system CFStringRef kCTFontLicenseURLNameKey/*! @defined kCTFontSampleTextNameKey @abstract The name specifier for the sample text name string.*/system CFStringRef kCTFontSampleTextNameKey/*! @defined kCTFontPostScriptCIDNameKey @abstract The name specifier for the Postscript CID name.*/system CFStringRef kCTFontPostScriptCIDNameKey// ---------------------------------------------------------------------------// Font Creation// ---------------------------------------------------------------------------/*! @function CTFontCreateWithName @abstract Returns a new font reference for the given name.  @param name  The font name for which you wish to create a new font reference.  A valid PostScript name is preferred, although other font name  types will be matched in a fallback manner.  @param size  The point size for the font reference. If 0.0 is specified the default font size of 12.0 will be used.  @param matrix The transformation matrix for the font. If unspecified, the identity matrix will be used. Optional.  @result This function will return a CTFontRef that best matches the  name provided with size and matrix attributes. The name parameter is the only required parameters, and default values will be used for unspecified parameters. A best match will be found if all  parameters cannot be matched identically.*/toolbox fn CTFontCreateWithName( CFStringRef name, CGFloat size, const CGAffineTransform *matrix ) = CTFontRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCreateWithFontDescriptor @abstract Returns a new font reference that best matches the font  descriptor.  @param descriptor A font descriptor containing attributes that specify the  requested font. @param size  The point size for the font reference. If 0.0 is specified the default font size of 12.0 will be used.  @param matrix The transformation matrix for the font. If unspecified, the identity matrix will be used. Optional. @result This function will return a CTFontRef that best matches the  attributes provided with the font descriptor. The size and  matrix parameters will override any specified in the font descriptor, unless they are unspecified. A best match font will always be returned, and default values will be used for any unspecified.*/toolbox fn CTFontCreateWithFontDescriptor( CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix ) = CTFontRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @enum UI Type constants @abstract These constants represent the specific user interface purpose to specify for font creation. @discussion Use these constants with CTFontCreateUIFontForLanguage to indicate the intended user interface usage of the font reference to be created.*/begin enum_kCTFontNoFontType                     = -1_kCTFontUserFontType                   = 0 _kCTFontUserFixedPitchFontType         = 1 _kCTFontSystemFontType                 = 2 _kCTFontEmphasizedSystemFontType       = 3 _kCTFontSmallSystemFontType            = 4 _kCTFontSmallEmphasizedSystemFontType  = 5 _kCTFontMiniSystemFontType             = 6 _kCTFontMiniEmphasizedSystemFontType   = 7 _kCTFontViewsFontType                  = 8 _kCTFontApplicationFontType            = 9 _kCTFontLabelFontType                  = 10 _kCTFontMenuTitleFontType              = 11 _kCTFontMenuItemFontType               = 12 _kCTFontMenuItemMarkFontType           = 13 _kCTFontMenuItemCmdKeyFontType         = 14 _kCTFontWindowTitleFontType            = 15 _kCTFontPushButtonFontType             = 16 _kCTFontUtilityWindowTitleFontType     = 17 _kCTFontAlertHeaderFontType            = 18 _kCTFontSystemDetailFontType           = 19 _kCTFontEmphasizedSystemDetailFontType = 20 _kCTFontToolbarFontType                = 21 _kCTFontSmallToolbarFontType           = 22 _kCTFontMessageFontType                = 23 _kCTFontPaletteFontType                = 24 _kCTFontToolTipFontType                = 25 _kCTFontControlContentFontType         = 26end enum#define CTFontUIFontType as UInt32/*! @function CTFontCreateUIFontForLanguage @abstract Returns the special UI font for the given language and UI type.  @param uiType A uiType constant specifying the intended UI use for the requested font reference.  @param size  The point size for the font reference. If 0.0 is specified the default size for the requested uiType is used.  @param language Language specifier string to select a font for a particular localization. If unspecified the current system language is used. The format of the  language identifier should conform to the BCP 47 standard.  @result This function returns the correct font for various UI uses. The only required parameter is the uiType selector, unspecified optional parameters will use default values.*/toolbox fn CTFontCreateUIFontForLanguage( CTFontUIFontType uiType, CGFloat size, CFStringRef language ) = CTFontRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCreateCopyWithAttributes @abstract Returns a new font with additional attributes based on the original font.  @param font Original font reference to base new font on.  @param size  The point size for the font reference. If 0.0 is specified the original font's size will be preserved.  @param matrix The transformation matrix for the font. If unspecified, the original font matrix will be preserved. Optional.  @param attributes A font descriptor containing additional attributes that the new font should contain.   @result Returns a new font reference converted from the original with the specified attributes. This function provides a mechanism to  quickly change attributes on a given font reference in response to user actions. For instance the size can be change in response to a user manipulating a size slider.*/toolbox fn CTFontCreateCopyWithAttributes( CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes ) = CTFontRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCreateCopyWithSymbolicTraits @abstract Returns a new font based on the original font with the specified symbolic traits.  @param font Original font reference to base new font on.  @param size  The point size for the font reference. If 0.0 is specified the original font's size will be preserved.  @param matrix The transformation matrix for the font. If unspecified, the original font matrix will be preserved. Optional.  @param symTraitValue The value of the symbolic traits. This bitfield is used to indicate  the desired value for the traits specified by the symTraitMask parameter. Used in conjuction they can allow for trait removal as well as addition.  @param symTraitMask The mask bits of the symbolic traits. This bitfield is used to indicate the traits that should be changed.  @result Returns a new font reference in the same family with the given  symbolic traits. NULL if none found in the system.*/ toolbox fn CTFontCreateCopyWithSymbolicTraits( CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontSymbolicTraits symTraitValue, CTFontSymbolicTraits symTraitMask ) = CTFontRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCreateCopyWithFamily @abstract Returns a new font int the specified family based on the traits of the original font.  @param font Original font reference to base new font on.  @param size  The point size for the font reference. If 0.0 is specified the original font's size will be preserved.  @param matrix The transformation matrix for the font. If unspecified, the original font matrix will be preserved. Optional.  @param family The name of the desired family.  @result Returns a new font reference with the original traits in the  given family. NULL if non found in the system.*/ toolbox fn CTFontCreateCopyWithFamily( CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CFStringRef family ) = CTFontRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// Font Cascading// ---------------------------------------------------------------------------/*! @function CTFontCreateForString @abstract Returns a new font reference that can best map the given string  range based on the current font.  @param currentFont The current font that contains a valid cascade list.  @param string A unicode string containing characters that cannot be encoded by the current font.  @param range A CFRange specifying the range of the string that needs to be mapped. @result This function returns the best substitute font from the cascade list of the current font that can encode the specified string range. If the current font is capable of encoding the string range then it will be retained and returned.*/toolbox fn CTFontCreateForString( CTFontRef currentFont, CFStringRef string, CFRange range ) = CTFontRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// Font Accessors// ---------------------------------------------------------------------------/*! @function CTFontCopyFontDescriptor @abstract Returns the normalized font descriptors for the given font reference.  @param font The font reference.  @result This function returns a normalized font descriptor for a font.  The font descriptor contains enough information to recreate this font at a later time.*/toolbox fn CTFontCopyFontDescriptor( CTFontRef font ) = CTFontDescriptorRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyAttribute @abstract Returns the value associated with an arbitrary attribute.  @param font The font reference.  @param attribute The requested attribute.  @result This function returns a retained reference to an arbitrary  attribute. If the requested attribute is not present, NULL is  returned. Refer to the attribute definitions for documentation as to how each attribute is packaged as a CFType.*/toolbox fn CTFontCopyAttribute( CTFontRef font, CFStringRef attribute ) = CFTypeRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetSize @abstract Returns the point size of the font reference. @param font The font reference.  @result This function returns the point size of the given font reference. This is the point size provided when the font was created.*/toolbox fn CTFontGetSize( CTFontRef font ) = CGFloat// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetMatrix @abstract Returns the transformation matrix of the font. @param font The font reference.  @result This function returns the transformation matrix for this given font reference. This is the matrix that was provided when the font was created.*/toolbox fn CTFontGetMatrix( CTFontRef font ) = CGAffineTransform// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetSymbolicTraits @abstract Returns the symbolic font traits. @param font The font reference.  @result This function returns the symbolic traits of the font. This is  equivalent to the kCTFontSymbolicTrait of traits dictionary. See CTFontTraits.h for a definition of the font traits.*/toolbox fn CTFontGetSymbolicTraits( CTFontRef font ) = CTFontSymbolicTraits// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyTraits @abstract Returns the font traits dictionary. @param font The font reference.  @result This function returns a retained reference to the font traits dictionary. Individual traits can be accessed with the trait key constants. See CTFontTraits.h for a definition of the font  traits.*/toolbox fn CTFontCopyTraits( CTFontRef font ) = CFDictionaryRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// Font Names// ---------------------------------------------------------------------------/*! @function CTFontCopyPostscriptName @abstract Returns a the Postscript name. @param font The font reference.  @result This function returns a retained reference to the Postscript  name of the font.*/toolbox fn CTFontCopyPostScriptName( CTFontRef font ) = CFStringRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyFamilyName @abstract Returns the family name.  @param font The font reference.  @result This function returns a retained reference to the family name of the font.*/toolbox fn CTFontCopyFamilyName( CTFontRef font ) = CFStringRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyFullName @abstract Returns the display name. @param font The font reference.  @result This function returns a retained reference to the full name  of the font.*/toolbox fn CTFontCopyFullName( CTFontRef font ) = CFStringRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyDisplayName @abstract Returns the display name.  @param font The font reference.  @result This function returns a retained reference to the localized display name  of the font.*/toolbox fn CTFontCopyDisplayName( CTFontRef font ) = CFStringRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyName @abstract Returns a reference to the requested name. @param font The font reference.  @param nameKey The name specifier. See name specifier constants.  @result This function creates the requested name for the font. If the  font does not have an entry for the requested name, NULL will be returned. The Unicode version of the name will be preferred, otherwise the first available will be used.*/toolbox fn CTFontCopyName( CTFontRef font, CFStringRef nameKey ) = CFStringRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyLocalizedName @abstract Returns a reference to a localized font name. @param font The font reference.  @param nameKey The name specifier. See name specifier constants.  @param language Pointer to a CFStringRef to receive the language string of the  returned name string. The format of the language identifier will conform to the BCP 47 standard.  @result This function returns a specific localized name from the font reference. The name is localized based on the user's global language precedence. If the font does not have an entry for the  requested name, NULL will be returned. The matched language will be returned in the caller's buffer.*/toolbox fn CTFontCopyLocalizedName( CTFontRef font, CFStringRef nameKey, CFStringRef *language ) = CFStringRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// Font Encoding// ---------------------------------------------------------------------------/*! @function CTFontCopyCharacterSet @abstract Returns the Unicode character set of the font. @param font The font reference.  @result This function returns a retained reference to the font's  character set. This character set covers the nominal referenced by the font's unicode 'cmap table.*/toolbox fn CTFontCopyCharacterSet( CTFontRef font ) = CFCharacterSetRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetStringEncoding @abstract Returns the best string encoding for legacy format support. @param font The font reference.  @result This function returns the best string encoding for the font.*/toolbox fn CTFontGetStringEncoding( CTFontRef font ) = CFStringEncoding// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopySupportedLanguages @abstract Returns an array of languages supported by the font. @param font The font reference.  @result This function returns a retained reference to an array of  languages supported by the font. The array contains language identifier strings as CFStringRefs. The format of the language  identifier will conform to the BCP 47 standard.*/toolbox fn CTFontCopySupportedLanguages( CTFontRef font ) = CFArrayRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetGlyphsForCharacters @abstract This function provides basic Unicode encoding for the font. An array of Unicodes is encoding to CGGlyph ids for the font.  @param font The font reference.  @param characters An array of Unicode characters.  @param glyphs A pointer to a buffer to receive the glyph ids.  @param count The capacity of the characters and glyphs arrays.  @result This function returns a boolean to indicate successful encoding of all provided glyphs. A return of true indicates that the  font could encode all Unicodes, false indicates that the font could not encode some or all of the Unicodes. Glyph ids are passed back via the glyphs parameter. If a glyph could not be encoded a  value of 0 will be passed back and the function will return false.  It is the responsibility of the caller to handle the Unicode  properties of the input characters.*///toolbox fn CTFontGetGlyphsForCharacters( CTFontRef font, const UniChar characters[], CGGlyph glyphs[], CFIndex count ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;toolbox fn CTFontGetGlyphsForCharacters( CTFontRef font, pointer characters, pointer glyphs, CFIndex count ) = Boolean // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// Font Metrics// ---------------------------------------------------------------------------/*! @function CTFontGetAscent @abstract Returns the scaled font ascent metric. @param font The font reference.  @result This function returns the font ascent metric scaled based on the point size and matrix of the font reference.*/toolbox fn CTFontGetAscent( CTFontRef font ) = CGFloat // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetDescent @abstract Returns the scaled font descent metric. @param font The font reference.  @result This function returns the font descent metric scaled based on the point size and matrix of the font reference.*/toolbox fn CTFontGetDescent( CTFontRef font ) = CGFloat // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetLeading @abstract Returns the scaled font leading metric. @param font The font reference.  @result This function returns the font leading metric scaled based on the point size and matrix of the font reference.*/toolbox fn CTFontGetLeading( CTFontRef font ) = CGFloat // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;//  /*! @function CTFontGetUnitsPerEm @abstract Returns the units per em metric. @param font The font reference.  @result This function returns the units per em of the font.*/toolbox fn CTFontGetUnitsPerEm( CTFontRef font ) = unsigned long // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetGlyphCount @abstract Returns the number of glyphs.  @param font The font reference.  @result This function returns the number of glyphs in the font.*/toolbox fn CTFontGetGlyphCount( CTFontRef font ) = CFIndex // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetBoundingBox @abstract Returns the scaled bounding box. @param font The font reference.  @result This will return the design bounding box of the font, which is the rectangle defined by xMin, yMin, xMax, and yMax values for  the font.*/toolbox fn CTFontGetBoundingBox( CTFontRef font ) = CGRect // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetUnderlinePosition @abstract Returns the scaled underline position.  @param font The font reference.  @result This function returns the font underline position metric scaled based on the point size and matrix of the font reference.*/toolbox fn CTFontGetUnderlinePosition( CTFontRef font ) = CGFloat // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetUnderlineThickness @abstract Returns the scaled underline thickness metric.  @param font The font reference.  @result This function returns the font underline thickness metric scaled based on the point size and matrix of the font reference.*/toolbox fn CTFontGetUnderlineThickness( CTFontRef font ) = CGFloat // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetSlantAngle @abstract Returns the slant angle of the font.  @param font The font reference.  @result This function returns the transformed slant angle of the font. This is equivalent to the italic or caret angle with any skew  from the tranformation matrix applied. */toolbox fn CTFontGetSlantAngle( CTFontRef font ) = CGFloat // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetCapHeight @abstract Returns the cap height metric.  @param font The font reference.  @result This function returns the font cap height metric scaled based on the point size and matrix of the font reference.*/toolbox fn CTFontGetCapHeight( CTFontRef font ) = CGFloat // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetXHeight @abstract Returns the X height metric.  @param font The font reference.  @result This function returns the font X height metric scaled based on the point size and matrix of the font reference.*/toolbox fn CTFontGetXHeight( CTFontRef font ) = CGFloat // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// Font Glyphs// ---------------------------------------------------------------------------/*! @function CTFontGetGlyphWithName @abstract Returns the CGGlyph for the specified glyph name. @param font The font reference.  @param glyphName The glyph name as a CFString.  @result This function returns the glyph id for the named glyph as a CGGlyph which can be used with any of the subsequent glyph data accessors or directly with Core Graphics. If the glyph name is not recognized returns the .NotDef glyph id.*/toolbox fn CTFontGetGlyphWithName( CTFontRef font, CFStringRef glyphName ) = CGGlyph // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetBoundingRectsForGlyphs @abstract Calculates the bounding rects for an array of glyphs and returns the overall bounding rect for the run.  @param font The font reference.  @param orientation The intended drawing orientation of the glyphs. Used to determined which glyph metrics to return.  @param glyphs An array of count number of glyphs.  @param boundingRect An array of count number of CGRects to receive the computed glyph rects. Can be NULL, in which case only the overall bounding rect is calculated.  @param count The capacity of the glyphs and boundingRects buffers.  @result This function returns the overall bounding rectangle for an array or run of glyphs. The bounding rects of the individual glyphs are returned through the boundingRects parameter. These are the design metrics from the font transformed in font space.*///toolbox fn CTFontGetBoundingRectsForGlyphs( CTFontRef font, CTFontOrientation orientation, const CGGlyph glyphs[], CGRect boundingRects[], CFIndex count ) = CGRect// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;toolbox fn CTFontGetBoundingRectsForGlyphs( CTFontRef font, CTFontOrientation orientation, pointer glyphs, pointer boundingRects, CFIndex count ) = CGRect // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetAdvancesForGlyphs @abstract Calculates the advances for an array of glyphs and returns the summed advance.  @param font The font reference.  @param orientation The intended drawing orientation of the glyphs. Used to determined which glyph metrics to return.  @param glyphs An array of count number of glyphs.  @param advances An array of count number of CGSize to receive the computed glyph advances. Can be NULL, in which case only the overall advacnce is calculated.  @param count The capacity of the glyphs and advances buffers.  @result This function returns the summed glyph advance of an array of glyphs. Individual glyph advances are passed back via the advances parameter. These are the ideal metrics for each glyph scaled and transformed in font space.*///toolbox fn CTFontGetAdvancesForGlyphs( CTFontRef font, CTFontOrientation orientation, const CGGlyph glyphs[], CGSize advances[], CFIndex count ) = single// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;toolbox fn CTFontGetAdvancesForGlyphs( CTFontRef font, CTFontOrientation orientation, pointer glyphs, pointer advances, CFIndex count ) = single // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetVerticalTranslationsForGlyphs @abstract Calculates the offset from the default (horizontal) origin to the vertical origin for an array of glyphs.  @param font The font reference.  @param glyphs An array of count number of glyphs.  @param translations An array of count number of CGSize to receive the computed origin offsets.  @param count The capacity of the glyphs and translations buffers.*/toolbox CTFontGetVerticalTranslationsForGlyphs( CTFontRef font, const CGGlyph glyphs, CGSize translations, CFIndex count ) // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCreatePathForGlyph @abstract Creates a path for the specified glyph.  @discussion Creates a path from the outlines of the glyph for the specified font.  The path will reflect the font point size, matrix, and transform parameter, in that order. The transform parameter will most  commonly be used to provide a translation to the desired glyph origin.  @param font The font reference.  @param glyph The glyph.  @param transform An affine transform applied to the path. Can be NULL. If NULL,  CGAffineTransformIdentity will be used.   @result A CGPath reference containing the glyph outlines, NULL on error.  Must be released by caller. */toolbox fn CTFontCreatePathForGlyph( CTFontRef font, CGGlyph glyph, const CGAffineTransform * transform ) = CGPathRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;//  // ---------------------------------------------------------------------------// Font Variations// ---------------------------------------------------------------------------/*! @defined kCTFontVariationAxisIdentifierKey @abstract Key to get the variation axis identifier. @discussion This key is used with a variation axis dictionary to get the axis identifier value as a CFNumberRef.*/system CFStringRef kCTFontVariationAxisIdentifierKey/*! @defined kCTFontVariationAxisMinimumValueKey @abstract Key to get the variation axis minimum value. @discussion This key is used with a variation axis dictionary to get the  minimum axis value as a CFNumberRef.*/system CFStringRef kCTFontVariationAxisMinimumValueKey/*! @defined kCTFontVariationAxisMaximumValueKey @abstract Key to get the variation axis maximum value. @discussion This key is used with a variation axis dictionary to get the  maximum axis value as a CFNumberRef.*/system CFStringRef kCTFontVariationAxisMaximumValueKey/*! @defined kCTFontVariationAxisDefaultValueKey @abstract Key to get the variation axis default value. @discussion This key is used with a variation axis dictionary to get the  default axis value as a CFNumberRef.*/system CFStringRef kCTFontVariationAxisDefaultValueKey/*! @defined kCTFontVariationAxisNameKey @abstract Key to get the variation axis name string. @discussion This key is used with a variation axis dictionary to get the  localized variation axis name.*/system CFStringRef kCTFontVariationAxisNameKey/*! @function CTFontCopyVariationAxes @abstract Returns an array of variation axes. @param font The font reference.  @result This function returns an array of variation axes dictionaries.  Each variation axis dictiontionary contains the five variation axis keys above. */toolbox fn CTFontCopyVariationAxes( CTFontRef font ) = CFArrayRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyVariation @abstract Returns a variation dictionary from the font reference. @param font The font reference.  @result This function returns the current variation instance as a dictionary. The keys for each variation correspond to the variation identifier obtained via kCTVariationAxisIdentifierKey  which represents the axis' four character code as a CFNumber.*/toolbox fn CTFontCopyVariation( CTFontRef font ) = CFDictionaryRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// Font Features// ---------------------------------------------------------------------------/*! @defined kCTFontFeatureTypeIdentifierKey @abstract Key to get the font feature type value. @discussion This key can be used with a font feature dictionary to get the type identifer as a CFNumberRef.*/system CFStringRef kCTFontFeatureTypeIdentifierKey/*! @defined kCTFontFeatureTypeNameKey @abstract Key to get the font feature name. @discussion This key can be used with a font feature dictionary to get the localized type name string as a CFString.*/system CFStringRef kCTFontFeatureTypeNameKey/*! @defined kCTFontFeatureTypeExclusiveKey @abstract Key to get the font feature exclusive setting.  @discussion This key can be used with a font feature dictionary to get the the exclusive setting of the feature as a CFBoolean. The value associated with this key indicates whether the feature selectors associated with this type should be mutually exclusive.*/system CFStringRef kCTFontFeatureTypeExclusiveKey/*! @defined kCTFontFeatureTypeSelectorsKey @abstract Key to get the font feature selectors. @discussion This key can be used with a font feature dictionary to get the  array of font feature selectors as a CFArrayRef. This is an  array of selector dictionaries that contain the values for the following selector keys.*/system CFStringRef kCTFontFeatureTypeSelectorsKey/*! @defined kCTFontFeatureSelectorIdentifierKey @abstract Key to get the font feature selector identifier. @discussion This key can be used with a selector dictionary corresponding to a feature type to obtain the selector identifier value as a CFNumberRef.*/system CFStringRef kCTFontFeatureSelectorIdentifierKey/*! @defined kCTFontFeatureSelectorNameKey @abstract Key to get the font feature selector name. @discussion This key is used with a selector dictionary to get the  localized name string for the selector as a CFStringRef.*/system CFStringRef kCTFontFeatureSelectorNameKey/*! @defined kCTFontFeatureSelectorDefaultKey @abstract Key to get the font feature selector default setting value. @discussion This key is used with a selector dictionary to get the  default indicator for the selector. This value is a CFBooleanRef which if present and true indicates that this selector is the default setting for the current feature type.*/system CFStringRef kCTFontFeatureSelectorDefaultKey/*! @defined kCTFontFeatureSelectorSettingKey @abstract Key to get or specify the current feature setting. @discussion This key is used with a selector dictionary to get or  specify the current setting for the selector. This value is a CFBooleanRef to indicate whether this selector is on, or off.  If this key is not present, the default setting is used.*/system CFStringRef kCTFontFeatureSelectorSettingKey/*! @function CTFontCopyFeatures @abstract Returns an array of font features  @param font The font reference.  @result This function returns an array of font feature dictionaries for  the font reference.*/toolbox fn CTFontCopyFeatures( CTFontRef font ) = CFArrayRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyFeatureSettings @abstract Returns an array of font feature setting tuples  @param font The font reference.  @result This function returns a normalized array of font feature setting  dictionaries. The array will only contain the non-default settings that should be applied to the font, or NULL if the default settings should be used. A setting dictionary is a tuple  of a kCTFontFeatureTypeIdentifierKey key-value pair and a  kCTFontFeatureSelectorIdentifierKey key-value pair. Each setting  dictionary indicates which setting is enabled. It is the caller's  responsibility to handle exclusive and non-exclusive settings as  necessary.*/toolbox fn CTFontCopyFeatureSettings( CTFontRef font ) = CFArrayRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// Conversion// ---------------------------------------------------------------------------/*! @function CTFontCopyGraphicsFont @abstract Returns a CGFontRef and attributes.  @param font The font reference.  @param attributes A pointer to a CTFontDescriptorRef to receive a font descriptor containing additional attribtues. Can be NULL. Must be released by caller.  @result This function returns a CGFontRef for the given font reference. Additional attributes from the font will be passed back as a font descriptor via the attributes parameter. The result must be released by the caller.*/toolbox fn CTFontCopyGraphicsFont( CTFontRef font, CTFontDescriptorRef *attributes ) = CGFontRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCreateWithGraphicsFont @abstract Creates a new font reference from a CGFontRef.  @param graphicsFont A valid CGFontRef.  @param size  The point size for the font reference. If 0.0 is specified the default font size of 12.0 will be used.  @param matrix The transformation matrix for the font. If unspecified, the identity matrix will be used. Optional.  @param attributes A CTFontDescriptorRef containing additional attributes that should be matched. Optional.  @result This function returns a new font reference for an existing  CGFontRef with the specified size, matrix, and additional attributes.*/toolbox fn CTFontCreateWithGraphicsFont( CGFontRef graphicsFont, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes ) = CTFontRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontGetPlatformFont @abstract Returns the ATSFontRef and attributes.  @param font The font reference.  @param attributes A pointer to a CTFontDescriptorRef to receive a font descriptor containing additional attribtues. Can be NULL. Must be released by caller.  @result This function returns a an ATSFontRef for the given font reference. Additional attributes from the font will be passed back as a font descriptor via the attributes parameter.*/toolbox fn CTFontGetPlatformFont( CTFontRef font, CTFontDescriptorRef *attributes ) = ATSFontRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; /*! @function CTFontCreateWithPlatformFont @abstract Creates a new font reference from an ATSFontRef.  @param platformFont A valid ATSFontRef.  @param size  The point size for the font reference. If 0.0 is specified the default font size of 12.0 will be used.  @param matrix The transformation matrix for the font. If unspecified, the identity matrix will be used. Optional.  @param attributes A CTFontDescriptorRef containing additional attributes that should be matched. Optional.  @result This function returns a new font reference for an ATSFontRef with the specified size, matrix, and additional attribtues.*/toolbox fn CTFontCreateWithPlatformFont( ATSFontRef platformFont, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes ) = CTFontRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCreateWithQuickdrawInstance @abstract Returns a font reference for the given Quickdraw instance.  @param name The Quickdraw font name. If zero length, then identifier must be specified.  @param identifier The Quickdraw font identifier. Can be 0, but if so then  name must be specified.  @param style The Quickdraw font style.  @param size  The point size for the font reference. If 0.0 is specified the default size of 12.0 is used.  @result This function returns the best font instance matching the  Quickdraw instance information. This is provided for  compatibility support between Core Text and clients needing to support Quickdraw style font references.*/toolbox fn CTFontCreateWithQuickdrawInstance( ConstStr255Param name, UInt16 identifier, UInt8 style, CGFloat size ) = CTFontRef // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// Font Tables// ---------------------------------------------------------------------------begin enum_kCTFontTableBASE = _"BASE"  // Baseline_kCTFontTableCFF  = _"CFF "  // PostScript font program_kCTFontTableDSIG = _"DSIG"  // Digital signature_kCTFontTableEBDT = _"EBDT"  // Embedded bitmap_kCTFontTableEBLC = _"EBLC"  // Embedded bitmap location_kCTFontTableEBSC = _"EBSC"  // Embedded bitmap scaling_kCTFontTableGDEF = _"GDEF"  // Glyph definition_kCTFontTableGPOS = _"GPOS"  // Glyph positioning_kCTFontTableGSUB = _"GSUB"  // Glyph subsitution_kCTFontTableJSTF = _"JSTF"  // Justification_kCTFontTableLTSH = _"LTSH"  // Linear threshold_kCTFontTableOS2  = _"OS/2"  // OS/2 and Windows specific metrics_kCTFontTablePCLT = _"PCLT"  // PCL 5 data_kCTFontTableVDMX = _"VDMX"  // Vertical device metrics_kCTFontTableVORG = _"VORG"  // Vertical origin_kCTFontTableZapf = _"Zapf"  // Glyph reference_kCTFontTableAcnt = _"acnt"  // Accent attachment_kCTFontTableAvar = _"avar"  // Axis variation_kCTFontTableBdat = _"bdat"  // Bitmap data_kCTFontTableBhed = _"bhed"  // Bitmap font header_kCTFontTableBloc = _"bloc"  // Bitmap location_kCTFontTableBsln = _"bsln"  // Baseline_kCTFontTableCmap = _"cmap"  // Character to glyph mapping_kCTFontTableCvar = _"cvar"  // CVT variation_kCTFontTableCvt  = _"cvt "  // Control value table_kCTFontTableFdsc = _"fdsc"  // Font descriptor_kCTFontTableFeat = _"feat"  // Layout feature_kCTFontTableFmtx = _"fmtx"  // Font metrics_kCTFontTableFpgm = _"fpgm"  // Font program_kCTFontTableFvar = _"fvar"  // Font variation_kCTFontTableGasp = _"gasp"  // Grid-fitting/Scan-conversion_kCTFontTableGlyf = _"glyf"  // Glyph data_kCTFontTableGvar = _"gvar"  // Glyph variation_kCTFontTableHdmx = _"hdmx"  // Horizontal device metrics_kCTFontTableHead = _"head"  // Font header_kCTFontTableHhea = _"hhea"  // Horizontal header_kCTFontTableHmtx = _"hmtx"  // Horizontal metrics_kCTFontTableHsty = _"hsty"  // Horizontal style_kCTFontTableJust = _"just"  // Justification_kCTFontTableKern = _"kern"  // Kerning_kCTFontTableLcar = _"lcar"  // Ligature caret_kCTFontTableLoca = _"loca"  // Index to location_kCTFontTableMaxp = _"maxp"  // Maximum profile_kCTFontTableMort = _"mort"  // Morph_kCTFontTableMorx = _"morx"  // Extended morph_kCTFontTableName = _"name"  // Naming table_kCTFontTableOpbd = _"opbd"  // Optical bounds_kCTFontTablePost = _"post"  // PostScript information_kCTFontTablePrep = _"prep"  // CVT program_kCTFontTableProp = _"prop"  // Properties_kCTFontTableTrak = _"trak"  // Tracking_kCTFontTableVhea = _"vhea"  // Vertical header_kCTFontTableVmtx = _"vmtx" // Vertical metricsend enum#define CTFontTableTag as UInt32begin enum_kCTFontTableOptionNoOptions        = 0 _kCTFontTableOptionExcludeSynthetic = (1 << 0)end enum#define CTFontTableOptions as UInt32/*! @function CTFontCopyAvailableTables @abstract Returns an array of font table tags.  @param font The font reference.  @param options  @result This function returns an array of CTFontTableTag values for the given font and the supplied options. The returned set will contain unboxed values, which may be extracted like so: CTFontTableTag tag = (CTFontTableTag)(uintptr_t)CFArrayGetValueAtIndex(tags, index);*/toolbox fn CTFontCopyAvailableTables( CTFontRef font, CTFontTableOptions options ) = CFArrayRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTFontCopyTable @abstract Returns a reference to the font table data.  @param font The font reference.  @param table The font table identifier as a CTFontTableTag.  @param options  @result This function returns a retained reference to the font table data as CFDataRef. The table data is not actually copied, however the data reference must be released.*/toolbox fn CTFontCopyTable( CTFontRef font, CTFontTableTag table, CTFontTableOptions options ) = CFDataRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// ---------------------------------------------------------------------------// CF Support// ---------------------------------------------------------------------------/*! @function CTFontGetTypeID @abstract Returns the type identifier for Core Text font references. @result The identifier for the opaque type CTFontRef.*/toolbox fn CTFontGetTypeID = CFTypeID // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; #endif// _DEFINEDINCARBON