/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        2 January 2009*//* * CTParagraphStyle.h * CoreText * * Copyright (c) 2004-2007 Apple Inc. All rights reserved. **/#if ndef _DEFINEDINCARBON/* --------------------------------------------------------------------------- *//* Paragraph Style Types *//* --------------------------------------------------------------------------- */#define CTParagraphStyleRef as pointer/*! @function CTParagraphStyleGetTypeID @abstract Returns the CFType of the paragraph style object*/toolbox fn CTParagraphStyleGetTypeID = CFTypeID// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* --------------------------------------------------------------------------- *//* Paragraph Style Values *//* --------------------------------------------------------------------------- *//*! @enum CTTextAlignment @abstract These constants specify text alignment. @constant kCTLeftTextAlignment Text is visually left-aligned. @constant kCTRightTextAlignment Text is visually right-aligned. @constant kCTCenterTextAlignment Text is visually center-aligned. @constant kCTJustifiedTextAlignment Text is fully justified. The last line in a paragraph is naturally aligned. @constant kCTNaturalTextAlignment Use the natural alignment of the text's script.*/begin enum_kCTLeftTextAlignment      = 0 _kCTRightTextAlignment     = 1 _kCTCenterTextAlignment    = 2 _kCTJustifiedTextAlignment = 3 _kCTNaturalTextAlignment   = 4end enum#define CTTextAlignment as UInt8/*! @enum CTLineBreakMode @abstract These constants specify what happens when a line is too long for its frame. @constant kCTLineBreakByWordWrapping Wrapping occurs at word boundaries, unless the word itself doesn't fit on a single line. @constant kCTLineBreakByCharWrapping Wrapping occurs before the first character that doesn't fit. @constant kCTLineBreakByClipping Lines are simply not drawn past the edge of the frame. @constant kCTLineBreakByTruncatingHead Each line is displayed so that the end fits in the frame and the missing text is indicated by some kind of ellipsis glyph. @constant kCTLineBreakByTruncatingTail Each line is displayed so that the beginning fits in the container and the missing text is indicated by some kind of ellipsis glyph. @constant kCTLineBreakByTruncatingMiddle Each line is displayed so that the beginning and end fit in the container and the missing text is indicated by some kind of ellipsis glyph in the middle.*/begin enum_kCTLineBreakByWordWrapping     = 0 _kCTLineBreakByCharWrapping     = 1 _kCTLineBreakByClipping         = 2 _kCTLineBreakByTruncatingHead   = 3 _kCTLineBreakByTruncatingTail   = 4 _kCTLineBreakByTruncatingMiddle = 5end enum#define CTLineBreakMode as UInt8/*! @enum CTWritingDirection @abstract These constants specify the writing direction @constant kCTWritingDirectionNatural The writing direction is algorithmically determined using the Unicode Bidirectional Algorithm rules P2 and P3. @constant kCTWritingDirectionLeftToRight The writing direction is left to right. @constant kCTWritingDirectionRightToLeft The writing direction is right to left.*/begin enum_kCTWritingDirectionNatural     = -1 _kCTWritingDirectionLeftToRight = 0 _kCTWritingDirectionRightToLeft = 1end enum#define CTWritingDirection as SInt8/*! @enum CTParagraphStyleSpecifier @abstract These constants are used to query and modify the CTParagraphStyle object. @discussion Each specifier has a type and a default value associated with it. The type must always be observed when setting or fetching the value from the CTParagraphStyle object. In addition, some specifiers affect the behavior of both the framesetter and the typesetter, and others only affect the behavior of the framesetter; this is also noted below. @constant kCTParagraphStyleSpecifierAlignment The text alignment. Natural text alignment is realized as left or right alignment, depending on the line sweep direction of the first script contained in the paragraph. Type: CTTextAlignment Default: kCTNaturalTextAlignment Application: CTFramesetter @constant kCTParagraphStyleSpecifierFirstLineHeadIndent The distance in points from the leading margin of a frame to the beginning of the paragraph's first line. This value is always nonnegative. Type: CGFloat Default: 0.0 Application: CTFramesetter @constant kCTParagraphStyleSpecifierHeadIndent The distance in points from the leading margin of a text container to the beginning of lines other than the first. This value is always nonnegative. Type: CGFloat Default: 0.0 Application: CTFramesetter @constant kCTParagraphStyleSpecifierTailIndent The distance in points from the margin of a frame to the end of lines. If positive, this value is the distance from the leading margin (for example, the left margin in left-to-right text). If 0 or negative, it's the distance from the trailing margin. Type: CGFloat Default: 0.0 Application: CTFramesetter @constant kCTParagraphStyleSpecifierTabStops The CTTextTab objects, sorted by location, that define the tab stops for the paragraph style. Type: CFArray of CTTextTabRef Default: 12 left-aligned tabs, spaced by 28.0 points Application: CTFramesetter, CTTypesetter @constant kCTParagraphStyleSpecifierDefaultTabInterval The document-wide default tab interval. Tabs after the last specified by kCTParagraphStyleSpecifierTabStops are placed at integer multiples of this distance (if positive). Type: CGFloat Default: 0.0 Application: CTFramesetter, CTTypesetter @constant kCTParagraphStyleSpecifierLineBreakMode The mode that should be used to break lines when laying out the paragraph's text. Type: CTLineBreakMode Default: kCTLineBreakByWordWrapping Application: CTFramesetter @constant kCTParagraphStyleSpecifierLineHeightMultiple The line height multiple. The natural line height of the receiver is multiplied by this factor (if positive) before being constrained by minimum and maximum line height. Type: CGFloat Default: 0.0 Application: CTFramesetter @constant kCTParagraphStyleSpecifierMaximumLineHeight The maximum height that any line in the frame will occupy, regardless of the font size or size of any attached graphic. Glyphs and graphics exceeding this height will overlap neighboring lines. A maximum height of 0 implies no line height limit. This value is always nonnegative. Type: CGFloat Default: 0.0 Application: CTFramesetter @constant kCTParagraphStyleSpecifierMinimumLineHeight The minimum height that any line in the frame will occupy, regardless of the font size or size of any attached graphic. This value is always nonnegative. Type: CGFloat Default: 0.0 Application: CTFramesetter @constant kCTParagraphStyleSpecifierLineSpacing The space in points added between lines within the paragraph (commonly known as leading). This value is always nonnegative. Type: CGFloat Default: 0.0 Application: CTFramesetter @constant kCTParagraphStyleSpecifierParagraphSpacing The space added at the end of the paragraph to separate it from the following paragraph. This value is always nonnegative and is determined by adding the previous paragraph's kCTParagraphStyleSpecifierParagraphSpacing setting and the current paragraph's kCTParagraphStyleSpecifierParagraphSpacingBefore setting. Type: CGFloat Default: 0.0 Application: CTFramesetter @constant kCTParagraphStyleSpecifierParagraphSpacingBefore The distance between the paragraph's top and the beginning of its text content. Type: CGFloat Default: 0.0 Application: CTFramesetter @constant kCTParagraphStyleSpecifierBaseWritingDirection The base writing direction of the lines. Type: CTWritingDirection Default: kCTWritingDirectionNatural Application: CTFramesetter, CTTypesetter*/begin enum_kCTParagraphStyleSpecifierAlignment              = 0 _kCTParagraphStyleSpecifierFirstLineHeadIndent    = 1 _kCTParagraphStyleSpecifierHeadIndent             = 2 _kCTParagraphStyleSpecifierTailIndent             = 3 _kCTParagraphStyleSpecifierTabStops               = 4 _kCTParagraphStyleSpecifierDefaultTabInterval     = 5 _kCTParagraphStyleSpecifierLineBreakMode          = 6 _kCTParagraphStyleSpecifierLineHeightMultiple     = 7 _kCTParagraphStyleSpecifierMaximumLineHeight      = 8 _kCTParagraphStyleSpecifierMinimumLineHeight      = 9 _kCTParagraphStyleSpecifierLineSpacing            = 10 _kCTParagraphStyleSpecifierParagraphSpacing       = 11 _kCTParagraphStyleSpecifierParagraphSpacingBefore = 12 _kCTParagraphStyleSpecifierBaseWritingDirection   = 13                                                   _kCTParagraphStyleSpecifierCount                  = 14end enum#define CTParagraphStyleSpecifier as UInt32/*! @struct CTParagraphStyleSetting @abstract This structure is used to alter the paragraph style. @field spec The specifier of the setting. @field valueSize The size of the value pointed to by the "value" field. This must match the size of the value required by the CTParagraphStyleSpecifier set in the "spec" field. @field value A reference to the value of the setting specified by the "spec" field. The value must be in the proper range for the spec value. The value must also be at least valueSize.*/// typedef struct CTParagraphStyleSetting// {//  CTParagraphStyleSpecifier spec;//  size_t valueSize;//  const void* value;// } CTParagraphStyleSetting;begin record CTParagraphStyleSettingdim as CTParagraphStyleSpecifier   specdim as UInt32                      valueSizedim as pointer                     valueend record/* --------------------------------------------------------------------------- *//* Paragraph Style Creation *//* --------------------------------------------------------------------------- *//*! @function CTParagraphStyleCreate @abstract Creates an immutable paragraph style. @discussion Using this function is the easiest and most efficient way to create a paragraph style. Paragraph styles should be kept immutable for totally lock-free operation. If an invalid paragraph style setting specifier is passed into the "settings" parameter, nothing bad will happen but just don't expect to be able to query for this value. This is to allow backwards compatibility with style setting specifiers that may be introduced in future versions. @param settings The settings that you wish to pre-load the paragraph style with. If you wish to specify the default set of settings, then this parameter may be set to NULL. @param settingCount The number of settings that you have specified in the "settings" parameter. This must be greater than or equal to zero. @result If the paragraph style creation was successful, this function will return a valid reference to an immutable CTParagraphStyle object. Otherwise, this function will return NULL.*/toolbox fn CTParagraphStyleCreate( const CTParagraphStyleSetting* settings, CFIndex settingCount ) = CTParagraphStyleRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/*! @function CTParagraphStyleCreateCopy @abstract Creates an immutable copy of a paragraph style. @param paragraphStyle The style that you wish to copy. This parameter may not be set to NULL. @result If the "paragraphStyle" reference is valid, then this function will return valid reference to an immutable CTParagraphStyle object that is a copy of the one passed into "paragraphStyle".*/toolbox fn CTParagraphStyleCreateCopy( CTParagraphStyleRef paragraphStyle ) = CTParagraphStyleRef// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* --------------------------------------------------------------------------- *//* Paragraph Style Access *//* --------------------------------------------------------------------------- *//*! @function CTParagraphStyleGetValueForSpecifier @abstract Obtains the current value for a single setting specifier. @discussion This function will return the current value of the specifier whether or not the user had actually set it. If the user has not set it, this function will return the default value. If an invalid paragraph style setting specifier is passed into the "spec" parameter, nothing bad will happen and the buffer value will simply be zeroed out. This is to allow backwards compatibility with style setting specifier that may be introduced in future versions. @param paragraphStyle The paragraph style that you wish to get the value from. This parameter may not be set to NULL. @param spec The setting specifier that you want to get the value for. @param valueBufferSize The size of the buffer pointed to by the "valueBuffer" parameter. This value must be at least as large as the size the required by the CTParagraphSpecifier value set in the "spec" parameter. @param valueBuffer The buffer where the requested setting value will be written upon successful completion. The buffer's size needs to be at least as large as the value passed into "valueBufferSize". This parameter is required and may not be set to NULL. @result This function will return "true" if the valueBuffer had been successfully filled. Otherwise, this function will return false, indicating that one or more of the parameters is not valid.*/toolbox fn CTParagraphStyleGetValueForSpecifier( CTParagraphStyleRef paragraphStyle, CTParagraphStyleSpecifier spec, UInt32 valueBufferSize, pointer valueBuffer ) = Boolean// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;#endif// _DEFINEDINCARBON