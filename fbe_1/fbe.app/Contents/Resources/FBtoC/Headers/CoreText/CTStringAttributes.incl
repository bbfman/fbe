/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------        2 January 2009*//* * CTStringAttributes.h * CoreText * * Copyright (c) 2004-2007 Apple Inc. All rights reserved. **/#if ndef _DEFINEDINCARBON/* The purpose of this file is to define all the attributes to which CoreText will respond when placed in a CFAttributedString. These are left out of other header file on purpose in order to avoid layering problems. This file is allowed to include any other headerfile it wants to. *//* --------------------------------------------------------------------------- *//* CFAttributedStringRef Attribute Prototypes *//* --------------------------------------------------------------------------- *//*! @const kCTFontAttributeName @abstract The font. @discussion Value must be a CTFontRef. Default is Helvetica 12.*/system CFStringRef kCTFontAttributeName/*! @const kCTKernAttributeName @abstract A kerning adjustment. @discussion Value must be a CFNumberRef float. Default is standard kerning. The kerning attribute indicate how many points the following character should be shifted from its default offset as defined by the current character's font in points; a positive kern indicates a shift farther along and a negative kern indicates a shift closer to the current character. If this attribute is not present, standard kerning will be used. If this attribute is set to 0.0, no kerning will be done at all.*/system CFStringRef kCTKernAttributeName/*! @const kCTLigatureAttributeName @abstract Controls ligature formation. @discussion Value must be a CFNumberRef. Default is int value 1. The ligature attribute determines what kinds of ligatures should be used when displaying the string. A value of 0 indicates that only ligatures essential for proper rendering of text should be used, 1 indicates that standard ligatures should be used, and 2 indicates that all available ligatures should be used. Which ligatures are standard depends on the script and possibly the font. Arabic text, for example, requires ligatures for many character sequences, but has a rich set of additional ligatures that combine characters. English text has no essential ligatures, and typically has only two standard ligatures, those for "fi" and "fl" -- all others being considered more advanced or fancy.*/system CFStringRef kCTLigatureAttributeName/*! @const kCTForegroundColorAttributeName @abstract The foreground color. @discussion Value must be a CGColorRef. Default value is black*/system CFStringRef kCTForegroundColorAttributeName/*! @const kCTParagraphStyleAttributeName @abstract A CTParagraphStyle object which is used to specify things like line alignment, tab rulers, writing direction, etc. @discussion Value must be a CTParagraphStyleRef. Default is an empty CTParagraphStyle object. See CTParagraphStyle.h for more information.*/system CFStringRef kCTParagraphStyleAttributeName/*! @const kCTUnderlineStyleAttributeName @abstract Allows the setting of an underline to be applied at render time. @discussion Value must be a CFNumberRef. Default is kCTUnderlineStyleNone. Set a value of something other than kCTUnderlineStyleNone to draw an underline. In addition, the CTUnderlineStyleModifiers can be used to modify the look of the underline. The underline color will be determined by the text's foreground color.*/system CFStringRef kCTUnderlineStyleAttributeName/*! @const kCTVerticalFormsAttributeName @abstract Controls glyph orientation. @discussion Value must be a CFBooleanRef. Default is false. A value of false indicates that horizontal glyph forms are to be used, true indicates that vertical glyph forms are to be used.*/system CFStringRef kCTVerticalFormsAttributeName/*! @const kCTGlyphInfoAttributeName @abstract Allows the use of unencoded glyphs. @discussion Value must be a CTGlyphInfoRef. The glyph specified by this CTGlyphInfo object is assigned to the entire attribute range, provided that its contents match the specified base string and that the specified glyph is available in the font specified by kCTFontAttributeName. See CTGlyphInfo.h for more information.*/system CFStringRef kCTGlyphInfoAttributeName/*! @enum CTUnderlineStyle @abstract Underline style specifiers. @discussion These underline type specifiers can be applied to the value set with the kCTUnderlineStyleAttributeName attribute to tell CoreText that you want a different underline style.*/begin enum_kCTUnderlineStyleNone   = 0x00 _kCTUnderlineStyleSingle = 0x01 _kCTUnderlineStyleThick  = 0x02 _kCTUnderlineStyleDouble = 0x09end enum#define CTUnderlineStyle as UInt32/*! @enum CTUnderlineStyleModifiers @abstract Underline style modifiers. @discussion Set these bits with the CTUnderlineStyle that you set with the kCTUnderlineStyleAttributeName attribute to modify how the underline will be drawn.*/begin enum_kCTUnderlinePatternSolid      = 0x0000 _kCTUnderlinePatternDot        = 0x0100 _kCTUnderlinePatternDash       = 0x0200 _kCTUnderlinePatternDashDot    = 0x0300 _kCTUnderlinePatternDashDotDot = 0x0400end enum#define CTUnderlineStyleModifiers as UInt32#endif// _DEFINEDINCARBON