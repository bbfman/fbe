// last mod  20120222 rp_evCmdKey         = 24_FBQuitEvent      = 25_cursOverBtn      = _cursOver_cursOverEF       = 27_cursOverPF       = 28_cursOverNothing  = 29_wndResized       = 30_cntxtMenuClick   = 31_toolbarClick     = 33// constants for cursor statement_themeCursorStatic  = 32768_themeCursorAnimate = _themeCursorStatic*2//  obsolete constants for EDIT FIELD type_noDrawFocus = 256_copyOnlyFramed = 2048//  constants for system()_cpuSpeed     = 15_clockSpeed   = 16_lastCursType = 17_aplVRefNum   = 18_aplParID     = 19toolbox RuntimeErrMsg( Str255 msg ) // in AppThings.cinclude "Tlbx MacTypes.incl"include "Tlbx Standard.incl"#if ndef _LP64include "Tlbx QuickTime.incl"include "Tlbx Help Mgr.incl"include "Tlbx Palettes.incl"include "Tlbx ColorPicker.incl"#endif /* ndef _LP64 */include "Tlbx CFBase.incl"include "Tlbx CFString.incl"include "Tlbx CFArray.incl"include "Tlbx CFData.incl"include "Tlbx CFDate.incl"include "Tlbx CFNumber.incl"include "Tlbx Files.incl"include "Tlbx Processes.incl"include "Tlbx Appearance.incl"include "Tlbx 8.5 Window Mgr.incl"include "Subs Compiler.incl"include "Subs Printing.incl"#if ndef _LP64include "Subs Common.incl"#endif /* ndef _LP64 */include "Subs Appearance AEvents.incl"include "Tlbx StdCLib.incl"include "Tlbx CFDictionary.incl"include "Tlbx Folders.incl"include "Tlbx CFURL.incl"include "Tlbx CFBundle.incl"include "Subs UNIX Shell.incl"include "Tlbx Navigation.incl"include "Subs Dynamic.incl"#if ndef _LP64include "Subs Sound.incl"include "Subs Appearance Btns.incl"#endif /* ndef _LP64 */include "Tlbx Icons.incl"include "Tlbx MacWindows.incl"include "Rntm Appearance.glbl"include "Subs Files.incl"include "Subs DefUsr.incl"include "Tlbx OSPanel.incl"toolbox fn FBCompareContainers( pointer * cntr1 , pointer * cntr2 ) = long // in *.c runtimetoolbox WindowSetTitle( SInt32 wndNum, CFStringRef title )// 20170923 bw - moved here from Subs Appearance Btns.incl so it can be shared by Carbon and CocoaUI windows#if ndef _LP64// 'orphan' toolbox declarations from various strange places in FB Headers// Dialogs.htoolbox fn NewModalFilterUPP( pointer userRoutine ) = proctoolbox DisposeModalFilterUPP( proc userUPP )// Quickdraw.htoolbox fn NewColorSearchUPP( pointer userRoutine ) = proc// ControlDefinitions.htoolbox fn NewControlUserPaneDrawUPP( pointer userRoutine ) = proctoolbox fn NewControlUserPaneHitTestUPP( pointer userRoutine ) = proctoolbox fn NewControlUserPaneTrackingUPP( pointer userRoutine ) = proctoolbox fn NewControlUserPaneIdleUPP( pointer userRoutine ) = proctoolbox fn NewControlUserPaneKeyDownUPP( pointer userRoutine ) = proctoolbox fn NewControlUserPaneActivateUPP( pointer userRoutine ) = proctoolbox fn NewControlUserPaneFocusUPP( pointer userRoutine ) = proctoolbox fn NewControlUserPaneBackgroundUPP( pointer userRoutine ) = proc// Controls.htoolbox fn NewControlKeyFilterUPP( pointer userRoutine ) = proc//toolbox fn NSApplicationLoad = Booleanvoid local fn NewWindowPositionMethod( pMethod as WindowPositionMethod )'~'1select pMethodcase 0, _kWindowCenterOnMainScreen, _kWindowCascadeOnMainScreen, _kWindowAlertPositionOnMainScreengNewWndPositionMethod = pMethodcase elsefn RuntimeErrMsg( "def NewWindowPositionMethod must set 0, _kWindowCenterOnMainScreen, _kWindowCascadeOnMainScreen, or _kWindowAlertPositionOnMainScreen" )end selectend fnlocal modevoid local fn WindowReposition( wNum as long, parentWNum as long, pMethod as WindowPositionMethod )'~'1dim w         as WindowRefdim wParent   as WindowReflong if pMethod < _kWindowCenterOnMainScreen or pMethod > _kWindowAlertPositionOnParentWindowScreenfn RuntimeErrMsg( "Bad method parameter in def WindowReposition for window" + str$( wNum ) )exit fnend ifget window wNum, wlong if w == 0fn RuntimeErrMsg( "Bad wNum parameter in def WindowReposition: " + str$( wNum ) )exit fnend ifselect pMethodcase _kWindowCenterOnMainScreen, _kWindowCascadeOnMainScreen, _kWindowAlertPositionOnMainScreenfn RepositionWindow( w, 0, pMethod )case elseget window parentWNum, wParentlong if wParentfn RepositionWindow( w, wParent, pMethod )xelsefn RuntimeErrMsg( "Bad parentWNum parameter in def WindowReposition for window" + str$( wNum ) )end ifend selectend fn_activeWCategory = _activeWClass_outputWCategory = _outputWClass_kFBWindowCategoryTag = _"wCat"local modevoid local fn WindowCategory( wNum as long, wCategory as long )'~'1dim as WindowRef Ê wget window wNum, wlong if ( w )fn SetWindowProperty( w, 0, _kFBWindowCategoryTag, sizeof(long), @wCategory )end ifend fn#endif /* ndef _LP64 */fn InitFBGlobals//fn NSApplicationLoad()// for Cocoa in Carbon - runtime does it so other code doesn't make redundant calls. Brian 20170401end runtimebegin globals