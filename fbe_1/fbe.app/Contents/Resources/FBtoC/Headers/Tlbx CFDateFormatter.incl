/*   bw 20090630*//* CFDateFormatter.h Copyright (c) 2003-2007, Apple Inc. All rights reserved.*/#if ndef _DEFINEDINCARBON#define CFDateFormatterRef as pointer// CFDateFormatters are not thread-safe. Do not use one from multiple threads!toolbox fn CFDateFormatterGetTypeID() = CFTypeID//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;begin enum_kCFDateFormatterNoStyle     = 0_kCFDateFormatterShortStyle  = 1_kCFDateFormatterMediumStyle = 2_kCFDateFormatterLongStyle   = 3_kCFDateFormatterFullStyle   = 4end enum#define CFDateFormatterStyle as CFIndex// The exact formatted result for these date and time styles depends on the// locale, but generally:// Short is completely numeric, such as "12/13/52" or "3:30pm"// Medium is longer, such as "Jan 12, 1952"// Long is longer, such as "January 12, 1952" or "3:30:32pm"// Full is pretty complete; e.g. "Tuesday, April 12, 1952 AD" or "3:30:42pm PST"// The specifications though are left fuzzy, in part simply because a user's// preference choices may affect the output, and also the results may change// from one OS release to another. To produce an exactly formatted date you// should not rely on styles and localization, but set the format string and// use nothing but numbers.toolbox fn CFDateFormatterCreate( CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle ) = CFDateFormatterRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Returns a CFDateFormatter, localized to the given locale, which//  // will format dates to the given date and time styles.toolbox fn CFDateFormatterGetLocale( CFDateFormatterRef formatter ) = CFLocaleRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFDateFormatterGetDateStyle( CFDateFormatterRef formatter ) = CFDateFormatterStyle//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFDateFormatterGetTimeStyle( CFDateFormatterRef formatter ) = CFDateFormatterStyle//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Get the properties with which the date formatter was created.toolbox fn CFDateFormatterGetFormat( CFDateFormatterRef formatter ) = CFStringRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox CFDateFormatterSetFormat( CFDateFormatterRef formatter, CFStringRef formatString )//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Set the format description string of the date formatter. This//  // overrides the style settings. The format of the format string//  // is as defined by the ICU library. The date formatter starts with a//  // default format string defined by the style arguments with//  // which it was created.toolbox fn CFDateFormatterCreateStringWithDate( CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date ) = CFStringRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFDateFormatterCreateStringWithAbsoluteTime( CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at ) = CFStringRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Create a string representation of the given date or CFAbsoluteTime//  // using the current state of the date formatter.toolbox fn CFDateFormatterCreateDateFromString( CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep ) = CFDateRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFDateFormatterGetAbsoluteTimeFromString( CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp ) = Boolean//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Parse a string representation of a date using the current state//  // of the date formatter. The range parameter specifies the range//  // of the string in which the parsing should occur in input, and on//  // output indicates the extent that was used; this parameter can//  // be NULL, in which case the whole string may be used. The//  // return value indicates whether some date was computed and//  // (if atp is not NULL) stored at the location specified by atp.toolbox CFDateFormatterSetProperty( CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value )//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFDateFormatterCopyProperty( CFDateFormatterRef formatter, CFStringRef key ) = CFTypeRef//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;//  // Set and get various properties of the date formatter, the set of//  // which may be expanded in the future.system CFStringRef kCFDateFormatterTimeZone// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFTimeZonesystem CFStringRef kCFDateFormatterDefaultFormat// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFStringsystem CFStringRef kCFDateFormatterDefaultDate// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFDatesystem CFStringRef kCFDateFormatterEraSymbolssystem CFStringRef kCFDateFormatterMonthSymbols// AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // CFTimeZonesystem CFStringRef kCFDateFormatterShortMonthSymbols// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFArray of CFStringsystem CFStringRef kCFDateFormatterShortWeekdaySymbols// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFArray of CFStringsystem CFStringRef kCFDateFormatterWeekdaySymbolssystem CFStringRef kCFDateFormatterPMSymbol// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // CFStringsystem CFStringRef kCFDateFormatterVeryShortMonthSymbols// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFArray of CFStringsystem CFStringRef kCFDateFormatterShortStandaloneMonthSymbols// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFArray of CFStringsystem CFStringRef kCFDateFormatterVeryShortWeekdaySymbols// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFArray of CFStringsystem CFStringRef kCFDateFormatterShortStandaloneWeekdaySymbols// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFArray of CFStringsystem CFStringRef kCFDateFormatterQuarterSymbols// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFArray of CFStringsystem CFStringRef kCFDateFormatterStandaloneQuarterSymbols// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFArray of CFStringsystem CFStringRef kCFDateFormatterGregorianStartDate// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // CFDate// See CFLocale.h for these calendar constants:// const CFStringRef kCFGregorianCalendar;// const CFStringRef kCFBuddhistCalendar;// const CFStringRef kCFJapaneseCalendar;// const CFStringRef kCFIslamicCalendar;// const CFStringRef kCFIslamicCivilCalendar;// const CFStringRef kCFHebrewCalendar;// const CFStringRef kCFChineseCalendar;#endif// ndef _DEFINEDINCARBON