/*   Updated: bw 20090120*//* CFLocale.h Copyright (c) 2002-2007, Apple Inc. All rights reserved.*/#if ndef _DEFINEDINCARBON#define CFLocaleRef as pointertoolbox fn CFLocaleGetTypeID() = CFTypeID //  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn CFLocaleGetSystem() = CFLocaleRef //  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Returns the "root", canonical locale. Contains fixed "backstop" settings.toolbox fn CFLocaleCopyCurrent() = CFLocaleRef //  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Returns the logical "user" locale for the current user.// [This is Copy in the sense that you get a retain you have to release,// but we may return the same cached object over and over.] Settings// you get from this locale do not change under you as CFPreferences// are changed (for safety and correctness). Generally you would not// grab this and hold onto it forever, but use it to do the operations// you need to do at the moment, then throw it away. (The non-changing// ensures that all the results of your operations are consistent.)toolbox fn CFLocaleCopyAvailableLocaleIdentifiers() = CFArrayRef //  AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;// Returns an array of CFStrings that represents all locales for// which locale data is available.toolbox fn CFLocaleCopyISOLanguageCodes() = CFArrayRef //  AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;// Returns an array of CFStrings that represents all known legal ISO// language codes. Note: many of these will not have any supporting// locale data in Mac OS X.toolbox fn CFLocaleCopyISOCountryCodes() = CFArrayRef //  AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;// Returns an array of CFStrings that represents all known legal ISO// country codes. Note: many of these will not have any supporting// locale data in Mac OS X.toolbox fn CFLocaleCopyISOCurrencyCodes() = CFArrayRef //  AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;// Returns an array of CFStrings that represents all known legal ISO// currency codes. Note: some of these currencies may be obsolete, or// represent other financial instruments.toolbox fn CFLocaleCopyCommonISOCurrencyCodes() = CFArrayRef //  AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// Returns an array of CFStrings that represents ISO currency codes for// currencies in common use.toolbox fn CFLocaleCopyPreferredLanguages() = CFArrayRef //  AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// Returns the array of canonicalized CFString locale IDs that the user prefers.toolbox fn CFLocaleCreateCanonicalLanguageIdentifierFromString( CFAllocatorRef allocator, CFStringRef localeIdentifier ) = CFStringRef //  AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;// Map an arbitrary language identification string (something close at// least) to a canonical language identifier.toolbox fn CFLocaleCreateCanonicalLocaleIdentifierFromString( CFAllocatorRef allocator, CFStringRef localeIdentifier ) = CFStringRef //  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Map an arbitrary locale identification string (something close at// least) to the canonical identifier.toolbox fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes( CFAllocatorRef allocator, LangCode lcode, RegionCode rcode ) = CFStringRef //  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Map a Mac OS LangCode and RegionCode to the canonical locale identifier.toolbox fn CFLocaleCreateComponentsFromLocaleIdentifier( CFAllocatorRef allocator, CFStringRef localeID ) = CFDictionaryRef //  AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;// Parses a locale ID consisting of language, script, country, variant,// and keyword/value pairs into a dictionary. The keys are the constant// CFStrings corresponding to the locale ID components, and the values// will correspond to constants where available.// Example: "en_US@calendar=japanese" yields a dictionary with three// entries: kCFLocaleLanguageCode=en, kCFLocaleCountryCode=US, and// kCFLocaleCalendarIdentifier=kCFJapaneseCalendar.toolbox fn CFLocaleCreateLocaleIdentifierFromComponents( CFAllocatorRef allocator, CFDictionaryRef dictionary ) = CFStringRef //  AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;// Reverses the actions of CFLocaleCreateDictionaryFromLocaleIdentifier,// creating a single string from the data in the dictionary. The// dictionary {kCFLocaleLanguageCode=en, kCFLocaleCountryCode=US,// kCFLocaleCalendarIdentifier=kCFJapaneseCalendar} becomes// "en_US@calendar=japanese".toolbox fn CFLocaleCreate( CFAllocatorRef allocator, CFStringRef localeIdentifier ) = CFLocaleRef //  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Returns a CFLocaleRef for the locale named by the "arbitrary" locale identifier.toolbox fn CFLocaleCreateCopy( CFAllocatorRef allocator, CFLocaleRef locale ) = CFLocaleRef //  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Having gotten a CFLocale from somebody, code should make a copy// if it is going to use it for several operations// or hold onto it. In the future, there may be mutable locales.toolbox fn CFLocaleGetIdentifier( CFLocaleRef locale ) = CFStringRef //  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Returns the locale's identifier. This may not be the same string// that the locale was created with (CFLocale may canonicalize it).toolbox fn CFLocaleGetValue( CFLocaleRef locale, CFStringRef key ) = CFTypeRef //  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;// Returns the value for the given key. This is how settings and state// are accessed via a CFLocale. Values might be of any CF type.toolbox fn CFLocaleCopyDisplayNameForPropertyValue( CFLocaleRef displayLocale, CFStringRef key, CFStringRef value ) = CFStringRef //  AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;// Returns the display name for the given value. The key tells what// the value is, and is one of the usual locale property keys, though// not all locale property keys have values with display name values.system CFStringRef kCFLocaleCurrentLocaleDidChangeNotification // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// Locale Keyssystem CFStringRef kCFLocaleIdentifier // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleLanguageCode // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleCountryCode // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleScriptCode // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleVariantCode // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleExemplarCharacterSet // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleCalendarIdentifier // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleCalendar // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleCollationIdentifier // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleUsesMetricSystem // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFLocaleMeasurementSystem // AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // "Metric" or "U.S."system CFStringRef kCFLocaleDecimalSeparator // AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;system CFStringRef kCFLocaleGroupingSeparator // AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;system CFStringRef kCFLocaleCurrencySymbol // AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;system CFStringRef kCFLocaleCurrencyCode // AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER; // ISO 3-letter currency code// Values for kCFLocaleCalendarIdentifiersystem CFStringRef kCFGregorianCalendar // AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;system CFStringRef kCFBuddhistCalendar // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFChineseCalendar // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFHebrewCalendar // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFIslamicCalendar // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFIslamicCivilCalendar // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kCFJapaneseCalendar // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;#endif// ndef _DEFINEDINCARBON