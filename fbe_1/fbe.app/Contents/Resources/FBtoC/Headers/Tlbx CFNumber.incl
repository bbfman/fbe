/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------       13 October 2008*//* CFNumber.h Copyright (c) 1999-2007, Apple Inc. All rights reserved.*/#if ndef _DEFINEDINCARBON#define CFBooleanRef as pointersystem CFBooleanRef kCFBooleanTruesystem CFBooleanRef kCFBooleanFalsetoolbox fn CFBooleanGetTypeID() = CFTypeIDtoolbox fn CFBooleanGetValue( CFBooleanRef boolean ) = Booleanbegin enum not output/* Fixed-width types */_kCFNumberSInt8Type     = 1 _kCFNumberSInt16Type    = 2 _kCFNumberSInt32Type    = 3 _kCFNumberSInt64Type    = 4 _kCFNumberFloat32Type   = 5 _kCFNumberFloat64Type   = 6  /* 64-bit IEEE 754 *//* Basic C types */_kCFNumberCharType      = 7 _kCFNumberShortType     = 8 _kCFNumberIntType       = 9 _kCFNumberLongType      = 10 _kCFNumberLongLongType  = 11 _kCFNumberFloatType     = 12 _kCFNumberDoubleType    = 13 /* Other */_kCFNumberCFIndexType   = 14 /*#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5*/_kCFNumberNSIntegerType = 15 _kCFNumberCGFloatType   = 16 _kCFNumberMaxType       = 16//#else//_kCFNumberMaxType       = 14//#endifend enum#define CFNumberType as CFIndex#define CFNumberRef as pointer// const CFNumberRef kCFNumberPositiveInfinity;// const CFNumberRef kCFNumberNegativeInfinity;// const CFNumberRef kCFNumberNaN;toolbox fn CFNumberGetTypeID() = CFTypeID/* Creates a CFNumber with the given value. The type of number pointed to by the valuePtr is specified by type. If type is a floating point type and the value represents one of the infinities or NaN, the well-defined CFNumber for that value is returned. If either of valuePtr or type is an invalid value, the result is undefined.*/toolbox fn CFNumberCreate( CFAllocatorRef allocator, CFNumberType theType, pointer valuePtr ) = CFNumberRef/* Returns the storage format of the CFNumber's value. Note that this is not necessarily the type provided in CFNumberCreate().*/toolbox fn CFNumberGetType( CFNumberRef number ) = CFNumberType/* Returns the size in bytes of the type of the number.*/toolbox fn CFNumberGetByteSize( CFNumberRef number ) = CFIndex/* Returns true if the type of the CFNumber's value is one of the defined floating point types.*/toolbox fn CFNumberIsFloatType( CFNumberRef number ) = Boolean/* Copies the CFNumber's value into the space pointed to by valuePtr, as the specified type. If conversion needs to take place, the conversion rules follow human expectation and not C's promotion and truncation rules. If the conversion is lossy, or the value is out of range, false is returned. Best attempt at conversion will still be in *valuePtr.*/toolbox fn CFNumberGetValue( CFNumberRef number, CFNumberType theType, pointer *valuePtr ) = Boolean/* Compares the two CFNumber instances. If conversion of the types of the values is needed, the conversion and comparison follow human expectations and not C's promotion and comparison rules. Negative zero compares less than positive zero. Positive infinity compares greater than everything except itself, to which it compares equal. Negative infinity compares less than everything except itself, to which it compares equal. Unlike standard practice, if both numbers are NaN, then they compare equal; if only one of the numbers is NaN, then the NaN compares greater than the other number if it is negative, and smaller than the other number if it is positive. (Note that in CFEqual() with two CFNumbers, if either or both of the numbers is NaN, true is returned.)*/toolbox fn CFNumberCompare( CFNumberRef number, CFNumberRef otherNumber, pointer *context ) = CFComparisonResult#endif// ndef _DEFINEDINCARBON