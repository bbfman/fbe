/*   Translated to FB using         HeadToHead       by Bernie Wylde         ----------       13 October 2008*//* CFPreferences.h Copyright (c) 1998-2007, Apple Inc. All rights reserved.*//*include "CFBase.incl"include "CFArray.incl"include "CFString.incl"*/#if ndef _DEFINEDINCARBON// const CFStringRef kCFPreferencesAnyApplication;system CFStringRef kCFPreferencesCurrentApplication// const CFStringRef kCFPreferencesAnyHost;// const CFStringRef kCFPreferencesCurrentHost;// const CFStringRef kCFPreferencesAnyUser;// const CFStringRef kCFPreferencesCurrentUser;/* NOTE: All CFPropertyListRef values returned from CFPreferences API should be assumed to be immutable.*//* The "App" functions search the various sources of defaults that apply to the given application, and should never be called with kCFPreferencesAnyApplication - only kCFPreferencesCurrentApplication or an application's ID (its bundle identifier).*//* Searches the various sources of application defaults to find thevalue for the given key. key must not be NULL. If a value is found,it returns it; otherwise returns NULL. Caller must release thereturned value */toolbox fn CFPreferencesCopyAppValue( CFStringRef key, CFStringRef applicationID ) = CFPropertyListRef/* Convenience to interpret a preferences value as a boolean directly.Returns false if the key doesn't exist, or has an improper format; underthose conditions, keyExistsAndHasValidFormat (if non-NULL) is set to false */toolbox fn CFPreferencesGetAppBooleanValue( CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat ) = Boolean/* Convenience to interpret a preferences value as an integer directly.Returns 0 if the key doesn't exist, or has an improper format; underthose conditions, keyExistsAndHasValidFormat (if non-NULL) is set to false */toolbox fn CFPreferencesGetAppIntegerValue( CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat ) = CFIndex/* Sets the given value for the given key in the "normal" place forapplication preferences. key must not be NULL. If value is NULL,key is removed instead. */toolbox CFPreferencesSetAppValue( CFStringRef key, CFPropertyListRef value, CFStringRef applicationID )/* Adds the preferences for the given suite to the app preferences for the specified application. To write to the suite domain, use CFPreferencesSetValue(), below, using the suiteName in placeof the appName */toolbox CFPreferencesAddSuitePreferencesToApp( CFStringRef applicationID, CFStringRef suiteID )toolbox CFPreferencesRemoveSuitePreferencesFromApp( CFStringRef applicationID, CFStringRef suiteID )/* Writes all changes in all sources of application defaults.Returns success or failure. */toolbox fn CFPreferencesAppSynchronize( CFStringRef applicationID ) = Boolean/* The primitive get mechanism; all arguments must be non-NULL(use the constants above for common values). Only the exactlocation specified by app-user-host is searched. The returnedCFType must be released by the caller when it is finished with it. */toolbox fn CFPreferencesCopyValue( CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName ) = CFPropertyListRef/* Convenience to fetch multiple keys at once. Keys in keysToFetch that are not present in the returned dictionaryare not present in the domain. If keysToFetch is NULL, allkeys are fetched. */toolbox fn CFPreferencesCopyMultiple( CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName ) = CFDictionaryRef/* The primitive set function; all arguments except value must benon-NULL. If value is NULL, the given key is removed */toolbox CFPreferencesSetValue( CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName )/* Convenience to set multiple values at once. Behavior is undefinedif a key is in both keysToSet and keysToRemove */toolbox CFPreferencesSetMultiple( CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName )toolbox fn CFPreferencesSynchronize( CFStringRef applicationID, CFStringRef userName, CFStringRef hostName ) = Boolean/* Constructs and returns the list of the name of all applicationswhich have preferences in the scope of the given user and host.The returned value must be released by the caller; neither argumentmay be NULL. */toolbox fn CFPreferencesCopyApplicationList( CFStringRef userName, CFStringRef hostName ) = CFArrayRef/* Constructs and returns the list of all keys set in the givenlocation. The returned value must be released by the caller;all arguments must be non-NULL */toolbox fn CFPreferencesCopyKeyList( CFStringRef applicationID, CFStringRef userName, CFStringRef hostName ) = CFArrayRef/* Function to determine whether or not a given key has been imposed on theuser - In cases where machines and/or users are under some kind of management,callers should use this function to determine whether or not to disable UI elementscorresponding to those preference keys. */toolbox fn CFPreferencesAppValueIsForced( CFStringRef key, CFStringRef applicationID ) = Boolean#endif// ndef _DEFINEDINCARBON