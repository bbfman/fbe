/*   20091001    Bernie Wylde*//* CFPropertyList.h Copyright (c) 1998-2009, Apple Inc. All rights reserved.*/include "Tlbx CFStream.incl"#if ndef _DEFINEDINCARBONbegin enum_kCFPropertyListImmutable = 0_kCFPropertyListMutableContainers_kCFPropertyListMutableContainersAndLeavesend enum#define CFPropertyListMutabilityOptions as CFOptionFlags/* Creates a property list object from its XML description; xmlData should be the raw bytes of that description, possibly the contents of an XML file. Returns NULL if the data cannot be parsed; if the parse fails and errorString is non-NULL, a human-readable description of the failure is returned in errorString. It is the caller's responsibility to release either the returned object or the error string, whichever is applicable.  This function is obsolete and will be deprecated soon. See CFPropertyListCreateWithData() for a replacement.*/toolbox fn CFPropertyListCreateFromXMLData( CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString ) = CFPropertyListRef/* Returns the XML description of the given object; propertyList must be one of the supported property list types, and (for composite types like CFArray and CFDictionary) must not contain any elements that are not themselves of a property list type. If a non-property list type is encountered, NULL is returned. The returned data is appropriate for writing out to an XML file. Note that a data, not a string, is returned because the bytes contain in them a description of the string encoding used.  This function is obsolete and will be deprecated soon. See CFPropertyListCreateData() for a replacement.*/toolbox fn CFPropertyListCreateXMLData( CFAllocatorRef allocator, CFPropertyListRef propertyList ) = CFDataRef/* Recursively creates a copy of the given property list (so nested arrays and dictionaries are copied as well as the top-most container). The resulting property list has the mutability characteristics determined by mutabilityOption.*/toolbox fn CFPropertyListCreateDeepCopy( CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption ) = CFPropertyListRefbegin enum_kCFPropertyListOpenStepFormat  = 1_kCFPropertyListXMLFormatv10    = 100_kCFPropertyListBinaryFormatv10 = 200end enum#define CFPropertyListFormat as CFIndex/* Returns true if the object graph rooted at plist is a valid property list * graph -- that is, no cycles, containing only plist objects, and dictionary * keys are strings. The debugging library version spits out some messages * to be helpful. The plist structure which is to be allowed is given by* the format parameter. */toolbox fn CFPropertyListIsValid( CFPropertyListRef plist, CFPropertyListFormat format ) = Boolean/* Writes the bytes of a plist serialization out to the stream. The * stream must be opened and configured -- the function simply writes * a bunch of bytes to the stream. The output plist format can be chosen. * Leaves the stream open, but note that reading a plist expects the * reading stream to end wherever the writing ended, so that the * end of the plist data can be identified. Returns the number of bytes * written, or 0 on error. Error messages are not currently localized, but * may be in the future, so they are not suitable for comparison.  ** This function is obsolete and will be deprecated soon. See CFPropertyListWrite() for a replacement. */toolbox fn CFPropertyListWriteToStream( CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString ) = CFIndex/* Same as current function CFPropertyListCreateFromXMLData() * but takes a stream instead of data, and works on any plist file format. * CFPropertyListCreateFromXMLData() also works on any plist file format. * The stream must be open and configured -- the function simply reads a bunch * of bytes from it starting at the current location in the stream, to the END * of the stream, which is expected to be the end of the plist, or up to the * number of bytes given by the length parameter if it is not 0. Error messages * are not currently localized, but may be in the future, so they are not * suitable for comparison.  ** This function is obsolete and will be deprecated soon. See CFPropertyListCreateWithStream() for a replacement. */toolbox fn CFPropertyListCreateFromStream( CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags mutabilityOption, CFPropertyListFormat *format, CFStringRef *errorString ) = CFPropertyListRefbegin enum_kCFPropertyListReadCorruptError        = 3840 // Error parsing a property list_kCFPropertyListReadUnknownVersionError = 3841 // The version number in the property list is unknown_kCFPropertyListReadStreamError         = 3842 // Stream error reading a property list_kCFPropertyListWriteStreamError        = 3851 // Stream error writing a property listend enum/* Create a property list with a CFData input. If the format parameter is non-NULL, it will be set to the format of the data after parsing is complete. The options parameter is used to specify CFPropertyListMutabilityOptions. If an error occurs whil pars*/toolbox fn CFPropertyListCreateWithData( CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *err ) = CFPropertyListRef//  AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER;/* Create and return a property list with a CFReadStream input. TIf the format parameter is non-NULL, it will be set to the format of the data after parsing is complete. The options parameter is used to specify CFPropertyListMutabilityOptions. The sreamL*/toolbox fn CFPropertyListCreateWithStream( CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *err ) = CFPropertyListRef//AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER/* Write the bytes of a serialized property list out to a stream. The stream must be opened and configured. The format of the property list can be chosen with the format parameter. The options parameter is currently unused and should be set to 0. Th retu*/toolbox fn CFPropertyListWrite( CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *err ) = CFIndex//  AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER;/* Create a CFData with the bytes of a serialized property list. The format of the property list can be chosen with the format parameter. The options parameter is currently unused and should be set to 0. If an error occurs while parsing the data, th retu*/toolbox fn CFPropertyListCreateData( CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *err ) = CFDataRef//  AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER;#endif// ndef _DEFINEDINCARBON