// bw 20061230/*	CFUserNotification.h	Copyright (c) 2000-2007, Apple Inc.  All rights reserved.*/include "Tlbx CFRunLoop.incl"#if ndef _DEFINEDINCARBON#define CFUserNotificationRef as pointer/* A CFUserNotification is a notification intended to be presented to a user at the console (if one is present).  This is for the use of processesthat do not otherwise have user interfaces, but may need occasionalinteraction with a user.  There is a parallel API for this functionalityat the System framework level, described in UNCUserNotification.h.The contents of the notification can include a header, a message, textfields,a popup button, radio buttons or checkboxes, a progress indicator, and up tothree ordinary buttons.  All of these items are optional, but a defaultbutton will be supplied even if not specified unless thekCFUserNotificationNoDefaultButtonFlag is set.The contents of the notification are specified in the dictionary used tocreate the notification, whose keys should be taken from the list of constantsbelow, and whose values should be either strings or arrays of strings(except for kCFUserNotificationProgressIndicatorValueKey, in which case thevalue should be a number between 0 and 1, for a "definite" progress indicator,or a boolean, for an "indefinite" progress indicator).  Additionally, URLs canoptionally be supplied for an icon, a sound, and a bundle whose Localizable.stringsfiles will be used to localize strings.    Certain request flags are specified when a notification is created.These specify an alert level for the notification, determine whetherradio buttons or check boxes are to be used, specify which if any of theseare checked by default, specify whether any of the textfields are tobe secure textfields, and determine which popup item should be selectedby default.  A timeout is also specified, which determines how long thenotification should be supplied to the user (if zero, it will not timeout).    A CFUserNotification is dispatched for presentation when it is created.If any reply is required, it may be awaited in one of two ways:  eithersynchronously, using CFUserNotificationReceiveResponse, or asynchronously,using a run loop source.  CFUserNotificationReceiveResponse has a timeoutparameter that determines how long it will block (zero meaning indefinitely)and it may be called as many times as necessary until a response arrives.If a notification has not yet received a response, it may be updated withnew information, or it may be cancelled.  Notifications may not be reused.    When a response arrives, it carries with it response flags that describewhich button was used to dismiss the notification, which checkboxes orradio buttons were checked, and what the selection of the popup was.It also carries a response dictionary, which describes the contentsof the textfields.  */    //typedef void (*CFUserNotificationCallBack)(CFUserNotificationRef userNotification, CFOptionFlags responseFlags);#define CFUserNotificationCallBack as pointertoolbox fn CFUserNotificationGetTypeID() = CFTypeIDtoolbox fn CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary) = CFUserNotificationReftoolbox fn CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags) = SInt32toolbox fn CFUserNotificationGetResponseValue(CFUserNotificationRef userNotification, CFStringRef key, CFIndex idx) = CFStringReftoolbox fn CFUserNotificationGetResponseDictionary(CFUserNotificationRef userNotification) = CFDictionaryReftoolbox fn CFUserNotificationUpdate(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags flags, CFDictionaryRef dictionary) = SInt32toolbox fn CFUserNotificationCancel(CFUserNotificationRef userNotification) = SInt32toolbox fn CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order) = CFRunLoopSourceReftoolbox fn CFUserNotificationDisplayNotice(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle) = SInt32toolbox fn CFUserNotificationDisplayAlert( CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, Â                                           CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags) = SInt32/* Flags */begin enum_kCFUserNotificationStopAlertLevel    = 0_kCFUserNotificationNoteAlertLevel    = 1_kCFUserNotificationCautionAlertLevel = 2_kCFUserNotificationPlainAlertLevel   = 3end enumbegin enum_kCFUserNotificationDefaultResponse   = 0_kCFUserNotificationAlternateResponse = 1_kCFUserNotificationOtherResponse     = 2_kCFUserNotificationCancelResponse    = 3end enumbegin enum_kCFUserNotificationNoDefaultButtonFlag  = (1 << 5)_kCFUserNotificationUseRadioButtonsFlag  = (1 << 6)end enum//CF_INLINE CFOptionFlags CFUserNotificationCheckBoxChecked(CFIndex i) {return ((CFOptionFlags)(1 << (8 + i)));}toolbox fn CFUserNotificationCheckBoxChecked(CFIndex i) = CFOptionFlags//CF_INLINE CFOptionFlags CFUserNotificationSecureTextField(CFIndex i) {return ((CFOptionFlags)(1 << (16 + i)));}toolbox fn CFUserNotificationSecureTextField(CFIndex i) = CFOptionFlags//CF_INLINE CFOptionFlags CFUserNotificationPopUpSelection(CFIndex n) {return ((CFOptionFlags)(n << 24));}toolbox fn CFUserNotificationPopUpSelection(CFIndex n) = CFOptionFlags/* Keys */system CFStringRef kCFUserNotificationIconURLKeysystem CFStringRef kCFUserNotificationSoundURLKeysystem CFStringRef kCFUserNotificationLocalizationURLKeysystem CFStringRef kCFUserNotificationAlertHeaderKeysystem CFStringRef kCFUserNotificationAlertMessageKeysystem CFStringRef kCFUserNotificationDefaultButtonTitleKeysystem CFStringRef kCFUserNotificationAlternateButtonTitleKeysystem CFStringRef kCFUserNotificationOtherButtonTitleKeysystem CFStringRef kCFUserNotificationProgressIndicatorValueKeysystem CFStringRef kCFUserNotificationPopUpTitlesKeysystem CFStringRef kCFUserNotificationTextFieldTitlesKeysystem CFStringRef kCFUserNotificationCheckBoxTitlesKeysystem CFStringRef kCFUserNotificationTextFieldValuesKeysystem CFStringRef kCFUserNotificationPopUpSelectionKey//	AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;#endif// ndef _DEFINEDINCARBON