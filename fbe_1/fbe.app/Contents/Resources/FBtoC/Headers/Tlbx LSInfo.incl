#if ndef _DEFINEDINCARBON/*     File:       LaunchServices/LSInfo.h *//* ======================================================================================================== *//* LaunchServices Type & Constants                                                                          *//* ======================================================================================================== */#if 0begin enum_kLSAppInTrashErr = -10660/* The app cannot be run when inside a Trash folder*/_kLSUnknownErr = -10810_kLSNotAnApplicationErr = -10811_kLSNotInitializedErr = -10812_kLSDataUnavailableErr = -10813/* e.g. no kind string*/_kLSApplicationNotFoundErr = -10814/* e.g. no application claims the file*/_kLSUnknownTypeErr = -10815_kLSDataTooOldErr = -10816_kLSDataErr = -10817_kLSLaunchInProgressErr = -10818/* e.g. opening an alreay opening application*/_kLSNotRegisteredErr = -10819_kLSAppDoesNotClaimTypeErr = -10820_kLSAppDoesNotSupportSchemeWarning = -10821/* not an error, just a warning*/_kLSServerCommunicationErr = -10822/* cannot set recent items*/_kLSCannotSetInfoErr = -10823/* you may not set item info for this item*/_kLSNoRegistrationInfoErr = -10824/* the item contains no registration info*/_kLSIncompatibleSystemVersionErr = -10825/* the app cannot run on the current OS version*/_kLSNoLaunchPermissionErr = -10826/* user doesn`t have permission to launch the app (managed networks)*/_kLSNoExecutableErr = -10827/* the executable is missing or has an unusable format*/_kLSNoClassicEnvironmentErr = -10828/* the Classic environment was required but is not available*/_kLSMultipleSessionsNotSupportedErr = -10829/* the app cannot run simultaneously in two different sessions*/end enum#endif#define LSInitializeFlags as UInt32 //OptionBitsbegin enum_kLSInitializeDefaults = 0x00000001end enum//_kLSMinCatInfoBitmap = (kFSCatInfoNodeFlags|kFSCatInfoParentDirID|kFSCatInfoFinderInfo|kFSCatInfoFinderXInfo) // do not use begin enum_kLSInvalidExtensionIndex = 0xFFFFFFFF /* Index returned from LSGetExtensionInfo when name has no extension*/end enum#define LSRequestedInfo as UInt32 // OptionBitsbegin enum_kLSRequestExtension = 0x00000001/* thread-safe in 10.0*/_kLSRequestTypeCreator = 0x00000002/* thread-safe in 10.0*/_kLSRequestBasicFlagsOnly = 0x00000004/* thread-safe in 10.2*/_kLSRequestAppTypeFlags = 0x00000008/* thread-safe in 10.2*/_kLSRequestAllFlags = 0x00000010/* thread-safe in 10.2*/_kLSRequestIconAndKind = 0x00000020/* thread-safe in 10.2*/_kLSRequestExtensionFlagsOnly = 0x00000040/* thread-safe in 10.0*/_kLSRequestAllInfo = 0xFFFFFFFF/* thread-safe in 10.2*/end enum#define LSItemInfoFlags as UInt32 // OptionBitsbegin enum_kLSItemInfoIsPlainFile = 0x00000001/* Not a directory, volume, or symlink*/_kLSItemInfoIsPackage = 0x00000002/* Packaged directory*/_kLSItemInfoIsApplication = 0x00000004/* Single-file or packaged application*/_kLSItemInfoIsContainer = 0x00000008/* Directory (includes packages) or volume*/_kLSItemInfoIsAliasFile = 0x00000010/* Alias file (includes sym links)*/_kLSItemInfoIsSymlink = 0x00000020/* UNIX sym link*/_kLSItemInfoIsInvisible = 0x00000040/* Invisible by any known mechanism*/_kLSItemInfoIsNativeApp = 0x00000080/* Carbon or Cocoa native app*/_kLSItemInfoIsClassicApp = 0x00000100/* CFM/68K Classic app*/_kLSItemInfoAppPrefersNative = 0x00000200/* Carbon app that prefers to be launched natively*/_kLSItemInfoAppPrefersClassic = 0x00000400/* Carbon app that prefers to be launched in Classic*/_kLSItemInfoAppIsScriptable = 0x00000800/* App can be scripted*/_kLSItemInfoIsVolume = 0x00001000/* Item is a volume*/_kLSItemInfoExtensionIsHidden = 0x00100000/* Item has a hidden extension*/end enum#define LSRolesMask as UInt32 // OptionBitsbegin enum_kLSRolesNone = 0x00000001/* no claim is made about support for this type/scheme*/_kLSRolesViewer = 0x00000002/* claim to be able to view this type/scheme*/_kLSRolesEditor = 0x00000004/* claim to be able to edit this type/scheme*/_kLSRolesAll = 0xFFFFFFFF/* claim to do it all*/end enum#define LSKindID as UInt32begin enum_kLSUnknownKindID = 0end enumbegin enum_kLSUnknownType = 0_kLSUnknownCreator = 0end enumbegin record LSItemInfoRecorddim as LSItemInfoFlags flagsdim as OSType filetypedim as OSType creatordim as CFStringRef extension/* release when finished*/dim as CFStringRef iconFileName/* not for general use*/dim as LSKindID kindID/* not for general use*/end record #define LSAcceptanceFlags as UInt32 // OptionBitsbegin enum_kLSAcceptDefault = 0x00000001_kLSAcceptAllowLoginUI = 0x00000002/* show UI to log in if necessary*/end enum/* ======================================================================================================== *//* LaunchServices API                                                                                       *//* ======================================================================================================== *//* *  LSInit()   *** DEPRECATED *** *   *  Discussion: *    LSInit is deprecated. Do not use. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework but deprecated in 10.3 *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available *//* *  LSTerm()   *** DEPRECATED *** *   *  Discussion: *    LSTerm is deprecated. It does nothing. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework but deprecated in 10.3 *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available *//* *  LSCopyItemInfoForRef() *   *  Summary: *    Return information about an item. *   *  Discussion: *    Returns as much or as little information as requested about *    inItemRef. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inItemRef: *      The FSRef of the item about which information is requested. *     *    inWhichInfo: *      Flags indicating which information to return *     *    outItemInfo: *      Information is returned in this structure. Must not be NULL *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyItemInfoForRef( const FSRef * inItemRef, LSRequestedInfo inWhichInfo, LSItemInfoRecord * outItemInfo) = OSStatus/* *  LSCopyItemInfoForURL() *   *  Summary: *    Return information about an item. *   *  Discussion: *    Returns as much or as little information as requested about inURL. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inURL: *      The CFURLRef of the item about which information is requested. *     *    inWhichInfo: *      Flags indicating which information to return *     *    outItemInfo: *      Information is returned in this structure. Must not be NULL *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyItemInfoForURL( CFURLRef inURL, LSRequestedInfo inWhichInfo, LSItemInfoRecord * outItemInfo) = OSStatus/* *  LSGetExtensionInfo() *   *  Summary: *    Get information about the extension for a file system name. *   *  Discussion: *    Returns the starting index of the extension (not including the *    period) or kLSInvalidExtensionIndex if the input name has no *    extension. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inNameLen: *      The number of the UniChars in inNameBuffer. *     *    inNameBuffer: *      The buffer containing the name`s Unicode characters. *     *    outExtStartIndex: *      On success, the starting index of the extension if there is one *      (not including the period). Set to kLSInvalidExtensionIndex if *      inNameBuffer does not contain a valid extension. *   *  Availability: *    Mac OS X:         in version 10.1 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSGetExtensionInfo( UniCharCount inNameLen, const UniChar * inNameBuffer, UniCharCount * outExtStartIndex) = OSStatus/* *  LSCopyDisplayNameForRef() *   *  Summary: *    Get the display name for an FSRef. *   *  Discussion: *    Return a copy of the display name for an FSRef. Takes into *    consideration whether this item has a hidden extension or not. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inRef: *      The FSRef for which the display name is desired. *     *    outDisplayName: *      Pointer to the CFString into which the display name should be *      copied. Callers must dispose of the resulting CFString. *   *  Availability: *    Mac OS X:         in version 10.1 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyDisplayNameForRef( const FSRef * inRef, CFStringRef * outDisplayName ) = OSStatus/* *  LSCopyDisplayNameForURL() *   *  Summary: *    Get the display name for a CFURLRef. *   *  Discussion: *    Return a copy of the display name for a CFURLRef. Takes into *    consideration whether this item has a hidden extension or not. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inURL: *      The URL for which the display name is desired. *     *    outDisplayName: *      Pointer to the CFString into which the display name should be *      copied. Callers must dispose of the resulting CFString. *   *  Availability: *    Mac OS X:         in version 10.1 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyDisplayNameForURL( CFURLRef inURL, CFStringRef * outDisplayName ) = OSStatus/* *  LSSetExtensionHiddenForRef() *   *  Summary: *    Sets whether the extension for an FSRef is hidden or not. *   *  Discussion: *    Sets the necessary file system state to indicate that the *    extension for inRef is hidden, as in the Finder. You can *    determine if an FSRef`s extension is hidden using *    LSCopyItemInfoForRef. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inRef: *      The FSRef for which the extension is to be hidden or shown. *     *    inHide: *      True to hide inRef`s extension, false to show it. *   *  Availability: *    Mac OS X:         in version 10.1 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSSetExtensionHiddenForRef( const FSRef * inRef, Boolean inHide ) = OSStatus/* *  LSSetExtensionHiddenForURL() *   *  Summary: *    Sets whether the extension for a CFURLRef is hidden or not. *   *  Discussion: *    Sets the necessary file system state to indicate that the *    extension for inURL is hidden, as in the Finder. You can *    determine if a CFURLRef`s extension is hidden using *    LSCopyItemInfoForURL. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inURL: *      The CFURLRef for which the extension is to be hidden or shown. *     *    inHide: *      True to hide inURL`s extension, false to show it. *   *  Availability: *    Mac OS X:         in version 10.1 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSSetExtensionHiddenForURL( CFURLRef inURL, Boolean inHide ) = OSStatus/* *  LSCopyKindStringForRef() *   *  Summary: *    Get the kind string for an item. *   *  Discussion: *    Returns the kind string as used in the Finder and elsewhere for *    inFSRef. The CFStringRef must be released after use. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inFSRef: *      The item for which the kind string is requested. *     *    outKindString: *      A CFStringRef* to receive the copied kind string object. This *      CFStringRef must be released eventually. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyKindStringForRef( const FSRef * inFSRef, CFStringRef * outKindString) = OSStatus/* *  LSCopyKindStringForURL() *   *  Summary: *    Get the kind string for an item. *   *  Discussion: *    Returns the kind string as used in the Finder and elsewhere for *    inURL. The CFStringRef must be released after use. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inURL: *      The item for which the kind string is requested. *     *    outKindString: *      A CFStringRef* to receive the copied kind string object. This *      CFStringRef must be released eventually. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyKindStringForURL( CFURLRef inURL, CFStringRef * outKindString) = OSStatus/* *  LSCopyKindStringForTypeInfo() *   *  Summary: *    Return the kind string for items like the provided info *   *  Discussion: *    Returns the kind string as shown in the Finder for the those *    items whose type, creator, and/or extension match the provided *    information. The kind string returned will be the one that most *    closely describes all the information provided. The kind string *    is subject to the document binding preferences that have been *    specified by the user. For example, if a creator is specified but *    the user has asked for files with the given *    creator/type/extension combination to open in an application with *    a different creator, the kind string will be loaded from the *    user`s preferred application. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inType: *      The OSType file type for which you want a kind string. Specify *      kLSUnknownType if no file type information is available. *     *    inCreator: *      The OSType creator for which you want a kind string. Specify *      kLSUnknownCreator if no creator information is available. *     *    inExtension: *      The extension for which you want a kind string. Specify NULL if *      no extension information is available. *     *    outKindString: *      A CFStringRef* to receive the copied kind string object. This *      CFStringRef must be released eventually. *   *  Availability: *    Mac OS X:         in version 10.2 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyKindStringForTypeInfo( OSType inType, OSType inCreator, CFStringRef inExtension, CFStringRef * outKindString) = OSStatus/* can be NULL *//* *  LSCopyKindStringForMIMEType() *   *  Summary: *    Get the kind string for the specified MIME type. *   *  Discussion: *    Returns the localized kind string describing the specified MIME *    type. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inMIMEType: *      The string specifying the MIME type. *     *    outKindString: *      A CFStringRef* to receive the copied kind string object. This *      CFStringRef must be released eventually. *   *  Availability: *    Mac OS X:         in version 10.2 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyKindStringForMIMEType( CFStringRef inMIMEType, CFStringRef * outKindString) = OSStatus/* *  LSGetApplicationForItem() *   *  Summary: *    Return the application used to open an item. *   *  Discussion: *    Consults the binding tables to return the application that would *    be used to open inItemRef if it were double-clicked in the *    Finder. This application will be the user-specified override if *    appropriate or the default otherwise. If no application is known *    to LaunchServices suitable for opening this item, *    kLSApplicationNotFoundErr will be returned. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inItemRef: *      The FSRef of the item for which the application is requested. *     *    inRoleMask: *      Whether to return the editor or viewer for inItemRef. If you *      don`t care which, use kLSRolesAll. *     *    outAppRef: *      Filled in with the FSRef of the application if not NULL. *     *    outAppURL: *      Filled in with the CFURLRef of the application if not NULL. *      THIS FUNCTION, DESPITE ITS NAME, RETAINS THE URL REFERENCE ON *      BEHALF OF THE CALLER. THE CALLER MUST EVENTUALLY RELEASE THE *      RETURNED URL REFERENCE. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSGetApplicationForItem( const FSRef * inItemRef, LSRolesMask inRoleMask, FSRef * outAppRef, CFURLRef * outAppURL) = OSStatus/* can be NULL *//* can be NULL *//* *  LSGetApplicationForInfo() *   *  Summary: *    Return the application used to open items with particular data. *   *  Discussion: *    Consults the binding tables to return the application that would *    be used to open items with type, creator, and/or extension as *    provided if they were double-clicked in the Finder. This *    application will be the default for items like this if one has *    been set. If no application is known to LaunchServices suitable *    for opening such items, kLSApplicationNotFoundErr will be *    returned. Not all three input parameters can be NULL at the same *    time nor can both output parameters be NULL at the same time. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inType: *      The file type to consider. Can be kLSUnknownType. *     *    inCreator: *      The file creator to consider. Can be kLSUnknownCreator. *     *    inExtension: *      The file name extension to consider. Can be NULL. *     *    inRoleMask: *      Whether to return the editor or viewer for inItemRef. If you *      don`t care which, use kLSRolesAll. *     *    outAppRef: *      Filled in with the FSRef of the application if not NULL. *     *    outAppURL: *      Filled in with the CFURLRef of the application if not NULL. *      THIS FUNCTION, DESPITE ITS NAME, RETAINS THE URL REFERENCE ON *      BEHALF OF THE CALLER. THE CALLER MUST EVENTUALLY RELEASE THE *      RETURNED URL REFERENCE. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSGetApplicationForInfo( OSType inType, OSType inCreator, CFStringRef inExtension, LSRolesMask inRoleMask, FSRef * outAppRef, CFURLRef * outAppURL) = OSStatus/* can be NULL *//* can be NULL *//* can be NULL *//* *  LSCopyApplicationForMIMEType() *   *  Summary: *    Return the application used to handle data with the specified *    MIME type. *   *  Discussion: *    The returned application URL will be the user`s preferred handler *    for the MIME type if one has been set. If no user preferred *    application has been set, Launch Services will select a default *    handler for the MIME type. If no application is known to handle *    the MIME type, kLSApplicationNotFoundErr will be returned. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inMIMEType: *      The string specifying the MIME type. *     *    inRoleMask: *      A role mask that the chosen application must satisfy. Use *      kLSRolesAll if the role is not important. *     *    outAppURL: *      Receives the copied CFURLRef, which must be released by the *      caller. *   *  Availability: *    Mac OS X:         in version 10.2 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyApplicationForMIMEType( CFStringRef inMIMEType, LSRolesMask inRoleMask, CFURLRef * outAppURL) = OSStatus/* *  LSGetApplicationForURL() *   *  Summary: *    Return the application used to open an item. *   *  Discussion: *    Consults the binding tables to return the application that would *    be used to open inURL if it were double-clicked in the Finder. *    This application will be the user-specified override if *    appropriate or the default otherwise. If no application is known *    to LaunchServices suitable for opening this item, *    kLSApplicationNotFoundErr will be returned. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inURL: *      The CFURLRef of the item for which the application is requested. *     *    inRoleMask: *      Whether to return the editor or viewer for inItemRef. If you *      don`t care which, use kLSRolesAll. *     *    outAppRef: *      Filled in with the FSRef of the application if not NULL. *     *    outAppURL: *      Filled in with the CFURLRef of the application if not NULL. *      THIS FUNCTION, DESPITE ITS NAME, RETAINS THE URL REFERENCE ON *      BEHALF OF THE CALLER. THE CALLER MUST EVENTUALLY RELEASE THE *      RETURNED URL REFERENCE. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSGetApplicationForURL( CFURLRef inURL, LSRolesMask inRoleMask, FSRef * outAppRef, CFURLRef * outAppURL) = OSStatus/* can be NULL *//* can be NULL *//* *  LSFindApplicationForInfo() *   *  Summary: *    Locate a specific application. *   *  Discussion: *    Returns the application with the corresponding input information. *    The registry of applications is consulted first in order of *    bundleID, then creator, then name. All comparisons are case *    insensitive and `ties` are decided first by version, then by *    native vs. Classic. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inCreator: *      The file creator to consider. Can be kLSUnknownCreator. *     *    inBundleID: *      The bundle ID to consider. Can be NULL. *     *    inName: *      The name to consider. Can be NULL. Must include any extensions *      that are part of the file system name, e.g. `.app`. *     *    outAppRef: *      Filled in with the FSRef of the application if not NULL. *     *    outAppURL: *      Filled in with the CFURLRef of the application if not NULL. *      THIS FUNCTION, DESPITE ITS NAME, RETAINS THE URL REFERENCE ON *      BEHALF OF THE CALLER. THE CALLER MUST EVENTUALLY RELEASE THE *      RETURNED URL REFERENCE. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSFindApplicationForInfo( OSType inCreator, CFStringRef inBundleID, CFStringRef inName, FSRef * outAppRef, CFURLRef * outAppURL) = OSStatus/* can be NULL *//* can be NULL *//* can be NULL *//* can be NULL *//* *  LSCanRefAcceptItem() *   *  Summary: *    Determine whether an item can accept another item. *   *  Discussion: *    Returns in outAcceptsItem whether inTargetRef can accept *    inItemFSRef as in a drag and drop operation. If inRoleMask is *    other than kLSRolesAll then make sure inTargetRef claims to *    fulfill the requested role. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inItemFSRef: *      FSRef of the item about which acceptance is requested. *     *    inTargetRef: *      FSRef of the potential target. *     *    inRoleMask: *      The role(s) the target must claim in order to consider *      acceptance. *     *    inFlags: *      Use kLSAcceptDefault. *     *    outAcceptsItem: *      Filled in with result. Must not be NULL. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCanRefAcceptItem( const FSRef * inItemFSRef, const FSRef * inTargetRef, LSRolesMask inRoleMask, LSAcceptanceFlags inFlags, Boolean * outAcceptsItem) = OSStatus/* *  LSCanURLAcceptURL() *   *  Summary: *    Determine whether an item can accept another item. *   *  Discussion: *    Returns in outAcceptsItem whether inTargetURL can accept *    inItemURL as in a drag and drop operation. If inRoleMask is other *    than kLSRolesAll then make sure inTargetRef claims to fulfill the *    requested role. *   *  Mac OS X threading: *    Thread safe since version 10.2 *   *  Parameters: *     *    inItemURL: *      CFURLRef of the item about which acceptance is requested. *     *    inTargetURL: *      CFURLRef of the potential target. *     *    inRoleMask: *      The role(s) the target must claim in order to consider *      acceptance. *     *    inFlags: *      Use kLSAcceptDefault. *     *    outAcceptsItem: *      Filled in with result. Must not be NULL. *   *  Availability: *    Mac OS X:         in version 10.0 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCanURLAcceptURL( CFURLRef inItemURL, CFURLRef inTargetURL, LSRolesMask inRoleMask, LSAcceptanceFlags inFlags, Boolean * outAcceptsItem) = OSStatus/* *  LSRegisterURL() *   *  Discussion: *    If the specified URL refers to an application or other bundle *    claiming to handle documents or URLs, add the bundle`s document *    and URL claims to the Launch Services database. *   *  Mac OS X threading: *    Thread safe since version 10.3 *   *  Parameters: *     *    inURL: *      The CFURLRef of the item (a directory or file) to be registered. *     *    inUpdate: *      When false, LSRegisterURL does not register the item if it has *      already been registered and the current modification date of *      the item has not changed from when it was last registered. When *      true, the item`s registered info is updated, even if the *      modification has not changed. *   *  Result: *    An OSStatus value: noErr - Success kLSNoRegistrationInfoErr - The *    item does not contain info requiring registration kLSDataErr - *    The item`s property list info is malformed. *   *  Availability: *    Mac OS X:         in version 10.3 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSRegisterURL( CFURLRef inURL, Boolean inUpdate ) = OSStatus/* *  LSRegisterFSRef() *   *  Discussion: *    If the specified FSRef refers to an application or other bundle *    claiming to handle documents or URLs, add the bundle`s document *    and URL claims to the Launch Services database. *   *  Mac OS X threading: *    Thread safe since version 10.3 *   *  Parameters: *     *    inRef: *      The FSRef of the item to be registered. *     *    inUpdate: *      When false, LSRegisterFSRef does not register the item if it *      has already been registered and the current modification date *      of the item has not changed from when it was last registered. *      When true, the item`s registered info is updated, even if the *      modification has not changed. *   *  Result: *    An OSStatus value: noErr - Success kLSNoRegistrationInfoErr - The *    item does not contain info requiring registration kLSDataErr - *    The item`s property list info is malformed. *   *  Availability: *    Mac OS X:         in version 10.3 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSRegisterFSRef( const FSRef * inRef, Boolean inUpdate ) = OSStatus/* *  LSCopyApplicationURLsForURL() *   *  Discussion: *    Returns an array of URLs to applications that offer the requested *    role(s) for the input item. *   *  Mac OS X threading: *    Thread safe since version 10.3 *   *  Parameters: *     *    inURL: *      The CFURLRef of the item for which all suitable applications *      are desired. If the URL is a file URL, it is treated as a *      document, and applications are selected based on the document`s *      type information. Otherwise, applications are selected based on *      the URL`s scheme. *     *    inRoleMask: *      The role(s) which must intersect with the role provided by an *      application for the specified item in order for the application *      to be included in the result. Pass kLSRolesAll if any role is *      acceptable. *   *  Result: *    An array of CFURLRefs, one for each application which can open *    inURL with at least one of the roles in inRoleMask, or NULL if no *    applications can open the item. When an array is returned, you *    must eventually release it. *   *  Availability: *    Mac OS X:         in version 10.3 and later in ApplicationServices.framework *    CarbonLib:        not available in CarbonLib 1.x *    Non-Carbon CFM:   not available */toolbox fn LSCopyApplicationURLsForURL( CFURLRef inURL, LSRolesMask inRoleMask) = Ptr //CFArrayRef#endif_kLSRolesNone    = 0x00000001 /* no claim is made about support for this type/scheme*/_kLSRolesViewer  = 0x00000002 /* claim to view items of this type*/_kLSRolesEditor  = 0x00000004 /* claim to edit items of this type/scheme*/_kLSRolesShell   = 0x00000008 /* claim to execute items of this type*/_kLSRolesAll     = 0xFFFFFFFF /* claim to do it all*///extern const CFStringRef kLSItemContentType AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kLSItemContentType//extern const CFStringRef kLSItemFileType AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kLSItemFileType//extern const CFStringRef kLSItemFileCreator AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;system CFStringRef kLSItemFileCreator//extern const CFStringRef kLSItemQuarantineProperties AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;system CFStringRef kLSItemQuarantinePropertiestoolbox fn LSCopyItemAttribute( const FSRef * inItem, LSRolesMask inRoles, CFStringRef inAttributeName, CFTypeRef * outValue ) = OSStatus // AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;toolbox fn LSSetItemAttribute( const FSRef * inItem, LSRolesMask inRoles,  CFStringRef  inAttributeName, CFTypeRef  inValue ) = OSStatus // AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;