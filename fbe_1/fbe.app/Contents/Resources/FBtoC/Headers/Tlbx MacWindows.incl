include "Tlbx HIToolbar.incl"// part of MacWindows.htoolbox fn GetSheetWindowParent( WindowRef inSheet, WindowRef *  outParentWindow) = OSStatustoolbox fn GetPreviousWindow( WindowRef inWindow ) = WindowRef toolbox fn GetWindowResizeLimits( WindowRef inWindow, HISize *outMinLimits, HISize *outMaxLimits ) = OSStatus#if ndef _DEFINEDINCARBON#define WindowActivationScope as UInt32#endiftoolbox fn GetWindowActivationScope( WindowRef inWindow, WindowActivationScope * outScope ) = OSStatustoolbox fn SetWindowActivationScope( WindowRef inWindow, WindowActivationScope   inScope ) = OSStatus // Brian  {20110518}toolbox fn GetWindowStructureWidths( WindowRef inWindow, Rect *outRect ) = OSStatustoolbox fn SetWindowTitleWithCFString( WindowRef inWindow, CFStringRef inString ) = OSStatus// from Tlbx 8.5 Window Mgr.incl begin enum not output 1_kAlertWindowClass /* “I need your attention now.”*/_kMovableAlertWindowClass /* “I need your attention now, but I’m kind enough to let you switch out of this app to do other things.”*/_kModalWindowClass /* system modal, not draggable*/_kMovableModalWindowClass /* application modal, draggable*/_kFloatingWindowClass /* floats above all other application windows  Available in OS 8.6 or later */_kDocumentWindowClass /* everything else*/// _kDesktopWindowClass = 7 _kUtilityWindowClass = 8_kHelpWindowClass = 10_kSheetWindowClass_kToolbarWindowClass // floats above docs, below floating windows_kPlainWindowClass_kOverlayWindowClass _kSheetAlertWindowClass _kAltPlainWindowClass _kSimpleWindowClass  = 18_kDrawerWindowClass  = 20_kAllWindowClasses = -1 // for GetFrontWindowOfClass etcend enum#if ndef _DEFINEDINCARBON#define WindowAttributes as unsigned long#define WindowPartCode as SInt16#define WindowDefType as UInt32begin record WindowDefTypeUnionKludgebegin uniondim as ptr        defProc /* WindowDefUPP */dim as ptr        classRef /* ToolboxObjectClassRef*/dim as short      procID dim as ptr        rootView /* HIViewRef*/end unionend recordbegin record WindowDefSpecdim as WindowDefType            defTypedim as WindowDefTypeUnionKludge uend record#endif// ndef _DEFINEDINCARBONbegin enum not output_kHIWindowBitCloseBox          = 1_kHIWindowBitZoomBox           = 2_kHIWindowBitCollapseBox       = 4_kHIWindowBitResizable         = 5_kHIWindowBitSideTitlebar      = 6_kHIWindowBitToolbarButton     = 7_kHIWindowBitUnifiedTitleAndToolbar = 8_kHIWindowBitNoTitleBar        = 10_kHIWindowBitTexturedSquareCorners = 11_kHIWindowBitNoTexturedContentSeparator = 12_kHIWindowBitRoundBottomBarCorners = 13_kHIWindowBitDoesNotCycle      = 16_kHIWindowBitNoUpdates         = 17_kHIWindowBitNoActivates       = 18_kHIWindowBitOpaqueForEvents   = 19_kHIWindowBitCompositing       = 20_kHIWindowBitFrameworkScaled   = 21_kHIWindowBitNoShadow          = 22_kHIWindowBitCanBeVisibleWithoutLogin = 23_kHIWindowBitAsyncDrag         = 24_kHIWindowBitHideOnSuspend     = 25_kHIWindowBitStandardHandler   = 26_kHIWindowBitHideOnFullScreen  = 27_kHIWindowBitInWindowMenu      = 28_kHIWindowBitLiveResize        = 29_kHIWindowBitIgnoreClicks      = 30_kHIWindowBitNoConstrain       = 32_kHIWindowBitDoesNotHide       = 33_kHIWindowBitAutoViewDragTracking = 34_kHIWindowBitAutoCalibration   = 36end enumbegin enum not output_kWindowNoAttributes                      = 0_kWindowCloseBoxAttribute                 = (1 << 0) /*  has a close box*/_kWindowHorizontalZoomAttribute           = (1 << 1) /*  has horizontal zoom box*/_kWindowVerticalZoomAttribute             = (1 << 2) /*  has vertical zoom box*/_kWindowFullZoomAttribute                 = _kWindowVerticalZoomAttribute + _kWindowHorizontalZoomAttribute_kWindowCollapseBoxAttribute              = (1 << 3) /*  has a collapse box*/_kWindowResizableAttribute                = (1 << 4) /*  is resizable*/_kWindowSideTitlebarAttribute             = (1 << 5) /*  wants a titlebar on the side (floating window class only)*/_kWindowToolbarButtonAttribute            = (1 << 6) //  has a toolbar button. Available for windows of kDocumentWindowClass._kWindowUnifiedTitleAndToolbarAttribute   = (1 << 7)_kWindowMetalAttribute                    = (1 << 8) // avail for doc windows in 10.2, floating windows in 10.3_kWindowNoTitleBarAttribute               = (1 << 9)_kWindowTexturedSquareCornersAttribute    = (1 << 10)_kWindowMetalNoContentSeparatorAttribute  = (1 << 11)_kWindowHasRoundBottomBarCornersAttribute = (1 << 12)_kWindowDoesNotCycleAttribute             = (1 << 15)_kWindowNoUpdatesAttribute                = (1 << 16) /* receives no update events*/_kWindowNoActivatesAttribute              = (1 << 17) /* receives no activate events*/_kWindowOpaqueForEventsAttribute          = (1 << 18)_kWindowCompositingAttribute              = (1 << 19)_kWindowFrameworkScaledAttribute          = (1 << 20)_kWindowNoShadowAttribute                 = (1 << 21)_kWindowCanBeVisibleWithoutLoginAttribute = (1 << 22)_kWindowAsyncDragAttribute                = (1 << 23)_kWindowHideOnSuspendAttribute            = (1 << 24)_kWindowStandardHandlerAttribute          = (1 << 25)_kWindowHideOnFullScreenAttribute         = (1 << 26)_kWindowInWindowMenuAttribute             = (1 << 27)_kWindowLiveResizeAttribute               = (1 << 28) //supports live resizing._kWindowIgnoreClicksAttribute             = (1 << 29)_kWindowNoConstrainAttribute              = 0x80000000_kWindowStandardDocumentAttributes        = _kWindowCloseBoxAttribute + _kWindowFullZoomAttribute + _kWindowCollapseBoxAttribute + _kWindowResizableAttribute_kWindowStandardFloatingAttributes        = _kWindowCloseBoxAttribute + _kWindowCollapseBoxAttributeend enum/*——————————————————————————————————————————————————————————————————————————————————————*//* • System 7 Window Positioning Constants                                              *//* Passed into StandardAlert and used in ‘WIND’, ‘DLOG’, and ‘ALRT’ templates           *//* StandardAlert uses zero to specify the default position. Other calls use zero to     *//* specify “no position”.  Do not pass these constants to RepositionWindow.  Do not     *//* store these constants in the BasicWindowDescription of a ‘wind’ resource.            *//*——————————————————————————————————————————————————————————————————————————————————————*/begin enum not output_kWindowNoPosition              = 0x0000_kWindowDefaultPosition         = 0x0000 // used by StandardAlert_kWindowCenterMainScreen        = 0x280A_kWindowAlertPositionMainScreen = 0x300A_kWindowStaggerMainScreen         = 0x380A_kWindowCenterParentWindow        = 0xA80A_kWindowAlertPositionParentWindow = 0xB00A_kWindowStaggerParentWindow       = 0xB80A_kWindowCenterParentWindowScreen  = 0x680A_kWindowAlertPositionParentWindowScreen = 0x700A_kWindowStaggerParentWindowScreen = 0x780Aend enum#if ndef _DEFINEDINCARBON#define WindowPositionMethod as unsigned long#endif// ndef _DEFINEDINCARBONbegin enum not output 1 // WindowPositionMethod_kWindowCenterOnMainScreen_kWindowCenterOnParentWindow_kWindowCenterOnParentWindowScreen_kWindowCascadeOnMainScreen_kWindowCascadeOnParentWindow_kWindowCascadeOnParentWindowScreen_kWindowAlertPositionOnMainScreen_kWindowAlertPositionOnParentWindow_kWindowAlertPositionOnParentWindowScreenend enumtoolbox fn CreateNewWindow( WindowClass windowClass, WindowAttributes attributes, const Rect *contentBounds, WindowRef *outWindow ) = OSStatustoolbox fn CreateWindowFromResource( SInt16 resID, WindowRef *outWindow ) = OSStatus// Create a window from a ‘WIND’ resourcetoolbox fn HIWindowCreate(¬  WindowClass            inClass,¬  const SInt32 *         inAttributes,¬  const WindowDefSpec *  inDefSpec,¬  HICoordinateSpace      inSpace,¬  const HIRect *         inBounds,¬  WindowRef *            outWindow) = OSStatus // 10.5/*toolbox fn StoreWindowIntoCollection(WindowRef,Collection ) = OSStatus// window persistencetoolbox fn CreateWindowFromCollection(Collection,@WindowRef) = OSStatustoolbox fn GetWindowOwnerCount(WindowRef,@UInt32) = OSStatus// window refcountingtoolbox fn CloneWindow(WindowRef) = OSStatus*/'~Palettestoolbox fn InitFloatingWindows = OSStatus// *** delete?toolbox fn ShowFloatingWindows = OSStatustoolbox fn HideFloatingWindows = OSStatustoolbox fn AreFloatingWindowsVisible = Booleantoolbox fn FrontNonFloatingWindow = WindowRef'~Window Proxiestoolbox fn SetWindowProxyFSSpec( WindowRef w, const FSSpec *fss ) = OSStatustoolbox fn GetWindowProxyFSSpec( WindowRef w, FSSpec *fss ) = OSStatustoolbox fn SetWindowProxyAlias( WindowRef w, Handle inAlias )  = OSStatustoolbox fn GetWindowProxyAlias( WindowRef w, Handle *alias ) = OSStatustoolbox fn SetWindowProxyCreatorAndType( WindowRef w, OSType creator, OSType type, SInt16 vRefNum ) = OSStatustoolbox fn GetWindowProxyIcon( WindowRef w, ptr *outIcon ) = OSStatus// Ptr is IconReftoolbox fn SetWindowProxyIcon( WindowRef w, ptr icon ) = OSStatus// Ptr is IconReftoolbox fn RemoveWindowProxy( WindowRef w ) = OSStatustoolbox fn BeginWindowProxyDrag( WindowRef w, ptr * outNewDrag, RgnHandle outDragOutlineRgn ) = OSStatus// Ptr is DragReftoolbox fn EndWindowProxyDrag( WindowRef w, ptr theDrag ) = OSStatus// Ptr is DragReftoolbox fn TrackWindowProxyFromExistingDrag( WindowRef w, Point startPt, ptr drag, RgnHandle  inDragOutlineRgn ) = OSStatus// Ptr is DragReftoolbox fn TrackWindowProxyDrag( WindowRef w, Point startPt ) = OSStatustoolbox fn HiliteWindowFrameForDrag( WindowRef w, Boolean hilited ) = OSStatustoolbox fn SetWindowModified( WindowRef w, Boolean modified ) = OSStatustoolbox fn IsWindowModified( WindowRef w ) = Booleantoolbox fn IsWindowPathSelectClick( WindowRef w, const EventRecord * event ) = Booleantoolbox fn WindowPathSelect( WindowRef w, MenuRef m, SInt32 * outMenuResult) = OSStatus// MenuRef can be null'~Zoomingtoolbox fn IsWindowInStandardState( WindowRef w, const Point *inIdealSize, Rect *outIdealStandardState ) = Booleantoolbox fn ZoomWindowIdeal( WindowRef w, WindowPartCode inPartCode, Point *ioIdealSize ) = OSStatustoolbox fn GetWindowIdealUserState( WindowRef w, Rect *outUserState ) = OSStatustoolbox fn SetWindowIdealUserState( WindowRef w, const Rect *inUserState ) = OSStatus'~Sizingtoolbox fn RepositionWindow( WindowRef window, WindowRef parentWindow, WindowPositionMethod method ) = OSStatus// in Tlbx Standard.incl  toolbox fn SetWindowBounds(WindowRef,WindowRegionCode,@Rect) = OSStatus// in Tlbx Standard.incl  toolbox fn GetWindowBounds(WindowRef,WindowRegionCode,Rect) = OSStatustoolbox fn MoveWindowStructure( WindowRef w, short hGlobal, short vGlobal ) = OSStatustoolbox fn ResizeWindow( WindowRef w, Point inStartPoint, const Rect *inSizeConstraints, Rect *outNewContentRect ) = Boolean'~Contenttoolbox fn SetWindowContentColor( WindowRef w, const RGBColor *color ) = OSStatustoolbox fn GetWindowContentColor( WindowRef w, RGBColor *color ) = OSStatustoolbox fn GetWindowContentPattern( WindowRef w, Handle outPixPat ) = OSStatustoolbox fn SetWindowContentPattern( WindowRef w, Handle pixPat ) = OSStatus'~Misctoolbox fn SetWindowProperty( WindowRef w, OSType creator, OSType tag, UInt32 propertySize, const ptr *propertyBuffer ) = OSStatustoolbox fn GetWindowProperty( WindowRef w, OSType propertyCreator, OSType propertyTag, UInt32 bufferSize, UInt32 * actualSize, char* propertyBuffer ) = OSStatus // * actualSize can be nulltoolbox fn GetWindowPropertySize( WindowRef w, OSType creator, OSType tag, UInt32 * size ) = OSStatustoolbox fn RemoveWindowProperty( WindowRef w, OSType creator, OSType tag ) = OSStatus///toolbox fn IsValidWindowPtr(WindowRef) = booleantoolbox fn CreateStandardWindowMenu( OptionBits inOptions, MenuRef *outMenu ) = OSStatus// first param must be 0toolbox fn ShowSheetWindow( WindowRef inSheet, WindowRef parent ) = OSStatustoolbox fn HideSheetWindow( WindowRef w ) = OSStatus'~Window Transitions#if ndef _DEFINEDINCARBON#define WindowTransitionEffect as UInt32#define WindowTransitionAction as UInt32#endif// ndef _DEFINEDINCARBONbegin enum not output_kWindowZoomTransitionEffect   = 1 //Finder-like zoom rectangles. Use with Show or Hide transition actions_kWindowSheetTransitionEffect  = 2 //Zoom in/out from parent. Use with TransitionWindowAndParent and Show or Hide transition actions_kWindowSlideTransitionEffect  = 3 // Slide the window into its new position. Use with Move or Resize transition actions_kWindowFadeTransitionEffect   = 4_kWindowGenieTransitionEffect  = 5end enumbegin enum not output_kWindowShowTransitionAction   = 1 //param is rect in global coordinates from which to start the animation_kWindowHideTransitionAction   = 2 //param is rect in global coordinates at which to end the animation_kWindowMoveTransitionAction   = 3 //param is rect in global coordinates of window's new structure bounds_kWindowResizeTransitionAction = 4  //param is rect in global coordinates of window's new structure boundsend enumtoolbox fn TransitionWindow( WindowRef w, WindowTransitionEffect inEffect, WindowTransitionAction inAction, const Rect *inRect ) = OSStatus// TransitionWindowAndParent OS X onlytoolbox fn TransitionWindowAndParent( WindowRef inWindow, WindowRef inParentWindow, WindowTransitionEffect inEffect, WindowTransitionAction inAction, const Rect *inRect )  = OSStatus//rect can be NULL'~Class, Attributestoolbox fn GetWindowClass( WindowRef w, WindowClass *outClass ) = OSStatustoolbox fn GetWindowAttributes( WindowRef w, WindowAttributes *outAttributes ) = OSStatus/*    This API is useful because some window classes support different *    attributes on different platforms (for example, floating windows *    can have collapse boxes on 9, but not on X), and the Window *    Manager will return an error if you attempt to create a window *    with attributes that aren't supported for the requested window *    class. You can use this API to remove attributes that are not *    supported by the current platform before calling CreateNewWindow. *  Availability: *    Mac OS X:         in version 10.1 and later in Carbon.framework *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.1 and later*/toolbox fn GetAvailableWindowAttributes( WindowClass inClass ) = WindowAttributes/*   Routines available from Mac OS 9.0 forward   or from Mac OS 8.1 forward when linking to CarbonLib 1.0 forward*/toolbox fn ChangeWindowAttributes( WindowRef w, WindowAttributes setTheseAttributes, WindowAttributes clearTheseAttributes ) = OSStatus/*!           SetWindowClass           Changes the window class of a window.MacWindows.h warns against using this, as it is dnagerous, and will be changedtoolbox fn SetWindowClass(WindowRef,WindowClass) = OSStatus*/'~Window Modality/*!    kWindowModalityNone                        A window does not prevent interaction with any other                        window in the system.                        kWindowModalitySystemModal                        A window prevents interaction with all other windows in                        the system. Only available in CarbonLib. Mapped to                         kWindowModalityAppModal in Mac OS X.                        kWindowModalityAppModal                        A window prevents interaction with other windows in the same process.                        kWindowModalityWindowModal                        A window prevents interaction with a single other window.*/#if ndef _DEFINEDINCARBON#define WindowModality as unsigned long#endif// ndef _DEFINEDINCARBONbegin enum not output // WindowModality_kWindowModalityNone_kWindowModalitySystemModal_kWindowModalityAppModal_kWindowModalityWindowModalend enum/*       SetWindowModality         Sets the modality of a window.        The modality of a window is used by the Carbon event manager        to automatically determine appropriate event handling.          inWindow                        The window whose modality to set.          inModalKind                        The new modality for the window          inUnavailableWindow                        If the window is becoming window-modal, this parameter                        specifies the window to which the inWindow parameter is                        modal. The unavailableWindow will not be available while                        inWindow is in window-modal state.*/toolbox fn SetWindowModality( WindowRef inWindow, WindowModality inModalKind, WindowRef inUnavailableWindow ) = OSStatus/*!       GetWindowModality       Retrieves the modality of a window.             inWindow                        The window whose modality to retrieve.          outModalKind                        On exit, contains the modality of the window          outUnavailableWindow                        On exit, if the window is window-modal, contains the                        target window of the specified window's modality.*/toolbox fn GetWindowModality( WindowRef inWindow, WindowModality *outModalKind, WindowRef *outUnavailableWindow ) = OSStatus'~WindowRecord accessor macros/* Getters *///toolbox fn GetWindowList() = WindowRef//toolbox fn GetWindowPort(WindowRef) = CGrafPtr//toolbox fn GetWindowKind(WindowRef) = short//toolbox fn IsWindowVisible(WindowRef) = Boolean//toolbox fn IsWindowHilited(WindowRef) = Boolean//toolbox fn IsWindowUpdatePending(WindowRef) = Boolean//toolbox fn GetNextWindow (WindowRef) = WindowRef//toolbox GetWindowStandardState(WindowRef, rect)//toolbox GetWindowUserState(WindowRef,rect)//toolbox fn GetControlListFromWindow(WindowRef) = handle // not in Carbon/* Setters */toolbox SetWindowKind( WindowRef w, short kind )toolbox fn GetNextWindowOfClass( WindowRef inWindow, WindowClass inWindowClass, Boolean mustBeVisible) = WindowReftoolbox fn GetFrontWindowOfClass( WindowClass inWindowClass, Boolean mustBeVisible) = WindowReftoolbox fn GetAvailableWindowPositioningBounds( GDHandle inDevice, Rect *availableRect) = OSStatus//toolbox SetWindowStandardState(WindowRef,rect)'Date { 10/11/02 }//toolbox SetWindowUserState(WindowRef,rect)/* Utilities *//* set the current QuickDraw port to the port associated with the window *///toolbox SetPortWindowPort(WindowRef)//toolbox GetWindowPortBounds (WindowRef,rect bounds )//toolbox fn GetWindowFromPort(CGrafPtr) = WindowRef/* To prevent upward dependencies, GetDialogFromWindow() is defined in the Dialogs interface: *//*      pascal DialogRef        GetDialogFromWindow(WindowRef window); */// from Subs WindowConstants.incl  20090805_kWindowConstrainMayResize           = 1_kWindowConstrainMoveRegardlessOfFit = 2_kWindowConstrainAllowPartial        = 4_kWindowConstrainCalcOnly            = 8_kWindowConstrainUseTransitionWindow = 16_kWindowConstrainStandardOptions     = _kWindowConstrainMoveRegardlessOfFit'~'5toolbox fn ConstrainWindowToScreen (WindowRef inWindowRef,long inRegionCode,long inOptions,const Rect * inScreenRect,Rect * outStructure) = OSStatus'~'5_kWindowDefProcPtr             = 0 /* raw proc-ptr based access*/_kWindowDefObjectClass         = 1 /* event-based definition (Carbon 1.1 or later)*/_kWindowDefProcID              = 2 /* explicit proc ID; overrides the window class default proc ID*/'~'1_kWindowCanGrow                = (1 << 0)_kWindowCanZoom                = (1 << 1)_kWindowCanCollapse            = (1 << 2)_kWindowIsModal                = (1 << 3)_kWindowCanGetWindowRegion     = (1 << 4)_kWindowIsAlert                = (1 << 5)_kWindowHasTitleBar            = (1 << 6)_kWindowStateTitleChanged      = (1 << 0)'~'1_kWindowSupportsDragHilite     = (1 << 7)/* window definition supports kWindowMsgDragHilite*/_kWindowSupportsModifiedBit    = (1 << 8) /* window definition supports kWindowMsgModified*/_kWindowCanDrawInCurrentPort   = (1 << 9)/* window definition supports kWindowMsgDrawInCurrentPort*/_kWindowCanSetupProxyDragImage = (1 << 10)/* window definition supports kWindowMsgSetupProxyDragImage*/_kWindowCanMeasureTitle        = (1 << 11)/* window definition supports kWindowMsgMeasureTitle*/_kWindowWantsDisposeAtProcessDeath = (1 << 12)/* window definition wants a Dispose message for windows still extant during ExitToShell*/_kWindowSupportsGetGrowImageRegion = (1 << 13)/* window definition will calculate the grow image region manually.*/_kWindowDefSupportsColorGrafPort = 0x40000002'~'1_kWindowMsgDraw                = 0_kWindowMsgHitTest             = 1_kWindowMsgCalculateShape      = 2_kWindowMsgInitialize          = 3_kWindowMsgCleanUp             = 4_kWindowMsgDrawGrowOutline     = 5_kWindowMsgDrawGrowBox         = 6/* Messages available from Mac OS 8.0 forward*/_kWindowMsgGetFeatures         = 7_kWindowMsgGetRegion           = 8/* Messages available from Mac OS 8.5 forward*/_kWindowMsgDragHilite          = 9    /* parameter boolean indicating on or off*/_kWindowMsgModified            = 10   /* parameter boolean indicating saved (false) or modified (true)*/_kWindowMsgDrawInCurrentPort   = 11   /* same as kWindowMsgDraw, but must draw in current port*/_kWindowMsgSetupProxyDragImage = 12   /* parameter pointer to SetupWindowProxyDragImageRec*/_kWindowMsgStateChanged        = 13   /* something about the window's state has changed*/_kWindowMsgMeasureTitle        = 14    /* measure and return the ideal title width*/_kWindowMsgGetGrowImageRegion  = 19    /* get region to xor during grow/resize. parameter pointer to GetGrowImageRegionRec.*/'~'1#if ndef _kWindowTitleBarRgnbegin enum not output_kWindowTitleBarRgn            = 0_kWindowTitleTextRgn           = 1_kWindowCloseBoxRgn            = 2_kWindowZoomBoxRgn             = 3_kWindowDragRgn                = 5_kWindowGrowRgn                = 6_kWindowCollapseBoxRgn         = 7_kWindowTitleProxyIconRgn      = 8      /* Mac OS 8.5 forward*/_kWindowStructureRgn           = 32_kWindowContentRgn             = 33     /* Content area of the window; empty when the window is collapsed*/_kWindowUpdateRgn              = 34     /* Carbon forward*/_kWindowOpaqueRgn              = 35     /* Mac OS X: Area of window considered to be opaque. Only valid for windows with alpha channels.*/_kWindowGlobalPortRgn          = 40     /* Carbon forward - bounds of the window’s port in global coordinates; not affected by CollapseWindow*/end enum#endiftoolbox fn SetWindowToolbar( WindowRef inWindow, HIToolbarRef inToolbar ) = OSStatustoolbox fn GetWindowToolbar( WindowRef inWindow, HIToolbarRef *outToolbar) = OSStatustoolbox fn ShowHideWindowToolbar( WindowRef inWindow, Boolean inShow, Boolean inAnimate ) = OSStatustoolbox fn IsWindowToolbarVisible( WindowRef inWindow ) = Booleantoolbox fn SetWindowAlpha( WindowRef inWindow, float inAlpha ) = OSStatustoolbox fn GetWindowAlpha( WindowRef inWindow, float * outAlpha ) = OSStatus#if ndef _DEFINEDINCARBON#define HIWindowRef as WindowRef_kHIWindowBitRoundBottomBarCorners = 13_kWindowHasRoundBottomBarCornersAttribute = 1 << (_kHIWindowBitRoundBottomBarCorners - 1)begin record HIContentBorderMetricsdim as CGFloat   topdim as CGFloat   leftdim as CGFloat   bottomdim as CGFloat   rightend recordtoolbox fn HIWindowSetContentBorderThickness( HIWindowRef inWindow, const HIContentBorderMetrics * inBorderThickness ) = OSStatustoolbox fn HIWindowFlush( HIWindowRef inWindow ) = OSStatus#endif// ndef _DEFINEDINCARBON#if ndef _DEFINEDINCARBON#define WindowDrawerState as UInt32#endif// ndef _DEFINEDINCARBON/* START DRAWERS   Drawers( i.e. drawer windows ) are supported in Carbon by Mac OS X 10.2 and later. To create and use a drawer:  - Create a window using kDrawerWindowClass. You must also use compositing mode with drawers; this mode is enabled by passing kWindowCompositingAttribute to CreateNewWindow.  - Either install the standard window event handler on the drawer window, or use your own Carbon event or WaitNextEvent code to handle user interaction with the drawer. If you do not use the standard window event handler, you should call ResizeWindow in response to clicks on the grow region of the drawer if you want the drawer to be resizable.  - Set the drawer's parent window with the SetDrawerParent function. The parent is the window on which the drawer will open.  - Optionally, install a Carbon event handler on the drawer or the drawer's parent window for the kEventWindowDrawerOpening/Opened/Closing/Closed events, to be notified when the drawer has started or finished opening or closing.  - Optionally, set the drawer's preferred edge on the parent window with the SetDrawerPreferredEdge function. If you do not set a preferred edge, the drawer opens on the parent's left side on a left-to-right system, or on the parent's right side on a right-to-left system.  - Optionally, set the drawer's offsets with the SetDrawerOffsets function. The offsets control the amount of inset between the edge of the parent's content area and the edge of the drawer's structure. If you do not set any offsets, the drawer's edges are flush with the edges of the parent's content.  - Optionally, set the drawer's minimum and maximum sizes with the SetWindowResizeLimits function. Or, install a Carbon event handler on the drawer to handle the kEventWindow- GetMinimumSize and kEventWindowGetMaximumSize events. The drawer's minimum and maximum sizes control how small or large it will resize together with the parent. If you do not set resize limits, the drawer will be capable of resizing to default small and large limits.  - Call ToggleDrawer to open or close the drawer, or use OpenDrawer or CloseDrawer if you require more control over how the drawer opens or closes.*//* * GetDrawerPreferredEdge() *  * Summary: * Returns the preferred parent window edge of a drawer. *  * Discussion: * Drawers start out with a preferred parent window edge of * kWindowEdgeDefault. On left-to-right systems, the default edge is * the left edge of the parent window; on right-to-left systems, the * default edge is the right edge. You can set the preferred edge * with SetDrawerPreferredEdge. If there's not enough room on the * preferred edge, the drawer will automatically switch to the * opposite edge. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window whose preferred edge to retrieve. *  * Result: * The preferred edge of the drawer window. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn GetDrawerPreferredEdge( WindowRef inDrawerWindow ) = OptionBits//  AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * SetDrawerPreferredEdge() *  * Summary: * Sets the preferred parent window edge of a drawer. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window whose preferred edge to set. *  * inEdge: * The preferred edge of the drawer window. Note that although the * WindowEdge enumeration has values appropriate for a bitfield, * the current implementation does not support receiving more than * one edge bit in this parameter. You can also pass * kWindowEdgeDefault to allow the Window Manager to pick an edge. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn SetDrawerPreferredEdge( WindowRef inDrawerWindow, OptionBits inEdge ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * GetDrawerCurrentEdge() *  * Summary: * Returns the current parent window edge on which a drawer is * displayed. *  * Discussion: * If the drawer window is currently visible, this API returns the * parent window edge on which the drawer is displayed. If the * drawer is not visible, this API determines on which edge of the * parent window the drawer should be displayed, given the current * size of the drawer, position of the parent, and preferred edge * for the drawer. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window whose current edge to retrieve. *  * Result: * The current edge of the drawer window. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn GetDrawerCurrentEdge( WindowRef inDrawerWindow ) = OptionBits//  AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * GetDrawerState() *  * Summary: * Returns the current state of a drawer: opening, open, closing, or * closed. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window whose state to retrieve. *  * Result: * The current state of the drawer window. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn GetDrawerState( WindowRef inDrawerWindow ) = WindowDrawerState//  AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * GetDrawerParent() *  * Summary: * Returns the parent window of a drawer. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window whose parent window to retrieve. *  * Result: * The drawer's parent window, or NULL if the drawer has no assigned * parent. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn GetDrawerParent( WindowRef inDrawerWindow ) = WindowRef//  AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * SetDrawerParent() *  * Summary: * Sets the parent window of a drawer. *  * Discussion: * In Mac OS X 10.4 and 10.5, this API incorrectly increments the * refcount of the drawer window, and you must either destroy the * drawer parent window or use SetDrawerParent( drawer, NULL ) on * the drawer window before destroying the drawer. This extra step * is not required in Mac OS X 10.2, 10.3, or 10.6 and later; in * those versions you may simply release the drawer window when * you're done with it and it will be automatically removed from the * parent. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window whose parent window to set. *  * inParent: * The drawer's new parent window, or NULL if the drawer should * have no parent. *  * Result: * An operating system result code. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn SetDrawerParent( WindowRef inDrawerWindow, WindowRef inParent ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * SetDrawerOffsets() *  * Summary: * Sets the offsets from the beginning and end of the parent window * to the beginning and end of the drawer window. *  * Discussion: * The drawer offsets control the positioning of the drawer relative * to its parent window. When a drawer is first created, its offsets * are zero. When a drawer is positioned, it is initially given a * height or width equal to the height or width of the content area * of the parent to which it is attached. If a drawer is opening on * the left side of its parent, for example, the drawer's height * will be the height of the parent's content area. In this case, * the top side of the drawer window is called the leading edge of * the drawer, and the bottom side of the drawer window is called * the trailing edge of the drawer. The drawer's size is then * adjusted by the leading and trailing offsets. The leading edge of * the drawer is moved inward by an amount equal to the leading * offset, and the trailing edge is moved inward by an amount equal * to the trailing offset. For example, if the leading and trailing * offsets are five and fifteen, then the top edge of a left-opening * drawer will be five pixels inside the top edge of the parent * window's content area, and the bottom edge of the drawer will be * fifteen pixels inside the bottom edge of the parent's content * area. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window whose offsets to change. *  * inLeadingOffset: * The new leading offset, in pixels. Pass kWindowOffsetUnchanged * if you don't want to change the leading offset. *  * inTrailingOffset: * The new trailing offset, in pixels. Pass kWindowOffsetUnchanged * if you don't want to change the trailing offset. *  * Result: * An operating system result code. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn SetDrawerOffsets( WindowRef inDrawerWindow, CGFloat inLeadingOffset, CGFloat inTrailingOffset ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * GetDrawerOffsets() *  * Summary: * Returns the offsets from the beginning and end of the parent * window to the beginning and end of the drawer window. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window whose offsets to retrieve. *  * outLeadingOffset: * On exit, contains the drawer's leading offset. Pass NULL if you * don't need this information returned. *  * outTrailingOffset: * On exit, contains the drawer's trailing offset. Pass NULL if * you don't need this information returned. *  * Result: * An operating system result code. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn GetDrawerOffsets( WindowRef inDrawerWindow, CGFloat * outLeadingOffset, CGFloat * outTrailingOffset ) = OSStatus// /* can be NULL */ AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * ToggleDrawer() *  * Summary: * Toggles a drawer from open to closed, or vice versa. *  * Discussion: * ToggleDrawer opens the drawer if it is closed, opening, or * closing. If the drawer is open, it closes the drawer. *  * ToggleDrawer attempts to open the drawer on its preferred edge, * but if there is not enough room on that edge, it will try the * opposite edge instead. If there is insufficient room on either * edge, the drawer will open on the preferred edge but may extend * offscreen, under the Dock, or under the menubar. *  * The opening or closing of the drawer is performed asynchronously; * ToggleDrawer installs an event loop timer that opens or closes * the drawer after ToggleDrawer returns to the caller. Therefore, * the caller must be running its event loop for the drawer to open * or close. To open or close the drawer synchronously, use the * OpenDrawer or CloseDrawer APIs. *  * ToggleDrawer retains the drawer window while the drawer is * opening or closing, and releases it when the drawer is fully * opened or closed. *  * ToggleDrawer sends the kEventWindowDrawerOpening, * kEventWindowDrawerOpened, kEventWindowDrawerClosing, and * kEventWindowDrawerClosed events as the drawer opens or closes. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window to open or close. *  * Result: * An operating system result code. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn ToggleDrawer( WindowRef inDrawerWindow ) = OSStatus//  AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * OpenDrawer() *  * Summary: * Opens a drawer on a specified parent window edge. *  * Discussion: * OpenDrawer may open the drawer either synchronously or * asynchronously, depending on the value of the inAsync parameter. * If inAsync is true, OpenDrawer installs an event loop timer that * opens the drawer after OpenDrawer returns to the caller; * therefore, the caller must be running its event loop for the * drawer to open. If inAsync is false, OpenDrawer opens the drawer * completely before returning to the caller. *  * OpenDrawer retains the drawer window while the drawer is opening, * and releases it when the drawer is fully open. *  * OpenDrawer sends the kEventWindowDrawerOpening event to the * drawer, the drawer's parent, and the application before opening * the drawer. If an event handler for this event returns * userCanceledErr, OpenDrawer will return immediately without * opening the drawer. OpenDrawer sends the kEventWindowDrawerOpened * event to the drawer, the drawer's parent, and the application * after the drawer has finished opening. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window to open. *  * inEdge: * The parent window edge on which to open the drawer. Pass * kWindowEdgeDefault to use the drawer's preferred edge. If there * is not enough room on the preferred edge, OpenDrawer will try * the opposite edge instead. If there is insufficient room on * either edge, the drawer will open on the preferred edge but may * extend offscreen, under the Dock, or under the menubar. *  * inAsync: * Whether to open the drawer synchronously (the drawer is * entirely opened before the function call returns) or * asynchronously (the drawer opens using an event loop timer * after the function call returns). *  * Result: * An operating system result code. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn OpenDrawer( WindowRef inDrawerWindow, OptionBits inEdge, Boolean inAsync ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * CloseDrawer() *  * Summary: * Closes a drawer. *  * Discussion: * CloseDrawer may close the drawer either synchronously or * asynchronously, depending on the value of the inAsync parameter. * If inAsync is true, CloseDrawer installs an event loop timer that * closes the drawer after CloseDrawer returns to the caller; * therefore, the caller must be running its event loop for the * drawer to close. If inAsync is false, CloseDrawer closes the * drawer completely before returning to the caller. *  * CloseDrawer retains the drawer window while the drawer is * closing, and releases it when the drawer is fully closed. *  * CloseDrawer sends the kEventWindowDrawerClosing event to the * drawer, the drawer's parent, and the application before closing * the drawer. If an event handler for this event returns * userCanceledErr, CloseDrawer will return immediately without * closing the drawer. CloseDrawer sends the * kEventWindowDrawerClosed event to the drawer, the drawer's * parent, and the application after the drawer has finished closing. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inDrawerWindow: * The drawer window to close. *  * inAsync: * Whether to close the drawer synchronously (the drawer is * entirely closed before the function call returns) or * asynchronously (the drawer closes using an event loop timer * after the function call returns). *  * Result: * An operating system result code. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn CloseDrawer( WindowRef inDrawerWindow, Boolean inAsync ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * HIWindowCopyDrawers() *  * Summary: * Returns an array of the drawers that are attached to a window. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inWindow: * The window whose drawers to return. *  * outDrawers: * On exit, an array containing WindowRefs. Each array entry is a * drawer attached to the specified window. The array will be * valid, but empty, if the window has no drawers. *  * Availability: * Mac OS X: in version 10.5 and later in Carbon.framework [32-bit only] * CarbonLib: not available * Non-Carbon CFM: not available*/toolbox fn HIWindowCopyDrawers( WindowRef inWindow, CFArrayRef * outDrawers ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;// END DRAWERS/* * IsWindowActive() *  * Summary: * Indicates whether a window is active. *  * Discussion: * Whether a window is considered active is determined by its * activation scope, hiliting, and z-order. For windows that have an * activation scope of kWindowActivationScopeAll, a window is active * if it is the window returned by the ActiveNonFloatingWindow API, * or if it is in the same window group as the window returned by * that API and the window group has the * kWindowGroupAttrSharedActivation attribute. For windows that have * some other activation scope, the window is active if its window * frame is hilited and the window is the frontmost window in its * window group.  *  * The IsWindowActive API does not indicate whether the window has * keyboard focus. To get the window with keyboard focus, use * GetUserFocusWindow(). *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inWindow: * The window whose active state to retrieve. *  * Availability: * Mac OS X: in version 10.0 and later in Carbon.framework [32-bit only] * CarbonLib: in CarbonLib 1.4 and later * Non-Carbon CFM: not available*/toolbox fn IsWindowActive( WindowRef inWindow ) = Boolean//  AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * ActivateWindow() *  * Summary: * Activates or deactivates a window. *  * Discussion: * Window activation consists of two steps: hiliting the window * frame and sending an activate event to the window. ActivateWindow * handles both of these steps and also updates internal Window * Manager state. If you just need to hilite the window frame, you * may use HiliteWindow. If you need to send an activate event, you * should always use ActivateWindow rather than creating and sending * the event yourself. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inWindow: * The window to activate or deactivate. *  * inActivate: * Whether to activate or deactivate the window. *  * Availability: * Mac OS X: in version 10.0 and later in Carbon.framework [32-bit only] * CarbonLib: in CarbonLib 1.4 and later * Non-Carbon CFM: not available*/toolbox fn ActivateWindow( WindowRef inWindow, Boolean inActivate ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * CopyWindowTitleAsCFString() *  * Mac OS X threading: * Not thread safe *  * Availability: * Mac OS X: in version 10.0 and later in Carbon.framework [32-bit only] * CarbonLib: in CarbonLib 1.1 and later * Non-Carbon CFM: not available*/toolbox fn CopyWindowTitleAsCFString( WindowRef inWindow, CFStringRef * outString ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;/* * HIWindowGetBounds() *  * Summary: * Retrieves the bounds of a specified region of a window. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inWindow: * The window whose bounds to return. *  * inRegion: * The window region whose bounds to return. *  * inSpace: * The coordinate space in which the bounds should be returned. * This must be kHICoordSpaceWindow, kHICoordSpaceScreenPixel, or * kHICoordSpace72DPIGlobal. *  * outBounds: * On exit, contains the bounds of the specified window region. If * the region is not supported, this parameter is not modified. *  * Result: * An operating system result code. errWindowRegionCodeInvalid is * returned if the window does not support the specified window * region. *  * Availability: * Mac OS X: in version 10.5 and later in Carbon.framework [32-bit only] * CarbonLib: not available * Non-Carbon CFM: not available*/toolbox fn HIWindowGetBounds( WindowRef inWindow, WindowRegionCode inRegion, HICoordinateSpace inSpace, HIRect * outBounds ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* * HIWindowSetBounds() *  * Summary: * Sets the bounds of a window based on either the structure or * content region of the window. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inWindow: * The window whose bounds to set. *  * inRegion: * The window region on which to base the window's new bounds. * This parameter must be either kWindowStructureRgn or * kWindowContentRgn. *  * inSpace: * The coordinate space in which the bounds are expressed. This * must be kHICoordSpaceWindow, kHICoordSpaceScreenPixel, or * kHICoordSpace72DPIGlobal. *  * inBounds: * The new bounds of the specified window region. If the * coordinate space is kHICoordSpaceWindow, then the origin of the * bounds is a window-relative value. Therefore, you can use the * Window coordinate space to resize a window without first * getting its current bounds by setting the origin to (0,0), or * you can offset a window from its current position by setting * the origin to the offset amount and the size to the window's * current size. *  * Result: * An operating system result code. errWindowRegionCodeInvalid is * returned if the inRegion parameter is any value other than * kWindowStructureRgn or kWindowContentRgn. *  * Availability: * Mac OS X: in version 10.5 and later in Carbon.framework [32-bit only] * CarbonLib: not available * Non-Carbon CFM: not available*/toolbox fn HIWindowSetBounds( WindowRef inWindow, WindowRegionCode inRegion, HICoordinateSpace inSpace, const HIRect * inBounds ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* * SetWindowResizeLimits() *  * Summary: * Sets the minimum and maximum content sizes for a window. *  * Discussion: * The minimum and maximum sizes are obeyed by ResizeWindow and * GrowWindow. The default Carbon event handler installed for all * windows will return these sizes in response to * kEventWindowGetMinimumSize and kEventWindowGetMaximumSize events. * When a window is first created, its minimum and maximum sizes are * set to reasonable values (which may change from one system * release to the next). *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inWindow: * The window whose minimum and maximum sizes to set. *  * inMinLimits: * The new minimum size for the content region of the window. Pass * NULL if you don't want to set a minimum size. *  * inMaxLimits: * The new maximum size for the content region of the window. Pass * NULL if you don't want to set a maximum size. *  * Result: * An operating system result code. *  * Availability: * Mac OS X: in version 10.2 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.2 and later * Non-Carbon CFM: not available*/toolbox fn SetWindowResizeLimits( WindowRef inWindow, const HISize * inMinLimits, const HISize * inMaxLimits ) = OSStatus// /* can be NULL */ AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;/* * DetachSheetWindow() *  * Summary: * Detaches a sheet window from its parent window without affecting * the visibility or position of the sheet or its parent. *  * Discussion: * This API may be useful if you want to hide a sheet window without * an animation effect. To do that, use DetachSheetWindow to detach * the sheet from the parent, and then use HideWindow to hide the * sheet, or DisposeWindow to destroy the sheet. *  * Mac OS X threading: * Not thread safe *  * Parameters: *  * inSheet: * The sheet to detach. *  * Availability: * Mac OS X: in version 10.3 and later in Carbon.framework [32-bit only] * CarbonLib: not available in CarbonLib 1.x, is available on Mac OS X version 10.3 and later * Non-Carbon CFM: not available*/toolbox fn DetachSheetWindow( WindowRef inSheet ) = OSStatus//  AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;toolbox fn HIWindowSetToolbarView( WindowRef inWindow, HIViewRef inView ) = OSStatus// /* can be NULL */ AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;/* * [Mac]GetNextWindow() *  * Mac OS X threading: * Not thread safe *  * Availability: * Mac OS X: in version 10.0 and later in Carbon.framework [32-bit only] * CarbonLib: in CarbonLib 1.0 and later * Non-Carbon CFM: in CarbonAccessors.o 1.0.2 and later or as macro/inline*/toolbox fn MacGetNextWindow( WindowRef window ) = WindowRef//  AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER;