// parm mods    15 August 2007   bw#if def _DEFINEDINCARBON/*     File:       Navigation.h */include "Tlbx CFString.incl"/* Extended file info */begin record FXInfodim fdIconID      as SInt16 /* Reserved (set to 0) */dim fdReserved[2] as SInt16 /* Reserved (set to 0) */dim fdScript      as SInt8 /* Extended flags. Script code if high-bit is set */dim fdXFlags      as SInt8 /* Extended flags */dim fdComment     as SInt16 /* Reserved (set to 0). Comment ID if high-bit is clear */dim fdPutAway     as  long/* Put away folder ID */end record/* Folder info */begin record DInfodim frRect     as Rect /* Folder's window bounds */dim frFlags    as Unsigned short /* Flags ex. kIsInvisible, kNameLocked, etc.*/dim frLocation as Point /* Folder's location in parent folder *//* If set to {0, 0}, the Finder will place the item automatically */dim frView     as SInt16 /* Reserved (set to 0) */end record/* Extended folder info */begin record DXInfodim frScroll    as Point /* Scroll position */dim frOpenChain as long/* Reserved (set to 0) */dim frScript    as SInt8/* Extended flags. Script code if high-bit is set */dim frXFlags    as SInt8/* Extended flags */dim frComment   as SInt16/* Reserved (set to 0). Comment ID if high-bit is clear */dim frPutAway   as long/* Put away folder ID */end record_kNavMissingKindStringErr           = -5699_kNavInvalidCustomControlMessageErr = -5698_kNavCustomControlMessageFailedErr  = -5697_kNavInvalidSystemConfigErr         = -5696#define NavDataVersion as unsigned short  // not in Nav. 3.0#define NavAskSaveChangesAction as UInt32/* input action codes for NavAskSaveChanges() */_kNavSaveChangesClosingDocument     = 1_kNavSaveChangesQuittingApplication = 2_kNavSaveChangesOther               = 0#define NavAskSaveChangesResult as UInt32/* result codes for NavAskSaveChanges() */_kNavAskSaveChangesSave     = 1_kNavAskSaveChangesCancel   = 2_kNavAskSaveChangesDontSave = 3#define NavAskDiscardChangesResult as UInt32/* result codes for NavAskDiscardChanges() */_kNavAskDiscardChanges       = 1_kNavAskDiscardChangesCancel = 2#define NavFilterModes as SInt16/* which elements are being filtered for objects: */_kNavFilteringBrowserList    = 0_kNavFilteringFavorites      = 1_kNavFilteringRecents        = 2_kNavFilteringShortCutVolumes= 3_kNavFilteringLocationPopup  = 4 /* for v1.1 or greater */_kNavFileOrFolderVersion  = 1begin record NavFileInfodim locked       as boolean/* file is locked */dim resourceOpen as boolean/* resource fork is opened */dim dataOpen     as boolean/* data fork is opened */dim reserved1    as booleandim dataSize     as UInt32/* size of the data fork */dim resourceSize as UInt32 /* size of the resource fork */dim finderInfo   as FInfo /* more file info: */dim finderXInfo  as FXInfoend recordbegin record NavFolderInfo ' ее this a record accessor variable not a record namedim shareable      as Booleandim sharePoint     as Booleandim mounted        as Booleandim readable       as Booleandim writeable      as Booleandim reserved2      as Booleandim numberOfFiles  as UInt32dim finderDInfo    as DInfodim finderDXInfo   as DXInfodim folderType     as OSType/* package type, For struct version >= 1 */dim folderCreator  as OSType/* package creator, For struct version >= 1 */dim reserved3[205] as charend recordbegin record FileAndFolderKludgebegin uniondim fileInfo      as NavFileInfodim folderInfo    as NavFolderInfoend unionend recordbegin record NavFileOrFolderInfodim version          as UInt16dim isFolder         as booleandim visible          as booleandim creationDate     as UInt32dim modificationDate as UInt32dim fileAndFolder    as FileAndFolderKludgeend recordbegin record NavEventDataInfobegin uniondim event as ptr // to EventRecorddim param as ptr /* points to event specific data */end unionend recordbegin record NavEventDatadim eventDataParms as NavEventDataInfo /* the event data */dim itemHit        as SInt16 /* the dialog item number, for v1.1 or greater */end record/* *  NavDialogRef *   *  Summary: *    Opaque Navigation Services dialog identifier *   *  Discussion: *    A NavDialogRef is an opaque reference to an instance of a *    Navigation Services dialog. A new NavDialogRef is returned from *    any of the NavCreate*Dialog functions and is later disposed with *    the NavDialogDispose function. NavDialogRef is the new name for *    the NavContext type, and thus when a client`s event proc is *    called, the value of the NavCBRec.context field is the same as *    the NavDialogRef returned from the corresponding *    NavCreate*Dialog. A NavDialogRef is distinct from, and is not *    interchangable with, a Dialog Manager DialogRef. */#define NavDialogRef as Ptr/* NavContext is the old name for NavDialogRef */#define NavContext as NavDialogRef/* *  NavUserAction *   *  Summary: *    Indicates an action taken by the user *   *  Discussion: *    When the user clicks a button at the bottom of a Nav Services *    dialog (or makes an equivalent mouse or key gesture), a *    kNavCBUserAction event is sent to the client`s event proc *    indicating which action was taken. Often, the action also *    dismisses the dialog. User action events are only generated when *    using dialogs created from a NavCreate*Dialog function. In the *    special case of a modeless GetFile dialog (supported only on Mac *    OS X), the user can option-click on the open button to keep the *    dialog from being dismissed, but the kNavCBUserAction event is *    sent so the client can get the reply record and open the selected *    files. */#define NavUserAction as UInt32/* * No action taken. The dialog is still running or was terminated * programmatically. */_kNavUserActionNone = 0/* * The user cancelled the dialog. */_kNavUserActionCancel = 1/* * The user clicked the Open button in the GetFile dialog. */_kNavUserActionOpen = 2/* * The user clicked the Save button in the PutFile dialog. */_kNavUserActionSaveAs = 3/* * The user clicked the Choose button in the ChooseFile, * ChooseFolder, ChooseVolume or ChooseObject dialogs. */_kNavUserActionChoose = 4/* * The user clicked the New Folder button in the New Folder dialog. */_kNavUserActionNewFolder = 5/* * The user clicked the Save button in an AskSaveChanges dialog. */_kNavUserActionSaveChanges = 6/* * The user clicked the Don`t Save button in an AskSaveChanges dialog. */_kNavUserActionDontSaveChanges = 7/* * The user clicked the Discard button in the AskDiscardChanges * dialog. */_kNavUserActionDiscardChanges = 8/* * The user clicked the Review Unsaved button in the * AskReviewDocuments dialog (used only on Mac OS X). */_kNavUserActionReviewDocuments = 9/* * The user clicked the Discard Changes button in the * AskReviewDocuments dialog (used only on Mac OS X). */_kNavUserActionDiscardDocuments = 10_kNavCBRecVersion         = 1/* *  NavCBRec *   *  Summary: *    A structure passed to event and preview callbacks *   *  Discussion: *    The NavCBRec structure is passed to the client`s event proc or *    custom preview proc. It provides information that is specific to *    each event type. New for Carbon: the userAction field. */begin record NavCBRec/* * The version of the struct (currently 1) */dim version       as UInt16/* * The NavDialogRef this callback with which this call is associated */dim context       as NavDialogRef/* * The dialog`s window */dim window       as WindowRef/* * The custom control area rectangle (window coordinates) */dim customRect    as Rect/* * The custom preview area rectangle (window coordinates) */dim previewRect   as Rect/* * The event-specific data, including the EventRecord, if any */dim eventData     as NavEventData/* * The action taken by the user that generated a kNavCBUserAction * event (Carbon dialogs only) */dim userAction    as NavUserAction/* * Reserved for future use */dim reserved[217] as charend record #define NavCBRecPtr as pointer //to NavCBRec/* *  NavEventCallbackMessage *   *  Summary: *    Identifies the message type being sent to the client`s event proc */#define NavEventCallbackMessage as SInt32/*   * An OS event has occurred. A pointer to the EventRecord is in the   * eventData.eventDataParms.event field of the NavCBRec.   */_kNavCBEvent = 0/*   * Negotiate for custom control space. Client can set change the   * customRect field in the NavCBRec to create space for a custom   * area. Nav Services will continue to send the kNavCBCustomize   * message until the client leaves the customRect field unchanged.   */_kNavCBCustomize = 1/*   * This message is sent after custom area negotiation, just before   * the dialog is made visible. Add your custom controls when you   * receive this message.   */_kNavCBStart = 2/*   * This is the last message sent, after the dialog has been hidden.   */_kNavCBTerminate = 3/*   * Sent when the dialog has been resized. Check the customRect and or   * previewRect values to see if any relayout is needed. Nav Services   * automatically moves controls in the custom area.   */_kNavCBAdjustRect = 4/*   * The target folder of the dialog has changed. The   * NavCBRec.eventData.eventDataParms.param field is an AEDesc*   * containing an descriptor of the new location (ususally an FSSpec   * or an FSRef).   */_kNavCBNewLocation = 5/*   * The target folder has changed to the user`s desktop folder.   */_kNavCBShowDesktop = 6/*   * The user has selected or deselected a file or folder. The   * NavCBRec.eventData.eventDataParms.param field is an AEDescList*   * identifying the currently selected items.   */_kNavCBSelectEntry = 7/*   * The value of the Show/Format popup menu has changed. The   * NavCBRec.eventData.eventDataParms.param is a NavMenuItemSpec*   * identifying the menu item selected. If the dialog was created   * using the Carbon-only NavCreate*Dialog APIs, then the menuType   * field of the NavMenuItemSpec is set to the index into the client`s   * CFArray of popupExtension strings (see NavDialogCreationOptions).   */_kNavCBPopupMenuSelect = 8/*   * Sent when the user has accepted (Open, Save, etc.).   */_kNavCBAccept = 9/*   * Sent when the user has cancelled the dialog.   */_kNavCBCancel = 10/*   * The custom preview area state has changed. The   * NavCBRec.eventData.eventDataParms.param is a Boolean* set to true   * if the preview area is visible or false if it is not.   */_kNavCBAdjustPreview = 11/*   * The user has taken one of the actions described in the   * NavUserAction definition. The action may or may not dismiss the   * dialog. The NavCBRec.userAction field indicates which action was   * taken (Carbon dialogs only).   */_kNavCBUserAction = 12/*   * The user has opened a folder or chosen a file. The client can   * block navigation or dismissal by setting the appropriate action   * state with the kNavCtlSetActionState NavCustomControl selector.   */_kNavCBOpenSelection = 0x80000000#define NavCallBackUserData     as ptr/* *  NewNavEventUPP() *   *  Availability: *    Non-Carbon CFM:   available as macro/inline *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */' defined near bottom after Library statement' TOOLBOX FN NewNavEventUPP (NavEventProcPtr userRoutine) = NavEventUPP_uppNavEventProcInfo        = 0x00000FC0 /* pascal no_return_value Func(4_bytes, 4_bytes, 4_bytes) *//* *  NewNavPreviewUPP() *   *  Availability: *    Non-Carbon CFM:   available as macro/inline *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */_uppNavPreviewProcInfo      = 0x000003D0 /* pascal 1_byte Func(4_bytes, 4_bytes) *//* *  NewNavObjectFilterUPP() *   *  Availability: *    Non-Carbon CFM:   available as macro/inline *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */_uppNavObjectFilterProcInfo = 0x00002FD0 /* pascal 1_byte Func(4_bytes, 4_bytes, 4_bytes, 2_bytes) *//* *  DisposeNavEventUPP() *   *  Availability: *    Non-Carbon CFM:   available as macro/inline *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later *//* *  DisposeNavPreviewUPP() *   *  Availability: *    Non-Carbon CFM:   available as macro/inline *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later *//* *  DisposeNavObjectFilterUPP() *   *  Availability: *    Non-Carbon CFM:   available as macro/inline *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later *//* *  InvokeNavEventUPP() *   *  Availability: *    Non-Carbon CFM:   available as macro/inline *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later *//* *  InvokeNavPreviewUPP() *   *  Availability: *    Non-Carbon CFM:   available as macro/inline *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later *//* *  InvokeNavObjectFilterUPP() *   *  Availability: *    Non-Carbon CFM:   available as macro/inline *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */#define NavCustomControlMessage as SInt32_kNavCtlShowDesktop = 0/*    show desktop,           parms = nil */_kNavCtlSortBy = 1/*    sort key field,       parms->NavSortKeyField */_kNavCtlSortOrder = 2/*    sort order,              parms->NavSortOrder */_kNavCtlScrollHome = 3/*    scroll list home,       parms = nil */_kNavCtlScrollEnd = 4/*    scroll list end,      parms = nil */_kNavCtlPageUp = 5/*    page list up,          parms = nil */_kNavCtlPageDown = 6/*    page list down,          parms = nil */_kNavCtlGetLocation = 7/*    get current location,   parms<-AEDesc* */_kNavCtlSetLocation = 8/*    set current location,   parms->AEDesc* */_kNavCtlGetSelection = 9/*    get current selection,     parms<-AEDescList* */_kNavCtlSetSelection = 10/*    set current selection,     parms->AEDescList* */_kNavCtlShowSelection = 11/*    make selection visible,       parms = nil */_kNavCtlOpenSelection = 12/*    open view of selection,       parms = nil */_kNavCtlEjectVolume = 13/*    eject volume,          parms->vRefNum */_kNavCtlNewFolder = 14/*    create a new folder,     parms->StringPtr */_kNavCtlCancel = 15/*    cancel dialog,          parms = nil */_kNavCtlAccept = 16/*    accept dialog default,     parms = nil */_kNavCtlIsPreviewShowing = 17/*    query preview status,   parms<-Boolean */_kNavCtlAddControl = 18/*  add one control to dialog,    parms->ControlHandle */_kNavCtlAddControlList = 19/*    add control list to dialog,    parms->Handle (DITL rsrc) */_kNavCtlGetFirstControlID = 20/*    get 1st control ID,         parms<-UInt16 */_kNavCtlSelectCustomType = 21/*    select a custom menu item  parms->NavMenuItemSpec* */_kNavCtlSelectAllType = 22/*  select an "All" menu item parms->SInt16 */_kNavCtlGetEditFileName = 23/*    get save dlog's file name  parms<-StringPtr */_kNavCtlSetEditFileName = 24/*    set save dlog's file name  parms->StringPtr */_kNavCtlSelectEditFileName = 25/*    select save dlog file name parms->ControlEditTextSelectionRec*, v1.1 or greater */_kNavCtlBrowserSelectAll = 26/*  re-scan the browser list  parms = nil, v2.0 or greater */_kNavCtlGotoParent = 27/*  navigate to parent         parms = nil, v2.0 or greater */_kNavCtlSetActionState = 28/*  restrict navigation      parms->NavActionState (flags), v2.0 or greater */_kNavCtlBrowserRedraw = 29/*  rescan browser list      parms = nil, v2.0 or greater */_kNavCtlTerminate = 30/*  terminate/dismiss dialog  parms = nil, v2.0 or greater */#define NavActionState as UInt32_kNavNormalState        = 0x00000000// normal/default state_kNavDontOpenState      = 0x00000001// disallow opening files/folders_kNavDontSaveState      = 0x00000002// disallow saving files_kNavDontChooseState    = 0x00000004// disallow choosing objects_kNavDontNewFolderState = 0x00000010// disallow creating new folders#define NavPopupMenuItem as UInt16_kNavAllKnownFiles   = 0_kNavAllReadableFiles= 1_kNavAllFiles        = 2#define NavSortKeyField as UInt16_kNavSortNameField   = 0_kNavSortDateField   = 1#define NavSortOrder as UInt16_kNavSortAscending    = 0_kNavSortDescending   = 1#define NavDialogOptionFlags as UInt32_kNavDefaultNavDlogOptions = 0x000000E4 /* use defaults for all the options */_kNavNoTypePopup           = 0x00000001 /* don't show file type/extension popup on Open/Save */_kNavDontAutoTranslate     = 0x00000002 /* don't automatically translate on Open */_kNavDontAddTranslateItems = 0x00000004 /* don't add translation choices on Open/Save */_kNavAllFilesInPopup       = 0x00000010 /* "All Files" menu item in the type popup on Open */_kNavAllowStationery       = 0x00000020 /* allow saving of stationery files */_kNavAllowPreviews         = 0x00000040 /* allow to show previews */_kNavAllowMultipleFiles    = 0x00000080 /* allow multiple items to be selected */_kNavAllowInvisibleFiles   = 0x00000100 /* allow invisible items to be shown */_kNavDontResolveAliases    = 0x00000200 /* don't resolve aliases */_kNavSelectDefaultLocation = 0x00000400 /* make the default location the browser selection */_kNavSelectAllReadableItem = 0x00000800 /* make the dialog select "All Readable Documents" on Open */_kNavSupportPackages           = 0x00001000// recognize file system packages, v2.0 or greater_kNavAllowOpenPackages         = 0x00002000// allow opening of packages, v2.0 or greater_kNavDontAddRecents            = 0x00004000// don't add chosen objects to the recents list, v2.0 or greater_kNavDontUseCustomFrame        = 0x00008000// don't draw the custom area bevel frame, v2.0 or greater_kNavDontConfirmReplacement    = 0x00010000// don't show the "Replace File?" alert on save conflict, v3.0 or greater_kNavPreserveSaveFileExtension = 0x00020000// extension in default file name is preserved and initially hidden, v3.1 or greater#define NavTranslationOptions as UInt32_kNavTranslateInPlace  = 0 /* translate in place, replacing translation source file (default for Save) */_kNavTranslateCopy     = 1 /* translate to a copy of the source file (default for Open) */_kNavMenuItemSpecVersion = 0begin record NavMenuItemSpecdim version       as UInt16dim menuCreator   as OSTypedim menuType      as OSTypedim menuItemName  as str255dim reserved[245] as char'Date { 7/9/03 }end record#define NavMenuItemSpecArrayPtr    as pointer //to NavMenuItemSpec#define NavMenuItemSpecArrayHandle as pointer //to NavMenuItemSpecArrayPtr#define NavMenuItemSpecPtr         as NavMenuItemSpecArrayPtr#define NavMenuItemSpecHandle      as NavMenuItemSpecArrayHandle_kNavGenericSignature = _"****"begin record NavTypeListdim componentSignature as OSTypedim reserved           as shortdim osTypeCount        as shortdim osType&[3]end record#define NavTypeListPtr as pointer //to NavTypeList#define NavTypeListHandle as handle //to NavTypeList_kNavDialogOptionsVersion = 0begin record NavDialogOptionsdim version           as UInt16dim dialogOptionFlags as NavDialogOptionFlags/* option flags for affecting the dialog's behavior */dim location          as Point /* top-left location of the dialog, or {-1,-1} for default position */dim clientName        as Str255dim windowTitle       as Str255dim actionButtonLabel as Str255 /* label of the default button (or null string for default) */dim cancelButtonLabel as Str255 /* label of the cancel button (or null string for default) */dim savedFileName     as Str255 /* default name for text box in NavPutFile (or null string for default) */dim message           as Str255 /* custom message prompt (or null string for default) */dim preferenceKey     as UInt32 /* a key for to managing preferences for using multiple utility dialogs */dim popupExtension    as handle /* extended popup menu items, an array of NavMenuItemSpecs */dim reserved[493]     as charend record_kNavReplyRecordVersion   = 2/* *  NavReplyRecord *   *  Summary: *    A structure describing the results of a Nav Services dialog *   *  Discussion: *    A reply record is the result of a Nav Services file dialog. Using *    the older API, which is always modal, the client passes the *    address of a reply record when invoking the dialog. In the Carbon *    API, dialogs may also be window modal or modeless, so the client *    requests the reply record by calling NavDialogGetReply when a *    kNavCBUserAction event is received. Either way, a reply record *    should be disposed of using NavDisposeReply. */begin record NavReplyRecord/* * The version of the structure. The first public version of the * structure was version 0. Fields added after version 0, starting * with the saveFileName field, are noted below. */dim version         as UInt16/* * True if the reply contains a non-null selection */dim validRecord     as Boolean/* * True if this reply is from a PutFile dialog and the file to be * saved already exists and needs to be replaced. The user has * already been warned unless the kNavDontConfirmReplacement option * flag is used. */dim replacing       as Boolean/* * True if this reply is from a PutFile dialog and the user wants to * save the file as stationery. */dim isStationery    as Boolean/* * True if translation was performed on the file(s) to be opened or * if transtlation will be needed on the file to be saved. */dim translationNeeded as Boolean/* * For GetFile or Choose dialogs, a list of items chosen by the user. * For the older NavPutFile dialog, a list containing one item: an * FSSpec of the file to be saved. ** IMPORTANT NOTE *** For the new * Carbon-only PutFile dialog created with NavCreatePutFileDialog, * the selection is a list containing one item: the DIRECTORY where * the file is to be saved. The file name is obtained from the * saveFileName field. When using the original modal API, each * descriptor will contain an FSSpec (typeFSS). When using the new * Carbon-only dialogs created via the NavCreate*Dialog functions, * each descriptor could contain either an FSSpec (typeFSS, used on * Mac OS 8 or 9) or an FSRef (typeFSRef, used on Mac OS X). This * divergence is caused by the need to use FSRef (for Unicode/HFS+ * support) on Mac OS X, while being unable to provide FSRefs on Mac * OS 8.6. */dim selection       as AEDesc' AEDescList/* * For NavPutFile: the script system associated with the name of the * file to be saved. */dim keyScript       as unsigned short' ScriptCode/* * A handle to an array of type FileTranslationSpec. Each array entry * corresponds to an item in the selection and describes the * translation that was performed (GetFile) or needs to be performed * (PutFile) on that item. */dim fileTranslation as handle' FileTranslationSpecArrayHandle/* * Reserved for private use. */dim reserved1       as UInt32/* * Carbon PutFile dialog only: the name of the file to be saved. This * field contains the true file name to saved, even if the extension * will be hidden from the user. This field was added in structure * version 1. */dim saveFileName    as CFStringRef/* * The extension on the name of the saved file should be hidden. Once * the file has been saved, the client should call NavCompleteSave. * NavCompleteSave will take care of hiding the extension on the * file. However, the client needs to know that the extension is * hidden so that it can display the document name correctly in the * UI, such as in window titles and menus. This field is only used if * the client has r equested extension preservation using the * kNavPreserveSaveFileExtension dialog option flag. This field was * added in structure version 2. */dim saveFileExtensionHidden as Boolean/* * Reserved for future use. */dim reserved2       as UInt8/* * Reserved for future use. */dim reserved[224]  as chardim &' purpose seems to be to make record of even lengthend record /* *  NavLoad() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         not available */toolbox fn NavLoad() = OSErr/* *  NavUnload() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         not available */toolbox fn NavUnload() = OSErr/* *  NavLibraryVersion() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavLibraryVersion() = UInt32/* *  NavGetDefaultDialogOptions() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavGetDefaultDialogOptions( NavDialogOptions *dialogOptions ) = OSErr/* *  NavGetFile() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavGetFile( AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, proc eventProc, proc previewProc, proc filterProc, NavTypeListHandle typeListHndl, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavPutFile() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavPutFile( AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, proc eventProc, OSType fileType, OSType fileCreator, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavAskSaveChanges() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavAskSaveChanges( NavDialogOptions *dialogOptions, NavAskSaveChangesAction action, NavAskSaveChangesResult *reply, proc eventProc, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavCustomAskSaveChanges() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCustomAskSaveChanges( NavDialogOptions *dialogOptions, NavAskSaveChangesResult *reply, proc eventProc, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavAskDiscardChanges() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavAskDiscardChanges( NavDialogOptions *dialogOptions, NavAskDiscardChangesResult *reply, proc eventProc, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavChooseFile() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavChooseFile( AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, proc eventProc, proc previewProc, proc filterProc, Handle typeListHndl, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavChooseFolder() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavChooseFolder( AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, proc eventProc, proc filterProc, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavChooseVolume() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavChooseVolume( AEDesc *defaultSelection, NavReplyRecord *reply, NavDialogOptions *dialogOptions, proc eventProc, proc filterProc, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavChooseObject() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavChooseObject( AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, proc eventProc, proc filterProc, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavNewFolder() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavNewFolder( AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, proc eventProc, Ptr callBackUD ) = OSErr/* can be NULL *//* *  NavTranslateFile() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavTranslateFile( NavReplyRecord *reply, NavTranslationOptions howToTranslate ) = OSErr/* *  NavCompleteSave() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCompleteSave( NavReplyRecord *reply, NavTranslationOptions howToTranslate ) = OSErr/* *  NavCustomControl() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCustomControl( NavContext context, NavCustomControlMessage selector, Ptr parms ) = OSErr/* *  NavCreatePreview() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 2.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreatePreview( AEDesc * theObject, OSType previewDataType, const Ptr previewData, unsigned long previewDataSize ) = OSErr/* *  NavDisposeReply() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavDisposeReply( NavReplyRecord *reply ) = OSErr/* *  NavServicesCanRun() *   *  Availability: *    Non-Carbon CFM:   in NavigationLib 1.0 and later *    CarbonLib:        in CarbonLib 1.0 and later *    Mac OS X:         not available */toolbox fn NavServicesCanRun() = Boolean/* Navigation is always available on OS X *//* NavServicesAvailable() is implemented in Navigation.o for classic 68K clients*//* *  NavServicesAvailable() *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        not available *    Mac OS X:         not available */toolbox fn NavServicesAvailable() = Boolean/* Carbon API *//* Includes support for Unicode and long file names (where available). */toolbox fn NewNavEventUPP( proc ) = proctoolbox fn NewNavObjectFilterUPP( proc userRoutine ) = proc_kNavDialogCreationOptionsVersion = 0/* *  NavDialogCreationOptions *   *  Summary: *    Options used to control the appearance and operation of a Nav *    Services dialog *   *  Discussion: *    NavDialogCreationOptions is a preferred replacement for *    NavDialogOptions. The new structure uses CFStrings in place of *    Pascal strings, and adds fields for setting the dialog modality *    and the parent window (for sheet dialogs). A *    NavDialogCreationOptions structure can be initialized using *    NavDialogGetDefaultCreationOptions. Each of the NavCreate*Dialog *    functions accepts a pointer to the client`s *    NavDialogCreationOptions structure. */begin record NavDialogCreationOptions/* * The version of the struture. Currently, the only valid version is * 0, containing all the fields described here. */dim version as UInt16/* * Options for the dialog. See NavDialogOptionFlags for a description * of each option. */dim optionFlags as NavDialogOptionFlags/* * The screen position at which to place the upper left corner of the * dialog, in global coordinates. Specify (-1, -1) to use the default * (persistent) location. Ignored for sheet dialogs. */dim location          as Point/* * The user-readable name of the client, usually the name of the * current application. This value is used to construct the default * window title in the file dialogs, and the message text in the Ask * dialogs. On Mac OS 9 and earlier, this value is used as a key to * store persistent per-client dialog settings, so it`s always a good * idea to set this field to a non-NULL value. */dim clientName        as CFStringRef/* * The custom title for the dialog window. Specify NULL to use the * default title. */dim windowTitle       as CFStringRef/* * The custom label for the default (Open/Save/Choose) button. * Specify NULL to use the default label. */dim actionButtonLabel as CFStringRef/* * The custom label for the Cancel button. Specify NULL to use the * default label. */dim cancelButtonLabel as CFStringRef/* * The initial value appearing in the edit text field for the file * name to be saved (PutFile only). */dim saveFileName      as CFStringRef/* * For the file dialogs, a banner message appearing across the top of * the dialog. Specify NULL to provide no banner message. For the Ask * alerts, a custom message to replace the default message. */dim message           as CFStringRef/* * A key to uniquely identify the dialog`s usage context within the * application. If an application uses the same class of dialog (e.g. * GetFile or ChooseFile) for more than one purpose, set this field * to a unique value for each usage in order to give each dialog its * own persistent settings (e.g. screen rectangle, starting target * folder). */dim preferenceKey     as UInt32/* * A CFArray of CFStrings. The strings are added as menu items to the * Show or Format popup menus in the GetFile or PutFile dialogs, * respectively. */dim popupExtension    as ptr ' CFArrayRef/* * The modality in which to present the dialog. The default modality * for all dialogs is kWindowModalityAppModal. If * kWindowModalityWindowModal is specified, then a valid parentWindow * is required. */dim modality          as unsigned long' WindowModality/* * The window to which a window-modal (sheet) dialog is to be * attached. */dim parentWindow as WindowRef/* * Reserved for future use. */dim reserved[15]      as charend record/* *  NavGetDefaultDialogCreationOptions() *   *  Summary: *    Initialize the input structure to default values *   *  Discussion: *    Provided as a convenience to obtain the preferred default options *    for use in creating any Nav Services dialog. *   *  Parameters: *     *    outOptions: *      A pointer to the client-allocated options structure to *      initialize *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavGetDefaultDialogCreationOptions( NavDialogCreationOptions *outOptions ) = OSStatus/* *  NavCreateGetFileDialog() *   *  Summary: *    Create a GetFile dialog *   *  Discussion: *    Use this function to create a dialog designed for opening *    document files. This function replaces NavGetFile, allowing new *    window modalities, and adding Unicode support. Upon successful *    creation, the dialog is not visible. Present and run the dialog *    with NavDialogRun. After the dialog is complete, dispose of it *    with NavDialogDispose. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inTypeList: *      A creator signature and list of file types to show in the *      dialog file browser. If NULL, show all files. *     *    inEventProc: *      The UPP for the client`s event callack, or NULL for no event *      callback *     *    inPreviewProc: *      The UPP for the client`s custom file preview callback, or NULL *      for standard previews *     *    inFilterProc: *      The UPP for the client`s custom filter callback, or NULL for no *      custom file filtering *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreateGetFileDialog( NavDialogCreationOptions * inOptions, NavTypeListHandle inTypeList, proc inEventProc, proc inPreviewProc, proc inFilterProc, Ptr inClientData, NavDialogRef *outDialog ) = OSStatus/* *  NavCreatePutFileDialog() *   *  Summary: *    Create a PutFile dialog *   *  Discussion: *    Use this function to create a dialog designed for setting the *    name and location of a document file prior to saving. This *    function replaces NavPutFile, allowing new window modalities, and *    adding Unicode support. Upon successful creation, the dialog is *    not visible. Present and run the dialog with NavDialogRun. After *    the dialog is complete, dispose of it with NavDialogDispose. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inFileType: *      The type of the file to be saved. This parameter is used in *      conjunction with the inFileCreator parameter to look up the *      kind string for the Format popup menu, and to drive the *      identification of translation options. *     *    inFileCreator: *      The creator signature of the file to be saved (see inFileType *      parameter) *     *    inEventProc: *      The UPP for the client's event callack, or NULL for no event *      callback *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreatePutFileDialog( NavDialogCreationOptions *inOptions, OSType inFileType, OSType inFileCreator, proc inEventProc, Ptr inClientData, NavDialogRef *outDialog ) = OSStatus/* *  NavCreateAskReviewDocumentsDialog() *   *  Summary: *    Create an AskReviewDocumentsDialog dialog *   *  Discussion: *    Use this function to create a dialog which tells the user how *    many unsaved documents there are, and asks the user to start *    reviewing the documents, don't save any documents, or cancel. *    This dialog is appropriate to use when an application is quitting *    and there is more than one unsaved document. It is supported only *    on Mac OS X because the HI guidelines for earlier versions of Mac *    OS do not include this dialog as part of the application quit *    sequence. Upon successful creation, the dialog is not visible. *    Present and run the dialog with NavDialogRun. After the dialog is *    complete, dispose of it with NavDialogDispose. Upon dismissal of *    the dialog, this dialog's user action will be set to one of the *    following: kNavUserActionReviewDocuments, *    kNavUserActionDiscardDocuments, or kNavUserActionCancel. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inDocumentCount: *      Indicates the number of documents needing review. This number *      appears in the text presented to the user. If for any reason *      the total number of unsaved documents is unknown, specify 0, *      and an ambiguous message will appear. Do not specifiy 1, since *      the HI guidelines call for this alert only when there is more *      than one document to be reviewed. *     *    inEventProc: *      The UPP for the client's event callack, or NULL for no event *      callback *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.1 and later *    Mac OS X:         in version 10.1 and later */toolbox fn NavCreateAskReviewDocumentsDialog( NavDialogCreationOptions *inOptions, UInt32 inDocumentCount, proc inEventProc, Ptr inClientData, NavDialogRef *outDialog ) = OSStatus/* *  NavCreateAskSaveChangesDialog() *   *  Summary: *    Create an AskSaveChanges dialog *   *  Discussion: *    Use this function to create a dialog which asks the user to save, *    don't save or cancel closing a document with unsaved changes. *    This function replaces NavAskSaveChanges and *    NavCustomAskSaveChanges, allowing new window modalities, and *    adding Unicode support. Upon successful creation, the dialog is *    not visible. Present and run the dialog with NavDialogRun. After *    the dialog is complete, dispose of it with NavDialogDispose. To *    provide a customized message for the alert, specify an non-NULL *    message value in the options structure. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inAction: *      Indicates this usage context for this dialog: closing a *      document or quitting an application. This setting affects the *      message text displayed to the user. *     *    inEventProc: *      The UPP for the client's event callack, or NULL for no event *      callback *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreateAskSaveChangesDialog( NavDialogCreationOptions *inOptions, NavAskSaveChangesAction inAction, proc inEventProc, Ptr inClientData,NavDialogRef * outDialog ) = OSStatus/* *  NavCreateAskDiscardChangesDialog() *   *  Summary: *    Create an AskDiscardChanges dialog *   *  Discussion: *    Use this function to create a dialog which asks the user to *    discard changes to a document or cancel. This is most often use *    when the user wants to revert a a document to the last saved *    revision. This function replaces NavAskDiscardChanges, allowing *    new window modalities, and adding Unicode support. Upon *    successful creation, the dialog is not visible. Present and run *    the dialog with NavDialogRun. After the dialog is complete, *    dispose of it with NavDialogDispose. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inEventProc: *      The UPP for the client's event callack, or NULL for no event *      callback *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreateAskDiscardChangesDialog( NavDialogCreationOptions * inOptions, proc inEventProc, Ptr inClientData,NavDialogRef * outDialog ) = OSStatus/* *  NavCreateChooseFileDialog() *   *  Summary: *    Create a ChooseFile dialog *   *  Discussion: *    Use this function to create a dialog designed for selecting one *    file as the target of an operation. A ChooseFile dialog is a *    simple version a GetFile dialog. This function replaces *    NavChooseFile, allowing new window modalities, and adding Unicode *    support. Upon successful creation, the dialog is not visible. *    Present and run the dialog with NavDialogRun. After the dialog is *    complete, dispose of it with NavDialogDispose. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inTypeList: *      A creator signature and list of file types to show in the *      dialog file browser. If NULL, show all files. *     *    inEventProc: *      The UPP for the client's event callack, or NULL for no event *      callback *     *    inPreviewProc: *      The UPP for the client's custom file preview callback, or NULL *      for standard previews *     *    inFilterProc: *      The UPP for the client's custom filter callback, or NULL for no *      custom file filtering *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreateChooseFileDialog( NavDialogCreationOptions * inOptions, NavTypeListHandle inTypeList, proc inEventProc, proc inPreviewProc, proc inFilterProc, Ptr inClientData, NavDialogRef * outDialog ) = OSStatus/* *  NavCreateChooseFolderDialog() *   *  Summary: *    Create a ChooseFolder dialog *   *  Discussion: *    Use this function to create a dialog designed for selecting a *    folder as the target of an operation. This function replaces *    NavChooseFolder, allowing new window modalities, and adding *    Unicode support. Upon successful creation, the dialog is not *    visible. Present and run the dialog with NavDialogRun. After the *    dialog is complete, dispose of it with NavDialogDispose. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inEventProc: *      The UPP for the client's event callack, or NULL for no event *      callback *     *    inFilterProc: *      The UPP for the client's custom filter callback, or NULL for no *      custom file filtering *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreateChooseFolderDialog( NavDialogCreationOptions * inOptions, proc inEventProc, proc inFilterProc, Ptr inClientData, NavDialogRef * outDialog ) = OSStatus/* *  NavCreateChooseVolumeDialog() *   *  Summary: *    Create a ChooseVolume dialog *   *  Discussion: *    Use this function to create a dialog designed for selecting a *    volume as the target of an operation. This function replaces *    NavChooseVolume, allowing new window modalities, and adding *    Unicode support. Upon successful creation, the dialog is not *    visible. Present and run the dialog with NavDialogRun. After the *    dialog is complete, dispose of it with NavDialogDispose. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inEventProc: *      The UPP for the client's event callack, or NULL for no event *      callback *     *    inFilterProc: *      The UPP for the client's custom filter callback, or NULL for no *      custom file filtering *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreateChooseVolumeDialog( NavDialogCreationOptions * inOptions, proc inEventProc, proc inFilterProc, Ptr inClientData, NavDialogRef * outDialog ) = OSStatus/* *  NavCreateChooseObjectDialog() *   *  Summary: *    Create a ChooseObject dialog *   *  Discussion: *    Use this function to create a dialog designed for selecting a *    file, folder, or volume as the target of an operation. This *    function replaces NavChooseObject, allowing new window *    modalities, and adding Unicode support. Upon successful creation, *    the dialog is not visible. Present and run the dialog with *    NavDialogRun. After the dialog is complete, dispose of it with *    NavDialogDispose. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inEventProc: *      The UPP for the client's event callack, or NULL for no event *      callback *     *    inPreviewProc: *      The UPP for the client's custom file preview callback, or NULL *      for standard previews *     *    inFilterProc: *      The UPP for the client's custom filter callback, or NULL for no *      custom file filtering *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreateChooseObjectDialog( NavDialogCreationOptions * inOptions, proc inEventProc, proc inPreviewProc, proc inFilterProc, Ptr inClientData, NavDialogRef * outDialog ) = OSStatus/* *  NavCreateNewFolderDialog() *   *  Summary: *    Create a NewFolder dialog *   *  Discussion: *    Use this function to create a dialog designed for creating a new *    folder. Nav Services creates the folder as specified by the user *    and returns a reference to the folder in the selection field of *    the reply record. This function replaces NavNewFolder, allowing *    new window modalities, and adding Unicode support. Upon *    successful creation, the dialog is not visible. Present and run *    the dialog with NavDialogRun. After the dialog is complete, *    dispose of it with NavDialogDispose. *   *  Parameters: *     *    inOptions: *      Options controlling the appearance and behavior of the dialog *     *    inEventProc: *      The UPP for the client's event callack, or NULL for no event *      callback *     *    inClientData: *      A client-defined context value passed to all callback functions *     *    outDialog: *      Upon successful completion, a reference to the created dialog *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavCreateNewFolderDialog( NavDialogCreationOptions * inOptions, proc inEventProc, Ptr inClientData, NavDialogRef * outDialog ) = OSStatus/* *  NavDialogRun() *   *  Summary: *    Show and run a Nav Services dialog *   *  Discussion: *    After a dialog is created with a NavCreate*Dialog function, the *    client can modify the dialog target folder or save file name *    using NavCustomControl with the appropriate selectors. The dialog *    is presented to the user by calling NavDialogRun. If the dialog *    is system modal or application modal (kWindowModalitySystemModal, *    kWindowModalityAppModal), NavDialogRun does not return until the *    dialog has been dismissed. If the dialog is modeless or window *    modal (kWindowModalityNone, kWindowModalityWindowModal), *    NavDialogRun shows the dialog and returns immediately. In order *    to know when the dialog has been dismissed, the client must watch *    for the kNavCBUserAction event sent to the client event proc. *    Note that on Mac OS 9 and earlier, all dialogs are modal, even if *    a modeless or window modal dialog is requested. However, the *    kNavCBUserAction event is still sent to the event proc, so it's *    possible to use a single programming model on OS 9 and OS X *    provided the client assumes NavDialogRun returns immediately *    after showing the dialog. *   *  Parameters: *     *    inDialog: *      The dialog to run *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavDialogRun( NavDialogRef inDialog ) = OSStatus/* *  NavDialogDispose() *   *  Summary: *    Dispose of a Nav Services dialog *   *  Discussion: *    Call this function when completely finished with a Nav Services *    dialog. After calling NavDialogDispose, the dialog reference is *    no longer valid. NavDialogDispose is safe to call from within a *    callback to the client's Nav Services event proc. *   *  Parameters: *     *    inDialog: *      The dialog to dispose *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox NavDialogDispose( NavDialogRef inDialog )/* *  NavDialogGetWindow() *   *  Summary: *    Return the window in which a Nav Services dialog appears *   *  Discussion: *    Note that a valid NavDialogRef may not have a window until *    NavDialogRun has been called. If no window exists for the dialog, *    NavDialogGetWindow returns NULL. *   *  Parameters: *     *    inDialog: *      Which dialog *   *  Result: *    The window reference *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavDialogGetWindow( NavDialogRef inDialog ) = WindowRef/* *  NavDialogGetUserAction() *   *  Summary: *    Return the current user action taken by the user *   *  Discussion: *    A user action occurs when the user dismisses the dialog or *    otherwise does something generating a reply record that the *    client needs to act upon. If the user has not taken such an *    action, NavDialogGetUserAction returns kNavUserActionNone. If the *    dialog is terminated using the NavCustomControl selector *    kNavCtlTerminate, the final user action is kNavUserActionNone. *    For file dialogs, if the final user action is not *    kNavUserActionCancel, then there is a valid reply record which *    can be obtained with NavDialogGetReply. Although the user action *    is sent to the client event proc as a kNavCBUserAction event, *    this function is provided as a convenience for clients of modal *    dialogs who may find it easier to get the user action immediately *    after NavDialogRun returns. *   *  Parameters: *     *    inDialog: *      Which dialog *   *  Result: *    The user action *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavDialogGetUserAction( NavDialogRef inDialog ) = NavUserAction/* *  NavDialogGetReply() *   *  Summary: *    Fill in the provided reply record with the results of a user *    action such as kNavUserActionOpen, kNavUserActionSaveAs, or *    kNavUserActionChoose. *   *  Discussion: *    Call this function when a file dialog receives a user action *    other that implies an item or items to open, save, etc. Upon *    successful completion, the reply record describes the item(s) *    that the client needs to act upon. The reply record should later *    be disposed of with NavDisposeReply. *   *  Parameters: *     *    inDialog: *      Which dialog *     *    outReply: *      A pointer to the client-allocated reply record to be filled in *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavDialogGetReply( NavDialogRef inDialog, NavReplyRecord * outReply ) = OSStatus/* *  NavDialogGetSaveFileName() *   *  Summary: *    Return the current value of the file name to be saved in a *    PutFile dialog *   *  Discussion: *    This function can be called at any time on a valid PutFile dialog *    to obtain the current value of the save file name. This function *    is a Unicode-based replacement for the kNavCtlGetEditFileName *    NavCustomControl selector. On Mac OS X, the full file name is *    returned, including any extenison that may be hidden from the *    user. *   *  Parameters: *     *    inPutFileDialog: *      Which dialog *   *  Result: *    The save file name as a CFStringRef. The string is immutable. The *    client should retain the string if the reference is to be held *    beyond the life of the dialog (standard CF retain/release *    semantics). *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavDialogGetSaveFileName( NavDialogRef inPutFileDialog ) = CFStringRef/* *  NavDialogSetSaveFileName() *   *  Summary: *    Set the current value of the file name to be saved in a PutFile *    dialog *   *  Discussion: *    This function can be called at any time to set the current save *    file name. Use it to set an initial name before calling *    NavDialogRun or to change the file name dynamically while a *    dialog is running. This function is a Unicode-based replacement *    for the kNavCtlSetEditFileName NavCustomControl selector. *   *  Parameters: *     *    inPutFileDialog: *      Which PutFile dialog *     *    inFileName: *      The file name to use *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        in CarbonLib 1.1 and later *    Mac OS X:         in version 10.0 and later */toolbox fn NavDialogSetSaveFileName( NavDialogRef inPutFileDialog, CFStringRef inFileName ) = OSStatus/* *  NavDialogGetSaveFileExtensionHidden() *   *  Summary: *    Get the current state of the extension hiding in a PutFile dialog *   *  Discussion: *    This function can be called at any time to determine if a PutFile *    dialog is hiding the file extesion (if any) of the file to be *    saved. *   *  Parameters: *     *    inPutFileDialog: *      Which PutFile dialog *   *  Result: *    True if the extension is hidden, false if the extension is *    visible or there is no extension. *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.1 and later *    Mac OS X:         in version 10.1 and later */toolbox fn NavDialogGetSaveFileExtensionHidden( NavDialogRef inPutFileDialog ) = Boolean/* *  NavDialogSetSaveFileExtensionHidden() *   *  Summary: *    Set the current state of the extension hiding in a PutFile dialog *   *  Discussion: *    This function can be called at any time to hide or show the *    extension of the file to be saved in a PutFile dialog. If the *    current file name has no extension, then hiding the extension has *    no effect. *   *  Parameters: *     *    inPutFileDialog: *      Which PutFile dialog *     *    inHidden: *      The new value for the hidden extension state *   *  Result: *    A status code *   *  Availability: *    Non-Carbon CFM:   not available *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.1 and later *    Mac OS X:         in version 10.1 and later */toolbox fn NavDialogSetSaveFileExtensionHidden( NavDialogRef inPutFileDialog, Boolean inHidden ) = OSStatus/* *  NavDialogSetFilterTypeIdentifiers() *   *  Summary: *    Set a list Uniform Type Identifers against which all files will *    be automatically filtered. *   *  Discussion: *    This function can be called at any time to filter files shown in *    the dialog based on the list of type identifiers provided. This *    function is only applicable for GetFile and ChooseFile dialogs. *   *  Parameters: *     *    inGetFileDialog: *      Which GetFile or ChooseFile dialog. *     *    inTypeIdentifiers: *      The list of Uniform Type Identifiers describing the file types *      to be shown in the dialog file browser.  If an empty array is *      passed, all files will be filtered out. If NULL, no files are *      filtered. The "Enable" popup view will be automatically shown *      and hidden as necessary. *   *  Result: *    A status code *   *  Availability: *    Mac OS X:         in version 10.4 and later in Carbon.framework *    CarbonLib:        not available in CarbonLib 1.x, is available on Mac OS X version 10.4 and later *    Non-Carbon CFM:   not available */ toolbox fn NavDialogSetFilterTypeIdentifiers( NavDialogRef inGetFileDialog, CFArrayRef inTypeIdentifiers ) = OSStatus// AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;#endif/*enterproc fn NavigationProc( unusedSelector as NavEventCallbackMessage, unusedParms as ^NavCBRec, unusedData as ptr )'~'1dim evPtr as ^EventRecorddef fn FBWindowUpdate( ev as ^EventRecord )long if ( selector == _kNavCBEvent )evPtr = navCBrecPtr.eventData.eventDataParms.eventgFBTheEvent = evPtrif ( evPtr.what == _updatEvt ) then fn FBWindowUpdate( evPtr )end ifexitproc*/