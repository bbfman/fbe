/*Bugs:- Delay() interferes with FB keyword 'delay'- Random() interferres with FB keyword 'random'*/#if ndef _DEFINEDINCARBON// #define PicHandle as Handle  in Tlbx QuickTime.inclinclude "Tlbx Structures.incl"#define GrafVerb as SInt8#endif// ndef _DEFINEDINCARBON// Folders.hbegin enum not output_kOnSystemDisk = -32768// fix obsolete definition of _kOnSystemDisk_kOnAppropriateDisk = -32767'Date { 2/6/02 }end enum// MacWindows.h_kWindowFloatProc             = 1057_kWindowFloatGrowProc         = 1059_kWindowFloatVertZoomProc     = 1061_kWindowFloatVertZoomGrowProc = 1063_kWindowFloatHorizZoomProc    = 1065_kWindowFloatHorizZoomGrowProc= 1067_kWindowFloatFullZoomProc     = 1069_kWindowFloatFullZoomGrowProc = 1071_inCollapseBox   = 11// new FindWindow return values_inProxyIcon     = 12_inToolbarButton = 13// MacTypes.h/* moved to Tlbx MacTypes.incl    20090806toolbox DebugStr( ConstStr255Param debuggerMsg )toolbox Debugger*/// OSUtils.h//toolbox Delay( unsigned long numTicks, unsigned long * finalTicks )// Sound.htoolbox SysBeep( short duration )// Gestalt.htoolbox fn Gestalt( OSType selector, long * response ) = OSErr// MacMemory.htoolbox BlockMove( ptr srcPtr, ptr destPtr, long byteCount )toolbox BlockMoveData( ptr srcPtr, ptr destPtr, long byteCount )toolbox BlockZero( ptr destPtr, long byteCount )// Scrap.htoolbox fn GetCurrentScrap( ScrapRef * scrap ) = OSStatustoolbox fn GetScrapFlavorFlags( ScrapRef scrap, ScrapFlavorType flavorType, ScrapFlavorFlags * flavorFlags ) = OSStatustoolbox fn GetScrapFlavorSize( ScrapRef scrap, ScrapFlavorType flavorType, unsigned long * byteCount ) = OSStatustoolbox fn GetScrapFlavorData( ScrapRef scrap, ScrapFlavorType flavorType, unsigned long * byteCount, Ptr destination ) = OSStatustoolbox fn ClearCurrentScrap() = OSStatustoolbox fn PutScrapFlavor( ScrapRef scrap, ScrapFlavorType flavorType, ScrapFlavorFlags flavorFlags, unsigned long flavorSize, const Ptr flavorData ) = OSStatustoolbox fn GetScrapFlavorInfoList(ScrapRef scrap, UInt32 * infoCount, ScrapFlavorInfo * info ) = OSStatustoolbox fn GetScrapFlavorCount( ScrapRef scrap, UInt32 * infoCount ) = OSStatus// TextEdit.htoolbox fn TEGetScrapLength = longtoolbox TESetScrapLength( long length)// LowMem.htoolbox fn LMGetResLoad = UInt8toolbox fn LMGetBootDrive = SInt16toolbox fn LMGetCurApRefNum = SInt16// NumberFormatting.htoolbox NumToString( long theNum, char * theString )toolbox StringToNum( ConstStr255Param theString, long * theNum )// Processes.htoolbox ExitToShelltoolbox fn GetIntlResource( short theID) = Handle// MacMemory.htoolbox fn HGetState( Handle h ) = SInt8toolbox HSetState( Handle h, SInt8 flags )// ????.htoolbox MaxApplZone// MacMemory.htoolbox fn FreeMem = longtoolbox fn MaxBlock = longtoolbox fn MaxMem( long * grow ) = long  toolbox fn MemError = OSErrtoolbox EmptyHandle( Handle h )toolbox fn CompactMem( long cbNeeded ) = long toolbox fn TempNewHandle( long logicalSize, OSErr *resultCode ) = Handletoolbox fn TempMaxMem( long * grow ) = longtoolbox fn TempFreeMem = longtoolbox fn NewPtr( long byteCount ) = Ptrtoolbox fn NewPtrClear( long byteCount ) = Ptr// ????.htoolbox fn NewPtrSys( long byteCount ) = Ptr  toolbox fn NewPtrSysClear( long byteCount ) = Ptr// MacMemory.htoolbox fn NewHandle( long byteCount ) = Handletoolbox fn NewHandleClear( long byteCount ) = Handle// ????.htoolbox fn NewHandleSys( long byteCount) = Handletoolbox fn NewHandleSysClear(long) = Handle// MacMemory.htoolbox HLock( Handle h )     toolbox HLockHi( Handle h )   toolbox HUnlock( Handle h )  toolbox HPurge( Handle h )    toolbox HNoPurge( Handle h ) toolbox SetHandleSize( Handle h, long newSize ) toolbox fn GetHandleSize( Handle h ) = long  toolbox fn GetPtrSize( Ptr p ) = long toolbox SetPtrSize( Ptr p, long newSize ) toolbox DisposeHandle( Handle h ) toolbox DisposePtr( Ptr p )       toolbox fn HandToHand( Handle * theHndl ) = OSErrtoolbox fn HandAndHand( Handle hand1, Handle hand2 ) = OSErrtoolbox MoveHHi( Handle h )toolbox fn StackSpace = longtoolbox fn IsHandleValid( Handle h ) = Booleantoolbox fn IsPointerValid( Ptr p ) = Booleantoolbox fn PtrToHand( Ptr srcPtr, Handle * dstHndl, long size ) = OSErrtoolbox fn PtrToXHand( Ptr srcPtr, Handle dstHndl, long size ) = OSErrtoolbox fn PtrAndHand( Ptr srcPtr, Handle dstHndl, long size ) = OSErr// Resources.htoolbox CloseResFile( short refNum )toolbox fn ResError = shorttoolbox fn CurResFile = shorttoolbox fn HomeResFile( Handle theResource ) = shorttoolbox UseResFile( short refNum )toolbox fn CountTypes = shorttoolbox fn Count1Types = shorttoolbox GetIndType( ResType * theType, short index )toolbox Get1IndType( ResType * theType, short index )toolbox SetResLoad( Boolean load )toolbox fn CountResources( ResType theType ) = shorttoolbox fn Count1Resources( ResType theType ) = shorttoolbox fn GetIndResource( ResType theType, short index ) = Handletoolbox fn Get1IndResource( ResType theType, short index ) = Handletoolbox fn GetResource( ResType theType, short theID ) = Handletoolbox fn Get1Resource( ResType theType, short theID ) = Handletoolbox fn GetNamedResource( ResType theType, ConstStr255Param name ) = Handletoolbox fn Get1NamedResource( ResType theType, ConstStr255Param name ) = Handletoolbox LoadResource( Handle theResource )toolbox ReleaseResource( Handle theResource )toolbox DetachResource(  Handle theResource )toolbox fn UniqueID( ResType theType ) = shorttoolbox fn Unique1ID( ResType theType ) = shorttoolbox fn GetResAttrs( Handle theResource ) = shorttoolbox GetResInfo( Handle theResource, short * theID, ResType * theType, Str255 name )toolbox SetResInfo( Handle theResource, short theID, ConstStr255Param name )toolbox AddResource( Handle theData, ResType theType, short theID, ConstStr255Param name )toolbox fn GetResourceSizeOnDisk( Handle theResource ) = longtoolbox fn GetMaxResourceSize( Handle theResource ) = longtoolbox SetResAttrs( Handle theResource, short attrs )toolbox ChangedResource( Handle theResource )toolbox RemoveResource( Handle theResource )toolbox UpdateResFile( short refNum )toolbox WriteResource( Handle theResource )toolbox SetResPurge( Boolean install )toolbox fn GetResFileAttrs( short refNum ) = shorttoolbox SetResFileAttrs (short refNum, short attrs )toolbox fn HOpenResFile( short vRefNum, long dirID, ConstStr255Param fileName, SInt8 permission ) = shorttoolbox HCreateResFile( short vRefNum, long dirID, ConstStr255Param fileName )toolbox fn FSpOpenResFile( const FSSpec * spec, SInt8 permission ) = shorttoolbox FSpCreateResFile( const FSSpec * spec, OSType creator, OSType fileType, ScriptCode scriptTag )toolbox ReadPartialResource( Handle theResource, long offset, Ptr buffer, long count )toolbox WritePartialResource( Handle theResource, long offset, const Ptr buffer, long count )toolbox SetResourceSize( Handle theResource, long newSize )toolbox fn GetNextFOND( Handle fondHandle ) = Handle// Quickdraw.h#if ndef _DEFINEDINCARBON#define GrafPtr as Ptr_hilitetransfermode = 50#endif// ndef _DEFINEDINCARBONtoolbox fn GetPortHiliteColor( CGrafPtr port, RGBColor * hiliteColor ) = Ptrtoolbox fn IsValidPort( CGrafPtr port ) = Booleantoolbox SetPort( GrafPtr port )toolbox GetPort( GrafPtr * port )toolbox GrafDevice( short device )toolbox SetPortBits( const BitMap * bm )toolbox PortSize( short width, short height )toolbox MovePortTo( short leftGlobal, short topGlobal )toolbox SetOrigin( short h, short v )toolbox SetClip( RgnHandle rgn )toolbox GetClip( RgnHandle rgn )toolbox ClipRect( const Rect * r )toolbox BackPat( const Pattern * pat )toolbox InitCursortoolbox SetCursor( const Ptr * crsr )toolbox HideCursortoolbox ShowCursortoolbox ObscureCursortoolbox HidePentoolbox ShowPentoolbox GetPen( Point * pt )toolbox GetPenState( PenState * pnState )toolbox SetPenState( const PenState * pnState )toolbox PenSize( short width, short height )toolbox PenMode( short mode )toolbox PenPat( const Pattern * pat )toolbox PenNormaltoolbox MoveTo( short h, short v )toolbox Move( short dh, short dv )toolbox LineTo( short h, short v )toolbox Line( short dh, short dv )toolbox ForeColor( long color )toolbox BackColor( long color )toolbox ColorBit( short whichBit )toolbox SetRect( Rect * r, short left, short top, short right, short bottom )toolbox OffsetRect( Rect * r, short dh, short dv )toolbox InsetRect( Rect * r, short dh, short dv )toolbox fn SectRect( const Rect * src1, const Rect * src2, Rect * dstRect ) = Booleantoolbox UnionRect( const Rect * src1, const Rect * src2, Rect * dstRect )toolbox fn EqualRect( const Rect * src1, const Rect * src2 ) = Booleantoolbox fn EmptyRect( const Rect * r ) = Booleantoolbox FrameRect( const Rect * r )toolbox PaintRect( const Rect * r )toolbox EraseRect( const Rect * r )toolbox InvertRect( const Rect * r )toolbox FillRect( const Rect * r, const Pattern * pat )toolbox FrameOval( const Rect * r )toolbox PaintOval( const Rect * r )toolbox EraseOval( const Rect * r )toolbox InvertOval( const Rect * r )toolbox FillOval( const Rect * r, const Pattern * pat )toolbox FrameRoundRect( const Rect * r, short ovalWidth, short ovalHeight )toolbox PaintRoundRect( const Rect * r, short ovalWidth, short ovalHeight )toolbox EraseRoundRect( const Rect * r, short ovalWidth, short ovalHeight )toolbox InvertRoundRect( const Rect * r, short ovalWidth, short ovalHeight )toolbox FillRoundRect( const Rect * r, short ovalWidth, short ovalHeight, const Pattern * pat)toolbox FrameArc( const Rect * r, short startAngle, short arcAngle )toolbox PaintArc( const Rect * r, short startAngle, short arcAngle )toolbox EraseArc( const Rect * r, short startAngle, short arcAngle )toolbox InvertArc( const Rect * r, short startAngle, short arcAngle )toolbox FillArc( const Rect * r, short startAngle, short arcAngle, const Pattern * pat )toolbox GetIndPattern( Pattern * thePat, short patternListID, short index )toolbox fn NewRgn = RgnHandletoolbox OpenRgntoolbox CloseRgn( RgnHandle dstRgn )toolbox fn BitMapToRegion( RgnHandle region, const BitMap * bMap ) = OSErrtoolbox DisposeRgn( RgnHandle rgn )toolbox CopyRgn( RgnHandle srcRgn, RgnHandle dstRgn )toolbox SetEmptyRgn( RgnHandle rgn )toolbox SetRectRgn( RgnHandle rgn, short left, short top, short right, short bottom )toolbox RectRgn( RgnHandle rgn, const Rect * r )toolbox OffsetRgn( RgnHandle rgn, short dh, short dv )toolbox InsetRgn( RgnHandle rgn, short dh, short dv )toolbox SectRgn( RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn )toolbox UnionRgn( RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn )toolbox DiffRgn( RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn )toolbox XorRgn( RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn )toolbox fn RectInRgn( const Rect * r, RgnHandle rgn ) = Booleantoolbox fn EqualRgn( RgnHandle rgnA, RgnHandle rgnB ) = Booleantoolbox fn EmptyRgn( RgnHandle rgn ) = Booleantoolbox FrameRgn( RgnHandle rgn )toolbox PaintRgn( RgnHandle rgn )toolbox EraseRgn( RgnHandle rgn )toolbox InvertRgn( RgnHandle rgn )toolbox FillRgn(RgnHandle rgn, const Pattern * pat )toolbox ScrollRect( const Rect * r, short dh, short dv, RgnHandle updateRgn )toolbox CopyBits( const BitMap * srcBits, const BitMap * dstBits, const Rect * srcRect, const Rect * dstRect, short mode, RgnHandle maskRgn )toolbox SeedFill( const Ptr srcPtr, Ptr dstPtr, short srcRow, short dstRow, short height, short words, short seedH, short seedV )toolbox CalcMask( const Ptr srcPtr, Ptr dstPtr, short srcRow, short dstRow, short height, short words )toolbox CopyMask( const BitMap * srcBits, const BitMap * maskBits, const BitMap * dstBits, const Rect * srcRect, const Rect * maskRect, const Rect * dstRect )toolbox fn OpenPicture( const Rect * picFrame ) = PicHandletoolbox PicComment( short kind, short dataSize, Handle dataHandle )toolbox ClosePicturetoolbox DrawPicture( PicHandle myPicture, const Rect * dstRect )toolbox fn QDGetPictureBounds( PicHandle picH, Rect * outRect ) = pointer // Rect*  (not available directly in CFM)// PictUtils.htoolbox fn GetPictInfo( PicHandle thePictHandle, PictInfo * thePictInfo, short vert, short colorsRequested, short colorPickMethod, short version ) = OSErr// Quickdraw.htoolbox KillPicture( PicHandle myPicture )toolbox fn OpenPoly = Handletoolbox ClosePolytoolbox KillPoly( Handle poly )toolbox OffsetPoly( Handle poly, short dh, short dv )toolbox FramePoly( Handle poly )toolbox PaintPoly( Handle poly )toolbox ErasePoly( Handle poly )toolbox InvertPoly( Handle poly )toolbox FillPoly( Handle poly, const Pattern * pat )toolbox SetPt( Point * pt, short h, short v )toolbox LocalToGlobal( Point * pt )toolbox GlobalToLocal( Point * pt )//toolbox fn Random = short  `0xA861  {22/12/06}toolbox StuffHex( Ptr thingPtr, ConstStr255Param s )toolbox fn GetPixel( short h, short v ) = Booleantoolbox ScalePt( Point * pt, const Rect * srcRect, const Rect * dstRect )toolbox MapPt( Point * pt, const Rect * srcRect, const Rect * dstRect )toolbox MapRect( Rect * r, const Rect * srcRect, const Rect * dstRect )toolbox MapRgn( RgnHandle rgn, const Rect * srcRect, const Rect * dstRect )toolbox MapPoly( Handle poly, const Rect * srcRect, const Rect * dstRect )toolbox SetStdProcs( Ptr * procs )toolbox StdRect( GrafVerb verb, const Rect * r )toolbox StdRRect( GrafVerb verb, const Rect * r, short ovalWidth, short ovalHeight )toolbox StdOval( GrafVerb verb, const Rect * r )toolbox StdArc( GrafVerb verb, const Rect * r, short startAngle, short arcAngle )toolbox StdPoly( GrafVerb verb, Handle poly )toolbox StdRgn( GrafVerb verb, RgnHandle rgn )toolbox StdBits( const BitMap * srcBits, const Rect * srcRect, const Rect * dstRect ,short mode, RgnHandle maskRgn )toolbox StdComment( short kind, short dataSize, Handle dataHandle )toolbox StdGetPic( Ptr dataPrt, short byteCount )toolbox StdPutPic(const Ptr dataPrt, short byteCount )toolbox AddPt( Point src, Point * dst )toolbox fn EqualPt( Point pt1, Point pt2 ) = Booleantoolbox fn PtInRect( Point pt, const Rect * r ) = Booleantoolbox Pt2Rect( Point pt1, Point pt2, Rect * dstRect )toolbox PtToAngle( const Rect * r, Point pt, short * angle )toolbox SubPt( Point src, Point * dst )toolbox fn PtInRgn( Point pt, RgnHandle rgn ) = Booleantoolbox StdLine( Point newPt )toolbox fn NewPixMap = PixMapHandletoolbox DisposePixMap( PixMapHandle pm )toolbox CopyPixMap( PixMapHandle srcPM, PixMapHandle dstPM )toolbox fn NewPixPat = Handletoolbox DisposePixPat( Handle pp )toolbox CopyPixPat( Handle srcPP, PixMapHandle dstPP )toolbox PenPixPat( Handle pp )toolbox BackPixPat( Handle pp )toolbox fn GetPixPat( short patID ) = PixMapHandletoolbox MakeRGBPat( Handle, const RGBColor * myColor )toolbox FillCRect( const Rect * r, Handle pp )toolbox FillCOval( const Rect * r, Handle pp )toolbox FillCRoundRect( const Rect * r, short ovalWidth, short ovalHeight, Handle pp )toolbox FillCArc( const Rect * r, short startAngle, short arcAngle, Handle pp )toolbox FillCRgn( RgnHandle rgn, Handle pp )toolbox FillCPoly( Handle poly, Handle pp )toolbox RGBForeColor( const RGBColor * color )toolbox RGBBackColor( const RGBColor * color )toolbox SetCPixel( short h, short v, const RGBColor * cPix )toolbox SetPortPix( PixMapHandle pm )toolbox GetCPixel( short h, short v, RGBColor * cPix )toolbox GetForeColor( RGBColor * cPix )toolbox GetBackColor( RGBColor * cPix )toolbox SeedCFill( const BitMap * srcBits, const BitMap * dstBits, const Rect * srcRect, const Rect * dstRect, short seedH, short seedV, Ptr matchProc, long matchData )toolbox CalcCMask( const BitMap * srcBits, const BitMap * dstBits, const Rect * srcRect, const Rect * dstRect, const RGBColor * seedRGB, Ptr matchProc, long matchData )toolbox fn OpenCPicture( const Ptr * newHeader ) = Handletoolbox OpColor( const RGBColor * color )toolbox HiliteColor( const RGBColor * color )toolbox DisposeCTable( Handle cTable )toolbox fn GetCTable( short ctID ) = Handletoolbox fn GetCCursor( short crsrID ) = Handletoolbox SetCCursor( Handle cCrsr )toolbox AllocCursortoolbox DisposeCCursor( Handle cCrsr )// Icons.htoolbox fn GetCIcon( SInt16 iconID ) = Handletoolbox PlotCIcon( const Rect * theRect, Handle theIcon )toolbox DisposeCIcon( Handle theIcon )// Quickdraw.htoolbox SetStdCProcs( Ptr * procs )toolbox fn GetMaxDevice( const Rect * globalRect ) = GDHandletoolbox fn GetCTSeed = longtoolbox fn GetDeviceList = GDHandletoolbox fn GetMainDevice = GDHandletoolbox fn GetNextDevice( GDHandle curDevice ) = GDHandletoolbox fn TestDeviceAttribute( GDHandle gdh, short attribute ) = Booleantoolbox SetDeviceAttribute( GDHandle gdh, short attribute, Boolean value )toolbox InitGDevice( short qdRefNum, long mode, GDHandle gdh )toolbox fn NewGDevice( short refNum, long mode ) = GDHandletoolbox DisposeGDevice( GDHandle gdh )toolbox SetGDevice( GDHandle gd )toolbox fn GetGDevice = GDHandletoolbox fn Color2Index( const RGBColor * myColor ) = longtoolbox Index2Color( long index, RGBColor * aColor )toolbox InvertColor( RGBColor * aColor )toolbox fn RealColor( const RGBColor * aColor ) = Booleantoolbox GetSubTable( Handle myColors, short iTabRes, Handle targetTbl )toolbox MakeITable( Handle cTabH, Handle iTabH, short res )toolbox AddSearch( Ptr searchProc )toolbox AddComp( Ptr searchProc )toolbox DelSearch( Ptr searchProc )toolbox DelComp( Ptr searchProc )toolbox SetClientID( short id )toolbox ProtectEntry( short index, Boolean protect )toolbox ReserveEntry( short index, Boolean reserve )toolbox SetEntries( short start, short count, Ptr aTable )// *** ????? third param (CSpecArray?)toolbox SaveEntries( Handle srcTable, Handle resultTable, Ptr * selection )toolbox RestoreEntries( Handle srcTable, Handle resultTable, Ptr * selection )toolbox fn QDError = shorttoolbox CopyDeepMask( const BitMap * srcBits, const BitMap * maskBits, const BitMap * dstBits, const Rect * srcRect, const Rect * maskRect, const Rect * dstRect, short mode, RgnHandle maskRgn )toolbox DeviceLoop( RgnHandle drawingRgn, Ptr drawingProc, long userData, long flags )toolbox fn GetPattern( short patternID ) = Handletoolbox fn GetCursor( short cursorID ) = Handletoolbox fn GetPicture( short pictureID ) = Handletoolbox fn DeltaPoint( Point ptA, Point ptB ) = longtoolbox ShieldCursor( const Rect * shieldRect, Point offsetRect )toolbox ScreenRes( short * scrnHRes, short scrnVRes )// QuickdrawText.htoolbox TextFont( short font )toolbox TextFace( short face )toolbox TextMode( short mode )toolbox TextSize( short size )toolbox SpaceExtra( Fixed extra )toolbox DrawChar( short ch )toolbox DrawString( ConstStr255Param s )toolbox DrawText( ptr textBuf, short firstByte, short byteCount )toolbox fn CharWidth( short ch ) = shorttoolbox fn StringWidth( ConstStr255Param s ) = shorttoolbox fn TextWidth( ptr textBuf, short firstByte, short byteCount ) = shorttoolbox MeasureText( short count, const Ptr textAddr, char * charLocs )toolbox GetFontInfo( FontInfo * info )toolbox CharExtra( Fixed extra )toolbox StdText( short count, const ptr textAddr, Point numer, Point denom )toolbox fn StdTxMeas(short byteCount, const Ptr textAddr, Point * numer, Point * denom, FontInfo * info ) = short// Fonts.htoolbox InitFontstoolbox GetFontName( short familyID, Str255 name )toolbox GetFNum( ConstStr255Param name, short * familyID )toolbox fn RealFont( short FontNum, short size ) = Booleantoolbox fn FMSwapFont( const Ptr * inRec ) = Ptrtoolbox SetFScaleDisable( Boolean fscaleDisable )toolbox FontMetrics( Ptr theMetrics )toolbox SetFractEnable( Boolean fractEnable )toolbox fn GetDefFontSize = shorttoolbox fn IsOutline( Point numer, Point denom ) = Booleantoolbox SetOutlinePreferred( Boolean outlinePreferred )toolbox fn GetOutlinePreferred = Booleantoolbox fn OutlineMetrics( short byteCount, const Ptr textPtr, Point numer, Point denom, short * yMax, short * yMin, Ptr awArray, Ptr isbArray, Ptr boundsArray ) = OSErrtoolbox SetPreserveGlyph( Boolean preserveGlyph )toolbox fn GetPreserveGlyph = Booleantoolbox fn GetSysFont = shorttoolbox fn GetAppFont = short // Script.htoolbox fn FontScript = shorttoolbox fn GetScriptVariable( short script, short selector ) = longtoolbox fn GetScriptManagerVariable( short selector ) = long// DateTimeUtils.htoolbox fn InitDateCache( Ptr theCache ) = OSErr// TextUtils.htoolbox fn Munger( Handle h, long offset, const ptr ptr1, long len1, const ptr ptr2, long len2 ) = long// handle: handl to destination text// offset: character position at which to start search// ptr1:   pointer to target text// len1:   Length of target text// ptr2:   pointer to replacement text// lent2:  length of replacement text// returned long: character position at end of the munger operationtoolbox fn NewString( ConstStr255Param theString ) = Handletoolbox SetString( Handle theString, ConstStr255Param strNew )toolbox fn GetString( short stringID ) = Handle//toolbox GetIndString( Str255 theString, short strListID, short index )// *** ???? delete?// StringCompare.htoolbox fn ScriptOrder( ScriptCode script1, ScriptCode script2 ) = short// QuickdrawText.htoolbox fn StyledLineBreak( ptr textPtr, long textLen, long textStart, long textEnd, long flags, Fixed * textWidth, long * textOffset ) = SInt8toolbox fn TruncString( short width, Str255 theString, short truncWhere ) = shorttoolbox fn TruncText( short width, ptr textPtr, short * length, short truncWhere ) = short// StringCompare.htoolbox fn ReplaceText( Handle baseText, Handle substitutionText, Str15 key ) = short// TextUtils.htoolbox FindWordBreaks( ptr textPtr, short textLength, short offset, Boolean leadingEdge, Ptr breakTablePtr, Ptr offsets, short script )// *** ????toolbox LowercaseText( ptr textPtr, short len, short script )toolbox UppercaseText( ptr textPtr, short len, short script )toolbox StripDiacritics( ptr textPtr, short len, short script )toolbox UppercaseStripDiacritics( ptr textPtr, short len, short script )toolbox fn FindScriptRun( ptr textPtr, long textLen, long * lenUsed ) = short// StringCompare.h/* The following functions are old names,but are required for PowerPC builds becuase InterfaceLib exports these names,instead of the new ones.*//*toolbox fn IUMagString(long,long,short,short) =short  toolbox fn IUMagIDString(long,long,short,short) =short  toolbox fn IUMagPString(long,long,short,short,long) =short toolbox fn IUMagIDPString(long,long,short,short,long) =short  toolbox fn IUScriptOrder(short,short) =short toolbox fn IULangOrder(short,short) =short toolbox fn IUTextOrder(long,long,short,short,short,short,short,short)=short */// TextUtils.htoolbox FindWord(long,short,short,Boolean,@long,@long)toolbox NFindWord(long,short,short,Boolean,@long,@long) toolbox fn EqualString(Str255,Str255,Boolean,Boolean)= Boolean// StringCompare.htoolbox fn RelString( ConstStr255Param str1, ConstStr255Param str2, Boolean caseSensitive, Boolean diacSensitive ) = short// QDOffscreen.htoolbox fn NewGWorld( ptr * offscreenGWorld, short pixelDepth, const Rect * boundsRect, Handle cTable, GDHandle aGDevice, long flags ) = shorttoolbox fn LockPixels( Handle pm ) = Booleantoolbox UnlockPixels( Handle pm )toolbox fn UpdateGWorld( ptr * offscreenGWorld, short pixelDepth, const Rect * boundsRect, Handle cTable, GDHandle aGDevice,long flags ) = longtoolbox DisposeGWorld( ptr offscreenGWorld )toolbox GetGWorld( CGrafPtr * port, GDHandle * gdh )toolbox SetGWorld( CGrafPtr port, GDHandle gdh )toolbox CTabChanged( Handle ctab )toolbox PixPatChanged( Handle ppat )toolbox PortChanged( GrafPtr port )toolbox GDeviceChanged( GDHandle gdh )toolbox AllowPurgePixels( Handle pm )toolbox NoPurgePixels( Handle pm )toolbox fn GetPixelsState( Handle pm ) = longtoolbox SetPixelsState( Handle pm, long state )toolbox fn GetPixBaseAddr( Handle pm ) = ptrtoolbox fn GetPixRowBytes( PixMapHandle pm ) = long toolbox fn NewScreenBuffer( const Rect * globalRect, Boolean purgeable, GDHandle * gdh, Handle * offscreenPixMap ) = shorttoolbox DisposeScreenBuffer( Handle offscreenPixMap )toolbox fn GetGWorldDevice( Ptr offscreenGWorld) = GDHandletoolbox fn QDDone( GrafPtr port ) = Booleantoolbox fn OffscreenVersion = longtoolbox fn NewTempScreenBuffer( const Rect * globalRect, Boolean purgeable, GDHandle gdh, Handle * offscreenPixMap ) = shorttoolbox fn PixMap32Bit( Handle pmHandle ) = Booleantoolbox fn GetGWorldPixMap( Ptr offscreenGWorld ) = Handle// MacWindows.h#if ndef _DEFINEDINCARBON#define WindowRegionCode as UInt16#endif// ndef _DEFINEDINCARBONtoolbox fn NewWindow( ptr wStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, short theProc, WindowRef behind, Boolean goAwayFlag, long refCon ) = WindowReftoolbox fn NewCWindow( ptr wStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, short theProc, WindowRef behind, Boolean goAwayFlag, long refCon ) = WindowReftoolbox fn GetNewWindow( short windowID, Ptr wStorage, WindowRef behind ) = WindowReftoolbox fn GetNewCWindow( short windowID, Ptr wStorage, WindowRef behind ) = WindowReftoolbox DisposeWindow( WindowRef )toolbox GetWTitle( WindowRef window, Str255 title )toolbox SelectWindow( WindowRef window )toolbox HideWindow( WindowRef window )toolbox ShowWindow( WindowRef window )toolbox ShowHide( WindowRef window, Boolean showFlag )toolbox HiliteWindow( WindowRef window, Boolean fHilite)toolbox BringToFront( WindowRef window )toolbox SendBehind( WindowRef window, WindowRef behindWindow )toolbox fn FrontWindow = WindowReftoolbox DrawGrowIcon( WindowRef window )toolbox MoveWindow( WindowRef window, short hGlobal, short vGlobal, Boolean front )toolbox SizeWindow( WindowRef window, short w, short h, Boolean fUpdate )toolbox ZoomWindow( WindowRef window, SInt16 partCode, Boolean front )toolbox BeginUpdate( WindowRef window )toolbox EndUpdate( WindowRef window )toolbox SetWRefCon( WindowRef window, long data )toolbox fn GetWRefCon( WindowRef window ) = longtoolbox SetWindowPic( WindowRef window, Handle pic )toolbox fn GetWindowPic( WindowRef window ) = Handletoolbox fn CheckUpdate( EventRecord * theEvent ) = Booleantoolbox ClipAbove( WindowRef window )toolbox PaintOne( WindowRef window, RgnHandle clobberedRgn )toolbox PaintBehind( WindowRef window, RgnHandle clobberedRgn )toolbox CalcVis( WindowRef window )toolbox CalcVisBehind( WindowRef window, RgnHandle clobberedRgn )toolbox fn GrowWindow( WindowRef window, Point startPt, const Rect * bBox ) = longtoolbox fn GetGrayRgn = RgnHandletoolbox fn FindWindow( Point thePoint, WindowRef * window ) = SInt16toolbox fn PinRect( const Rect * theRect, Point thePt ) = longtoolbox fn DragGrayRgn( RgnHandle theRgn, Point startPt, const Rect * limitRect, const Rect * slopRect, short axis, Ptr actionProc ) = longtoolbox fn DragTheRgn( RgnHandle theRgn, Point startPt, const Rect * limitRect, const Rect * slopRect, short axis, Ptr actionProc) = longtoolbox fn TrackBox( WindowRef window, Point thePt, SInt16 partCode ) = Booleantoolbox fn GetWVariant( WindowRef window ) = shorttoolbox SetWTitle( WindowRef window, ConstStr255Param title )toolbox fn TrackGoAway( WindowRef window, Point thePt ) = Booleantoolbox DragWindow( WindowRef window, Point startPt, const Rect * boundsRect )toolbox fn InvalWindowRect( WindowRef window, const Rect * bounds ) = OSStatustoolbox fn ValidWindowRect( WindowRef window, const Rect * bounds ) = OSStatustoolbox fn InvalWindowRgn( WindowRef window, RgnHandle region ) = OSStatustoolbox fn ValidWindowRgn( WindowRef window, RgnHandle region ) = OSStatustoolbox fn GetWindowBounds( WindowRef window, WindowRegionCode regionCode, Rect * globalBounds ) = OSStatustoolbox fn SetWindowBounds( windowRef window, WindowRegionCode regionCode, const Rect * globalBounds) = OSStatustoolbox fn GetWindowRegion( WindowRef window, WindowRegionCode inRegionCode, RgnHandle ioWinRgn ) = OSStatustoolbox fn GetWindowFeatures( WindowRef window, UInt32 * outFeatures ) = OSStatustoolbox fn CollapseWindow( WindowRef window, Boolean collapse ) = OSStatustoolbox fn CollapseAllWindows( Boolean collapse ) = OSStatustoolbox fn IsWindowCollapsable( WindowRef window ) = Booleantoolbox fn IsWindowCollapsed( WindowRef window ) = Booleantoolbox fn GetWindowList = WindowReftoolbox fn GetWindowPort( WindowRef window ) = CGrafPtrtoolbox fn GetWindowKind( WindowRef window ) = shorttoolbox fn IsWindowVisible( WindowRef window ) = Booleantoolbox fn IsWindowHilited( WindowRef window ) = Booleantoolbox fn IsWindowUpdatePending( WindowRef window ) = Booleantoolbox fn GetNextWindow( WindowRef window ) = WindowReftoolbox GetWindowStandardState( WindowRef window, Rect * rect )// *** ???? should this be a function, returning a rect?toolbox GetWindowUserState( WindowRef window, Rect * rect )// *** ???? as abovetoolbox SetWindowStandardState( WindowRef window, const Rect * rect )toolbox SetWindowUserState( WindowRef window, const Rect * rect )// Quickdraw.htoolbox fn IsPortOffscreen( CGrafPtr port ) = Boolean// Menus.htoolbox EnableMenuCommand( MenuRef theMenu, MenuCommand commandID )toolbox DisableMenuCommand( MenuRef theMenu, MenuCommand commandID )toolbox fn GetIndMenuItemWithCommandID( MenuRef theMenu, MenuCommand commandID, UInt32 itemIndex, MenuRef *outMenu, MenuItemIndex *outIndex ) = OSStatustoolbox fn SetMenuItemCommandKey( MenuRef inMenu, MenuItemIndex inItem, Boolean inSetVirtualKey, UInt16 inKey ) = OSStatus// MacWindows.htoolbox fn GetWindowFromPort( CGrafPtr port ) = WindowRef// Quickdraw.htoolbox GetQDGlobalsScreenBits( BitMap * screenBits )// *** ???? should this return a pointer?toolbox QDFlushPortBuffer( CGrafPtr port, RgnHandle region )toolbox fn QDIsPortBuffered( CGrafPtr port ) = Boolean// MacWindows.htoolbox fn IsValidWindowPtr( WindowRef possibleWindow ) = Booleantoolbox SetPortWindowPort( WindowRef window )toolbox GetWindowPortBounds( WindowRef window, Rect * bounds )// Dialogs.htoolbox fn NewColorDialog( ptr dStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, SInt16 procID, WindowRef behind, Boolean goAwayFlag, SInt32 refCon, Handle items ) = DialogReftoolbox fn NewDialog( ptr dStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, SInt16 procID, WindowRef behind, Boolean goAwayFlag, SInt32 refCon, Handle items ) = DialogReftoolbox fn GetNewDialog( SInt16 dialogID, ptr dStorage, WindowRef behind ) = DialogReftoolbox GetDialogItem( DialogRef theDialog, SInt16 itemNo, SInt16 * itemType, Handle * item, Rect * box )toolbox SetDialogItem( DialogRef theDialog, SInt16 itemNo, SInt16 itemType, Handle item, const Rect * box )toolbox DisposeDialog( DialogRef theDialog )toolbox ParamText( ConstStr255Param param0, ConstStr255Param param1, ConstStr255Param param2, ConstStr255Param param3 )toolbox ModalDialog( Ptr modalFilter, SInt16 * itemHit )toolbox fn IsDialogEvent( const EventRecord * theEvent ) = Booleantoolbox fn DialogSelect( const EventRecord * theEvent, DialogRef * theDialog, SInt16 * itemHit ) = Booleantoolbox DrawDialog( DialogRef theDialog )toolbox UpdateDialog( DialogRef theDialog, RgnHandle updateRgn )toolbox AppendDITL( DialogRef theDialog, Handle theHandle, SInt16 method ) toolbox ShortenDITL( DialogRef theDialog, SInt16 numberItems )toolbox fn CountDITL( DialogRef theDialog ) = SInt16  toolbox fn Alert( SInt16 alertID, ptr modalFilder ) = SInt16toolbox fn StopAlert( SInt16 alertID, ptr modalFilder ) = SInt16toolbox fn NoteAlert( SInt16 alertID, ptr modalFilder ) = SInt16toolbox fn CautionAlert( SInt16 alertID, ptr modalFilder ) = SInt16toolbox HideDialogItem( DialogRef theDialog, SInt16 itemNo )toolbox ShowDialogItem( DialogRef theDialog, SInt16 itemNo )toolbox SelectDialogItemText( DialogRef theDialog, SInt16 itemNo, SInt16 strtSel, SInt16 endSel )toolbox GetDialogItemText( Handle item, Str255 text )toolbox SetDialogItemText( Handle item, ConstStr255Param text )toolbox fn FindDialogItem( DialogRef theDialog, Point thePt ) = SInt16toolbox fn GetAlertStage = SInt16toolbox ResetAlertStagetoolbox SetDialogFont( SInt16 fontNum )toolbox fn GetStdFilterProc( ptr * theProc ) = OSErrtoolbox fn SetDialogDefaultItem( DialogRef theDialog, SInt16 newItem ) = OSErrtoolbox fn SetDialogCancelItem( DialogRef theDialog, SInt16 newItem ) = OSErrtoolbox fn SetDialogTracksCursor( DialogRef theDialog, Boolean tracks ) = OSErr// Menus.htoolbox fn GetMBarHeight = shorttoolbox fn NewMenu( SInt16 menuID, ConstStr255Param menuTitle ) = MenuReftoolbox fn GetMenu( short resourceID ) = MenuReftoolbox DisposeMenu( MenuRef theMenu )toolbox AppendMenu( MenuRef menu, ConstStr255Param data )toolbox AppendResMenu( MenuRef theMenu, ResType theType )toolbox InsertResMenu( MenuRef theMenu, ResType theType, MenuItemIndex afterItem )toolbox InsertMenu( MenuRef theMenu, SInt16 beforeID )toolbox DrawMenuBartoolbox InvalMenuBartoolbox DeleteMenu( SInt16 menuID )toolbox ClearMenuBartoolbox fn GetNewMBar( short menuBarID ) = Handletoolbox fn GetMenuBar = Handletoolbox SetMenuBar( Handle )toolbox InsertMenuItem( MenuRef theMenu, ConstStr255Param itemString, MenuItemIndex afterItem )toolbox DeleteMenuItem( MenuRef theMenu, MenuItemIndex item )toolbox fn MenuKey( short ) = longtoolbox HiliteMenu( SInt16 menuID )toolbox SetMenuItemText( MenuRef theMenu, MenuItemIndex item, ConstStr255Param itemString )toolbox GetMenuItemText( MenuRef theMenu, MenuItemIndex item, Str255 itemString )toolbox GetMenuTitle( MenuRef menu, Str255 title )toolbox fn GetMenuID( MenuRef menu ) = SInt16toolbox fn CountMenuItems( MenuRef menu ) = UInt16toolbox CheckMenuItem( MenuRef theMenu, MenuItemIndex item, Boolean checked )toolbox DisableMenuItem( MenuRef theMenu, MenuItemIndex item )toolbox EnableMenuItem( MenuRef theMenu, MenuItemIndex item )toolbox SetItemMark( MenuRef theMenu, MenuItemIndex item, short markChar )toolbox GetItemMark( MenuRef theMenu, MenuItemIndex item,short * markChar )toolbox SetItemIcon( MenuRef theMenu, MenuItemIndex item, short iconIndex )toolbox GetItemIcon( MenuRef theMenu, MenuItemIndex item, short * iconIndex )toolbox SetItemStyle( MenuRef theMenu, MenuItemIndex item, short chStyle )toolbox GetItemStyle( MenuRef theMenu, MenuItemIndex item, unsigned char * chStyle )toolbox CalcMenuSize( MenuRef theMenu )toolbox fn GetMenuHandle( SInt16 ) = MenuReftoolbox FlashMenuBar( SInt16 )toolbox SetMenuFlash( short )toolbox fn MenuSelect( Point startPt ) = longtoolbox InitProcMenu( short )// *** ???? delete?toolbox GetItemCmd( MenuRef theMenu, MenuItemIndex, short * cmdChar )toolbox SetItemCmd( MenuRef theMenu, MenuItemIndex item, short cmdChar)toolbox fn PopUpMenuSelect( MenuRef menu, short top, short left, MenuItemIndex popUpItem ) = longtoolbox fn MenuChoice = longtoolbox DeleteMCEntries( SInt16 menuID, short menuItem )toolbox fn GetMCInfo = Handletoolbox SetMCInfo( Handle menuCTbl )toolbox DisposeMCInfo( Handle menuCTbl )toolbox fn GetMCEntry( SInt16 menuID, short menuItem ) = longtoolbox SetMCEntries( short numEntries, Ptr menuCEntries )toolbox InsertFontResMenu( MenuRef theMenu, MenuItemIndex afterItem, short scriptFilter )toolbox InsertIntlResMenu( MenuRef theMenu, ResType theType, MenuItemIndex afterItem, short scriptFilter )toolbox fn GetMenuWidth( MenuRef menu ) = SInt16toolbox fn IsMenuCommandEnabled( MenuRef inMenu, MenuCommand inCommandID ) = Boolean// Controls.htoolbox fn GetRootControl( WindowRef inWindow, ControlRef * outControl ) = OSErrtoolbox fn CreateRootControl( WindowRef inWindow, ControlRef * outControl ) = OSErrtoolbox fn CountSubControls( ControlRef inControl, UInt16 * outNumChildren ) = OSErrtoolbox fn GetIndexedSubControl( ControlRef inControl, UInt16 inIndex, ControlRef * outSubControl ) = OSErrtoolbox fn NewControl( WindowRef owningWindow, const Rect * boundsRect, ConstStr255Param controlTitle, Boolean initiallyVisible, SInt16 initialValue, SInt16 minimumValue, SInt16 maximumValue, SInt16 procID, Sint32 controlReference ) = ControlReftoolbox fn GetNewControl( SInt16 resourceID, WindowRef owningWindow ) = ControlReftoolbox DisposeControl( ControlRef theControl )toolbox KillControls( WindowRef theWindow )toolbox ShowControl( ControlRef theControl )toolbox HideControl( ControlRef theControl )toolbox DrawControls( WindowRef theWindow )toolbox Draw1Control(ControlRef theControl )toolbox DrawOneControl( ControlRef theControl )toolbox UpdateControls( WindowRef inWindow, RgnHandle inUpdaateRegion )toolbox HiliteControl( ControlRef theControl, ControlPartCode hiliteState )toolbox fn TrackControl( ControlRef theControl, Point startPoint, Ptr actionProc ) = ControlPartCodetoolbox DragControl( ControlRef theControl, Point startPoint, const Rect * limitRect, const Rect * slopRect, UInt16 axis )toolbox fn TestControl( ControlRef theControl, Point testtPoint ) = ControlPartCodetoolbox fn FindControl( Point testPoint, WindowRef theWindow, ControlRef * theControl) = ControlPartCodetoolbox MoveControl( ControlRef theControl, SInt16 h, SInt16 v )toolbox SizeControl( ControlRef theControl, SInt16 w, SInt16 h )toolbox SetControlTitle( ControlRef theControl, ConstStr255Param title )toolbox GetControlTitle( ControlRef theControl, Str255 title )toolbox fn GetControlValue( ControlRef theControl ) = SInt16toolbox SetControlValue( ControlRef theControl, SInt16 newValue )toolbox fn GetControlMinimum( ControlRef theControl ) = SInt16toolbox SetControlMinimum( ControlRef theControl, SInt16 newMinimum )toolbox fn GetControlMaximum( ControlRef theControl ) = SInt16toolbox SetControlMaximum( ControlRef theControl, SInt16 newMaximum )toolbox fn GetControlVariant( ControlRef theControl ) = SInt16toolbox SetControlAction( ControlRef theControl, Ptr actionProc )toolbox fn GetControlAction( ControlRef theControl ) = Ptrtoolbox SetControlReference( ControlRef theControl, SInt32 data )toolbox fn GetControlReference( ControlRef theControl ) = SInt32toolbox fn GetAuxiliaryControlRecord(handle,@long) = Boolean// *** ???? delete?toolbox SetControlColor(Handle,long)// *** ???? delete?toolbox fn GetControlDataHandle( ControlRef theControl ) = Handletoolbox SetControlDataHandle( ControlRef theControl, Handle dataHandle)toolbox fn GetControlOwner( ControlRef control ) = WindowReftoolbox fn GetControlHilite( ControlRef control ) = UInt16toolbox fn IsControlHilited( ControlRef control ) = Booleantoolbox fn GetControlRegion( ControlRef inControl, ControlPartCode inPart, RgnHandle outRegion)  = OSStatustoolbox GetControlBounds( ControlRef control, Rect * bounds )toolbox SetControlBounds( ControlRef control, const Rect * bounds )toolbox fn GetControlCommandID( ControlRef inControl, UInt32 *outCommandID ) = OSStatustoolbox fn SetControlCommandID( ControlRef inControl, UInt32 inCommandID ) = OSStatus#if ndef _DEFINEDINCARBONbegin record ControlIDdim as OSType  signaturedim as SInt32  idend record#endif// ndef _DEFINEDINCARBONtoolbox fn GetControlID( ControlRef inControl, ControlID * outID ) = OSStatustoolbox fn SetControlID( ControlRef inControl, const ControlID * inID ) = OSStatustoolbox fn GetControlByID( WindowRef inWindow, const ControlID * inID, ControlRef * outControl ) = OSStatus// TextEdit.htoolbox fn TEScrapHandle = Handletoolbox fn TENew( const Rect * destRect, const Rect * viewRect ) = Handletoolbox TEDispose( Handle hTE )toolbox TESetText( ptr text, long length, Handle hTE )toolbox fn TEGetText( Handle hTE ) = Handle toolbox TEIdle( Handle hTE )toolbox TESetSelect( long selStart, long selEnd, Handle hTE )toolbox TEActivate( Handle hTE )toolbox TEDeactivate( Handle hTE )toolbox TEKey( short key, Handle hTE )toolbox TECut( Handle hTE )toolbox TECopy( Handle hTE )toolbox TEPaste( Handle hTE )toolbox TEDelete( Handle hTE )toolbox TEInsert( ptr text, long length, Handle hTE )toolbox TESetAlignment( short just, Handle hTE )toolbox TEUpdate( const Rect * rUpdaate, Handle hTE )toolbox TETextBox( ptr text, long length, const Rect * box, short just )toolbox TEScroll( short dh, short dv, Handle hTE )toolbox TESelView( Handle hTE )toolbox TEPinScroll( short dh, short dv, Handle hTE )toolbox TEAutoView( Boolean fAuto, Handle hTE )toolbox TECalText( Handle hTE )toolbox fn TEGetOffset( Point pt, Handle hTE ) = shorttoolbox TEGetPoint( Point * pt, short offset, Handle hTE )// *** ???? // special for returning pointtoolbox TEClick( Point pt, Boolean fExtend, Handle hTE )toolbox fn TEStyleNew( const Rect * destRect, const Rect * viewRect ) = Handletoolbox TESetStyleHandle( Handle theHandle, Handle hTE )toolbox fn TEGetStyleHandle( Handle hTE ) = Handletoolbox TEGetStyle( short offset, TextStyle * theStyle, short * lineHeight, short * fontAscent, Handle hTE )toolbox TEStylePaste( Handle hTE )toolbox TESetStyle( short mode, const TextStyle * newStyle, Boolean fRedraw, Handle hTE )toolbox TEReplaceStyle( short mode, const TextStyle * oldStyle, const TextStyle * newStyle, Boolean fRedraw, Handle hTE )toolbox fn TEGetStyleScrapHandle( Handle hTE ) = Handletoolbox TEStyleInsert( ptr text, long length, Handle hST, Handle hTE )toolbox fn TEGetHeight( long endLine, long startLine, Handle hTE ) = longtoolbox fn TEContinuousStyle( short * mode, TextStyle * aStyle, Handle hTE ) = Booleantoolbox TEUseStyleScrap( long rangeStart, long rangeEnd, Handle newStyles, Boolean fRedraw, Handle hTE )toolbox TECustomHook( short which, Ptr * addr, Handle hTE )toolbox fn TENumStyles( long rangeStart, long rangeEnd, Handle hTE ) = longtoolbox fn TEFeatureFlag( short feature, short action, Handle hTE ) = short// Devices.htoolbox fn PBCloseAsync( ptr paramBlock) = OSErrtoolbox fn PBCloseSync( ptr paramBlock) = OSErrtoolbox fn PBReadAsync( ptr paramBlock) = OSErrtoolbox fn PBReadSync( ptr paramBlock) = OSErrtoolbox fn PBWriteAsync( ptr paramBlock) = OSErrtoolbox fn PBWriteSync( ptr paramBlock) = OSErr// Files.htoolbox fn PBXGetVolInfoAsync( ptr paramBlock) = OSErrtoolbox fn PBXGetVolInfoSync( ptr paramBlock) = OSErrtoolbox fn PBSetFVersAsync( ptr paramBlock) = OSErrtoolbox fn PBSetFVersSync( ptr paramBlock) = OSErrtoolbox fn PBAllocateAsync( ptr paramBlock) = OSErrtoolbox fn PBAllocateSync( ptr paramBlock) = OSErrtoolbox fn PBGetEOFAsync( ptr paramBlock) = OSErrtoolbox fn PBGetEOFSync( ptr paramBlock) = OSErrtoolbox fn PBSetEOFAsync( ptr paramBlock) = OSErrtoolbox fn PBSetEOFSync( ptr paramBlock) = OSErrtoolbox fn SetEOF( short refNum, long logEOF ) = OSErrtoolbox fn PBGetFPosAsync( ptr paramBlock) = OSErrtoolbox fn PBGetFPosSync( ptr paramBlock) = OSErrtoolbox fn PBSetFPosAsync( ptr paramBlock) = OSErrtoolbox fn PBSetFPosSync( ptr paramBlock) = OSErrtoolbox fn SetFPos( short refNum, short posMode, long posOff ) = OSErrtoolbox fn PBFlushFileAsync( ptr paramBlock) = OSErrtoolbox fn PBFlushFileSync( ptr paramBlock) = OSErrtoolbox fn PBMountVol( ptr paramBlock) = OSErr// *** ???? delete?toolbox fn PBUnmountVol( ptr paramBlock) = OSErr// *** ???? delete?toolbox fn PBCatSearchAsync( ptr paramBlock) = OSErrtoolbox fn PBCatSearchSync( ptr paramBlock) = OSErrtoolbox fn FSMakeFSSpec( short vRefNum, long dirID, ConstStr255Param fileName, FSSpec * spec ) = OSErrtoolbox fn FSpOpenDF( const FSSpec * spec, SInt8 permission, short * refNum ) = OSErrtoolbox fn FSpOpenRF( const FSSpec * spec, SInt8 permission, short * refNum ) = OSErrtoolbox fn FSpCreate( const FSSpec * spec, OSType creator, OSType fileType, short scriptTag ) = OSErrtoolbox fn FSpDirCreate( const FSSpec * spec, short scriptTag, long * createDirID ) = OSErrtoolbox fn FSpDelete( const FSSpec * spec ) = OSErrtoolbox fn FSpGetFInfo( const FSSpec * spec, FInfo * fndrInfo ) = OSErrtoolbox fn FSpSetFInfo( const FSSpec * spec, const FInfo * fndrInfo ) = OSErrtoolbox fn FSpSetFLock( const FSSpec * spec ) = OSErrtoolbox fn FSpRstFLock( const FSSpec * spec ) = OSErrtoolbox fn FSpRename( const FSSpec * spec, ConstStr255Param newName ) = OSErrtoolbox fn FSpCatMove( const FSSpec * source, const FSSpec * dest ) = OSErrtoolbox fn FSpExchangeFiles( const FSSpec * source, const FSSpec * dest ) = OSErrtoolbox fn PBHSetVolSync( ptr paramBlock) = OSErrtoolbox fn PBHSetVolAsync( ptr paramBlock) = OSErrtoolbox fn PBHGetVolSync( ptr paramBlock) = OSErrtoolbox fn PBHGetVolAsync( ptr paramBlock) = OSErrtoolbox fn PBCatMoveSync( ptr paramBlock) = OSErrtoolbox fn PBCatMoveAsync( ptr paramBlock) = OSErrtoolbox fn PBDirCreateSync( ptr paramBlock) = OSErrtoolbox fn PBDirCreateAsync( ptr paramBlock) = OSErrtoolbox fn PBGetFCBInfoSync( ptr paramBlock) = OSErrtoolbox fn PBGetFCBInfoAsync( ptr paramBlock) = OSErrtoolbox fn PBGetCatInfoSync( ptr paramBlock) = OSErrtoolbox fn PBGetCatInfoAsync( ptr paramBlock) = OSErrtoolbox fn PBSetCatInfoSync( ptr paramBlock) = OSErrtoolbox fn PBSetCatInfoAsync( ptr paramBlock) = OSErrtoolbox fn PBAllocContigSync( ptr paramBlock) = OSErrtoolbox fn PBAllocContigAsync( ptr paramBlock) = OSErrtoolbox fn PBLockRangeSync( ptr paramBlock) = OSErrtoolbox fn PBLockRangeAsync( ptr paramBlock) = OSErrtoolbox fn PBUnlockRangeSync( ptr paramBlock) = OSErrtoolbox fn PBUnlockRangeAsync( ptr paramBlock) = OSErrtoolbox fn PBSetVInfoSync( ptr paramBlock) = OSErrtoolbox fn PBSetVInfoAsync( ptr paramBlock) = OSErrtoolbox fn PBHGetVInfoSync( ptr paramBlock) = OSErrtoolbox fn PBHGetVInfoAsync( ptr paramBlock) = OSErrtoolbox fn PBHOpenSync( ptr paramBlock) = OSErrtoolbox fn PBHOpenAsync( ptr paramBlock) = OSErrtoolbox fn PBHOpenRFSync( ptr paramBlock) = OSErrtoolbox fn PBHOpenRFAsync( ptr paramBlock) = OSErrtoolbox fn PBHOpenDFSync( ptr paramBlock) = OSErrtoolbox fn PBHOpenDFAsync( ptr paramBlock) = OSErrtoolbox fn PBHCreateSync( ptr paramBlock) = OSErrtoolbox fn PBHCreateAsync( ptr paramBlock) = OSErrtoolbox fn PBHDeleteSync( ptr paramBlock) = OSErrtoolbox fn PBHDeleteAsync( ptr paramBlock) = OSErrtoolbox fn PBHRenameSync( ptr paramBlock) = OSErrtoolbox fn PBHRenameAsync( ptr paramBlock) = OSErrtoolbox fn PBHRstFLockSync( ptr paramBlock) = OSErrtoolbox fn PBHRstFLockAsync( ptr paramBlock) = OSErrtoolbox fn PBHSetFLockSync( ptr paramBlock) = OSErrtoolbox fn PBHSetFLockAsync( ptr paramBlock) = OSErrtoolbox fn PBHGetFInfoSync( ptr paramBlock) = OSErrtoolbox fn PBHGetFInfoAsync( ptr paramBlock) = OSErrtoolbox fn HGetFInfo( short vRefNum, long dirID, ConstStr255Param fileName, FInfo * fndrInfo) = OSErrtoolbox fn PBHSetFInfoSync( ptr paramBlock) = OSErrtoolbox fn HSetFInfo( short vRefNum, long dirID, ConstStr255Param fileName, FInfo * fndrInfo) = OSErrtoolbox fn PBHSetFInfoAsync( ptr paramBlock) = OSErrtoolbox fn PBMakeFSSpecSync( ptr paramBlock) = OSErrtoolbox fn PBMakeFSSpecAsync( ptr paramBlock) = OSErr// Folders.htoolbox fn FindFolder( short vRefNum, OSType folderType, Boolean createFolder, short * foundVRefNum, long * founddDirID ) = OSErrtoolbox fn ReleaseFolder( short vRefNum, OSType folderType ) = OSErrtoolbox fn FindFolderExtended( short vRefNum, OSType folderType, Boolean createFolder, UInt32 flags, ptr data, short * foundVRefNum, long * foundDirID ) = OSErr// Files.htoolbox fn PBFlushVolAsync( ptr paramBlock) = OSErrtoolbox fn PBFlushVolSync( ptr paramBlock) = OSErr// Lists.htoolbox fn LNew( const Rect * rView, const Rect * dataBounds, Point cSize, short theProc, WindowRef theWindow, Boolean drawIt, Boolean hasGrow, Boolean scrollHoriz, Boolean scrollVert ) = Handletoolbox LDispose( Handle lHandle )toolbox fn LAddColumn( short count, short colNum, Handle lHandle ) = shorttoolbox fn LAddRow( short count, short rowNum, Handle lHandle ) = shorttoolbox LDelColumn( short count, short colNum, Handle lHandle )toolbox LDelRow( short count, short rowNum, Handle lHandle )toolbox fn LGetSelect( Boolean nxt, Point * theCell, Handle lHandle ) = Booleantoolbox fn LLastClick( Handle lHandle ) = Pointtoolbox fn LNextCell( Boolean hNext, Boolean vNext, Point * theCell, Handle lHandle ) = Booleantoolbox fn LSearch( ptr dataPtr, short dataLen, proc searchProc, Point * theCell, Handle lHandle ) = Booleantoolbox LSize( short listWidth, short listHeight, Handle lHandle )toolbox LSetDrawingMode( Boolean drawIt, Handle lHandle )toolbox LScroll( short dCols, short dRows, Handle lHandle )toolbox LAutoScroll( Handle lHandle )toolbox LUpdate( RgnHandle theRgn, Handle lHandle )toolbox LActivate( Boolean act, Handle lHandle )toolbox LCellSize( Point cSize, Handle lHandle )toolbox fn LClick( Point pt, UInt16 modifiers, Handle lHandle ) = Booleantoolbox LAddToCell( ptr dataPtr, short dataLen, Point theCell, Handle lHandle )toolbox LClrCell( Point theCell, Handle lHandle )toolbox LGetCell( ptr dataPtr, short * dataLen, Point theCell, Handle lHandle )toolbox LRect( Rect * cellRect, Point theCell, Handle lHandle )toolbox LSetCell( ptr dataPtr, short dataLen, Point theCell, Handle lHandle )toolbox LSetSelect( Boolean setIt, Point theCell, Handle lHandle )toolbox LDraw( Point theCell, Handle lHandle )toolbox LGetCellDataLocation( short * offset, short * len, Point theCell, Handle lHandle )// Aliases.htoolbox fn NewAlias( const FSSpec * fromFile, const FSSpec * target, Handle * alias ) = OSErrtoolbox fn NewAliasMinimal( const FSSpec * target, Handle * alias ) = OSErrtoolbox fn NewAliasMinimalFromFullPath( short fullPathLength, ptr fullPath, ConstStr255Param zoneName, ConstStr255Param serverName, Handle * alias ) = OSErrtoolbox fn ResolveAlias( const FSSpec * fromFile, Handle alias, FSSpec * target, Boolean * wasChanged ) = OSErrtoolbox fn GetAliasInfo( Handle alias, short index, Str63 theString ) = OSErrtoolbox fn ResolveAliasFile( FSSpec * theSpec, Boolean resolveAliasChains, Boolean * targetIsFolder, Boolean * wasAliased ) = OSErrtoolbox fn FollowFinderAlias( const FSSpec * fromFile, Handle alias, Boolean logon, FSSpec * target, Boolean * wasChanged ) = OSErrtoolbox fn MatchAlias( const FSSpec * fromFile, unsigned long rulesMask, Handle alias, short * aliasCount, ptr aliasList, Boolean * needsUpdate, ptr aliasFilter, ptr yourDataPtr ) = OSErrtoolbox fn UpdateAlias( const FSSpec * fromFile, const FSSpec * target, Handle alias, Boolean * wasChanged ) = OSErr// Controls.htoolbox fn NewControlActionUPP( proc userRoutine ) = proctoolbox DisposeControlActionUPP( proc userUPP)// Events.htoolbox fn PostEvent( UInt16 eventNum, UInt32 eventMsg ) = OSErr// Palettes.htoolbox fn HasDepth( GDHandle gd, short depth, short whichflags, short flags) = short// Events.htoolbox fn GetCaretTime = UInt32toolbox SetEventMask( UInt16 )toolbox fn GetDblTime = UInt32toolbox fn GetNextEvent( UInt16 eventMask, EventRecord * theEvent ) = Booleantoolbox fn WaitNextEvent( UInt16 eventMask, EventRecord * theEvent, UInt32 sleep, RgnHandle mouseRgn ) = Booleantoolbox fn EventAvail( UInt16 eventMask, EventRecord * theEvent ) = Booleantoolbox GetMouse( Point * mouseLoc )'~'://toolbox fn Button = Boolean  `0xA974  {22/12/06}toolbox fn StillDown = Booleantoolbox fn WaitMouseUp = Booleantoolbox GetKeys( @ptr )// *** ???? param  KeyMap theKeystoolbox fn KeyTranslate( ptr transData, UInt16 keycode, UInt32 * state) = UInt32// OSUtils.htoolbox fn TickCount = UInt32// Events.htoolbox FlushEvents( UInt16 whichMask, UInt16 stopMask )// ToolUtils.htoolbox fn HiWord( long x ) = shorttoolbox fn LoWord( long x ) = short// Icons.htoolbox fn GetIcon( SInt16 iconID ) = Handletoolbox PlotIcon( const Rect * theRect, Handle theIcon )// AppleEvents.h#if ndef _DEFINEDINCARBON#define DescType as ResType#endif// ndef _DEFINEDINCARBONtoolbox fn AERemoveEventHandler( UInt32 theAEEventClass, UInt32 theAEEventID, proc handler, Boolean isSysHandler) = OSErr// AEInteraction.htoolbox fn AEProcessAppleEvent( const EventRecord * theEventRecord ) = OSErr// AEDataModel.htoolbox fn AECreateAppleEvent( UInt32 theAEEventClass, UInt32 theAEEventID, ptr * target, SInt16 returnID , SInt32 transactionID, ptr * result ) = OSErrtoolbox fn AECreateDesc( DescType typeCode, ptr * dataPtr, unsigned long dataSize, AEDesc * result ) = OSErr // has FB compat kludges// AEInteraction.htoolbox fn AESend( const ptr * theAppleEvent, ptr * reply, SInt32 sendMode, SInt16 sendPriority, long timeOutInTicks, proc idleProc, proc filterProc ) = OSErr// AEDataModel.htoolbox fn AEDisposeDesc( AEDesc * theAEDesc ) = OSErrtoolbox fn AECreateList( ptr factoringPtr, unsigned long factoredSize, Boolean isRecord, ptr * resultList ) = OSErrtoolbox fn AECountItems( ptr * theAEDescList, long * theCount ) = OSErrtoolbox fn AEPutPtr( ptr * theAEDescList, long index, UInt32 typeCode, const ptr dataPtr, unsigned long dataSize) = OSErrtoolbox fn AEPutParamDesc( ptr * theAppleEvent, UInt32 theAEKeyword, const ptr * theAEDesc ) = OSErrtoolbox fn AEPutDesc( ptr * theAEDescList, long index, const ptr * theAEDesc ) = OSErrtoolbox fn AEGetNthPtr( const ptr * theAEDescList, long index, UInt32 desiredType, ptr * theAEKeyword, UInt32 * typeCode, ptr * dataPtr, unsigned long maximumSize, unsigned long * actualSize ) = OSErrtoolbox fn AEGetNthDesc( const ptr * theAEDescList, long index, UInt32 desiredType, ptr * theAEKeyword, ptr * result ) = OSErrtoolbox fn AESizeOfNthItem( const ptr * theAEDescList, long index, UInt32 * typeCode, unsigned long * dataSize ) = OSErrtoolbox fn AEGetArray( const ptr * theAEDescList, SInt8 ArrayType, ptr arrayPtr, unsigned long maximumSize, UInt32 * itemType, unsigned long * itemSize, long * itemCount ) = OSErrtoolbox fn AEPutArray( ptr * theAEDescList, SInt8 arrayType, const ptr * arrayPtr, UInt32 itemType, unsigned long itemSize, long itemCount ) = OSErrtoolbox fn AEDeleteItem( ptr * theAEDescList, long index ) = OSErrtoolbox fn AEPutParamPtr( ptr * theAppleEvent, UInt32 theAEKeyword, UInt32 typeCode, const ptr * dataPtr, unsigned long dataSize) = OSErrtoolbox fn AEGetParamPtr( const ptr * theAppleEvent, UInt32 theAEKeyword, UInt32 desiredType, UInt32 * actualType, ptr * dataPtr, unsigned long maximumSize, unsigned long * actualSize ) = OSErrtoolbox fn AEGetParamDesc( const ptr  theAppleEvent, UInt32 theAEKeyword, UInt32 desiredType, UInt32 * result ) = OSErr // has FB compat kludgestoolbox fn AESizeOfParam( const ptr * theAppleEvent, UInt32 theAEKeyword, UInt32 * typeCode, unsigned long * dataSize ) = OSErrtoolbox fn AEDeleteParam( ptr * theAppleEvent, UInt32 theAEKeyword ) = OSErrtoolbox fn AEGetAttributeDesc( const ptr  theAppleEvent, UInt32 theAEKeyword, UInt32 desiredType, ptr  result ) = OSErr // has FB compat kludgestoolbox fn AEGetAttributePtr( const ptr theAppleEvent, UInt32 theAEKeyword, UInt32 desiredType, UInt32 * typeCode, ptr dataPtr, unsigned long maximumSize, unsigned long * actualSize ) = OSErr // has FB compat kludges// AppleEvents.htoolbox fn AEInstallEventHandler( UInt32 theAEEventClass, UInt32 theAEEventID, proc handler, SRefCon handlerRefCon, Boolean isSysHandler ) = OSErr// AEDataModel.htoolbox fn AEReplaceDescData( UInt32 typeCode, ptr dataPtr, unsigned long dataSize, AEDesc * theAEDesc) = OSErrtoolbox fn AEGetDescDataSize( AEDesc * theAEDesc ) = unsigned longtoolbox fn AEGetDescData( const AEDesc * theAEDesc, ptr dataPtr, unsigned long maximumSize ) = OSErrtoolbox fn NewAEEventHandlerUPP( proc userRoutine ) = proclocal mode'Date { 10/26/01 }dim err as OSErrlocal fn FBInstallAEHandler(aeClass&, aeType&, aeProc as ptr, x as SRefCon, y as Boolean )err = fn AEInstallEventHandler( aeClass&, aeType&, aeProc, x, y )end fn = err'Date { 10/26/01 }begin enum not output// AERegistry.h_kAECoreSuite                   = _"core" _kAEMiscSuite                   = _"misc" _kCoreEventClass                = _"aevt" _kMiscEventClass                = _"misc"_coreEventType                  = _"core"_miscEventType                  = _"misc"_kAEOpenApplication             = _"oapp"_kAEOpenDocuments               = _"odoc"_kAEPrintDocuments              = _"pdoc"_kAEQuitApplication             = _"quit"// AEDataModel.h'_typeChar                       = _"TEXT"_typeLongInteger                = _"long"_typeFSS                        = _"fss "_typeAEList                     = _"list"_typeType                       = _"type"_typeWildCard                   = _"****"_typeProcessSerialNumber        = _"psn "_typeNull                       = _"null"_keyEventClassAttr              = _"evcl"_keyEventIDAttr                 = _"evid"_keyMissedKeywordAttr           = _"miss"_keyDirectObject                = _"----"_kAENoReply            = 1_kAENeverInteract      = &10_kAutoGenerateReturnID = -1_kAnyTransactionID     =  0_kAEQueueReply         =  2_kAECanInteract        = 32_kAENormalPriority     =  0_kAEDefaultTimeout     = -1_typeApplSignature     = _"sign"end enum_kRequiredEventClass = _kCoreEventClass // obsolete// DateTimeUtils.h/*    New Name                    Old Name(s)        DateString                  IUDatePString IUDateString     InitDateCache    LongDateString              IULDateString    LongTimeString              IULTimeString    StringToDate                String2Date    StringToTime                                    TimeString                  IUTimeString IUTimePString    LongDateToSeconds           LongDate2Secs    LongSecondsToDate           LongSecs2Date    DateToSeconds               Date2Secs    SecondsToDate               Secs2Date    Carbon only supports the new names.  The old names are undefined for Carbon targets.In spite of the above, it seems that IUDateString & IUTimeString are not in Carbon  RP*/#if ndef _DEFINEDINCARBON#define DateForm as SInt8#endif// ndef _DEFINEDINCARBONtoolbox LongDateString( const LongDateTime * dateTime, DateForm longFlag, Str255 result, Handle intlHandle )toolbox LongTimeString( const LongDateTime * dateTime, Boolean wantSeconds, Str255 result, Handle intlHandle )toolbox DateString( long dateTime, DateForm longFlag, Str255 result, Handle intlHandle )toolbox TimeString( long dateTime, Boolean wantSeconds, Str255 result, Handle intlHandle )toolbox LongSecondsToDate( const LongDateTime * lSecs, LongDateRec * lDate )//toolbox SecondsToDate( const LongDateTime * lSecs, LongDateRec * lDate )toolbox SecondsToDate( UInt32 lSecs, LongDateRec * lDate )// changed 25-August-2007 Briantoolbox fn ReadDateTime( unsigned long * time ) = OSErrtoolbox GetDateTime( unsigned long * secs )toolbox fn SetDateTime( unsigned long time ) = OSErrtoolbox SetTime( const DateTimeRec * d )toolbox GetTime( DateTimeRec * d )toolbox DateToSeconds( const DateTimeRec * d, unsigned long * secs )toolbox LongDateToSeconds( const LongDateRec * lDate, LongDateTime * lSecs )// old bollix#if ndef _LP64local modelocal fn Date2Secs( @recPtr as ptr )'~'1dim as unsigned long   @ secondsDateToSeconds( #recPtr, @seconds )end fn = seconds#endif// TextUtils.htoolbox UpperString( Str255 theString, Boolean diacSensitive )// Script.htoolbox fn CharacterByteType( ptr textBuf, short textOffset, ScriptCode script ) = short// OSUtils.htoolbox fn IsMetric() = Boolean// CodeFragments.htoolbox fn GetSharedLibrary( Str63 libName, OSType archType, OptionBits options, ptr * connID, ptr * MainAddr, Str255 errMessage ) = OSErrtoolbox fn FindSymbol( ptr connID, ConstStr255Param symName, ptr * symAddr, UInt8 * symClass) = OSErrtoolbox fn CountSymbols( ptr connID, long * symCount) = OSErrtoolbox fn GetIndSymbol( ptr connID, long symIndex, Str255 symName, ptr * symAddr, UInt8 * symClass) = OSErr// Sound.htoolbox SndGetSysBeepState( short * sysBeepState )toolbox fn SndSetSysBeepState( short sysBeepState ) = OSErr// Quickdraw.htoolbox PackBits( ptr * srcPtr, ptr * dstPtr, short srcBytes )toolbox UnpackBits( ptr * srcPtr, ptr * dstPtr, short dstBytes )// ToolUtils.htoolbox fn BitTst( const ptr bytePtr, long bitNum ) = Booleantoolbox BitSet( const ptr bytePtr, long bitNum )toolbox BitClr( const ptr bytePtr, long bitNum )toolbox fn BitAnd( long value1, long value2 ) = longtoolbox fn BitOr( long value1, long value2 ) = longtoolbox fn BitXor( long value1, long value2 ) = longtoolbox fn BitNot( long value ) = longtoolbox fn BitShift( long value, short count ) = long// Quickdraw.htoolbox fn SlopeFromAngle( short angle ) = Fixed toolbox fn AngleFromSlope( Fixed slope ) = short// FixMath.htoolbox fn FixRatio( short numer, short denom ) = Fixedtoolbox fn FixRound( Fixed x ) = shorttoolbox fn Long2Fix( long x ) = Fixedtoolbox fn Fix2Long( Fixed x ) = longtoolbox fn FixDiv( Fixed x, Fixed y ) = Fixedtoolbox fn FixMul( Fixed a, Fixed b ) = Fixedtoolbox fn FixATan2( long x, long y ) = Fixedtoolbox fn FracMul( Fract x, Fract y ) = Fracttoolbox fn FracDiv( Fract x, Fract y ) = Fracttoolbox fn FracSqrt( Fract x ) = Fracttoolbox fn FracSin( Fixed x ) = Fracttoolbox fn FracCos( Fixed x ) = Fracttoolbox fn Fix2Frac( Fixed x ) = Fracttoolbox fn Frac2Fix( Fract x ) = Fixed// Files.htoolbox fn FSClose( short refNum ) = OSErrtoolbox fn FSRead( short refNum, long * count, ptr buffPtr ) = OSErrtoolbox fn FSWrite( short vRefNum, long * count, const ptr buffPtr ) = OSErr#if ndef _DEFINEDINCARBON// Events.h#define EventModifiers as UInt16#endif// ndef _DEFINEDINCARBON