/* File:  agl.h Version: 1.0 Copyright: © 1999 by Apple Computer, Inc., all rights reserved.*/'~AGL Interfaces - Ported by Derek Smith// last modified    rp 20090217include "Tlbx gl.incl"include library "AGL" // framework#if ndef _DEFINEDINCARBON/*** AGL API version.*/_AGLVERSION20 = 1/*** Macintosh device type.*/#define AGLDevice as ptr/*** Macintosh drawable type.*/#define AGLDrawable as ptr/*** AGL opaque data.*/#define AGLRendererInfo as ptr#define AGLPixelFormat as ptr#define AGLContext as ptr/*** Attribute names for aglChoosePixelFormat and aglDescribePixelFormat.*/_AGLNONE                 = 0_AGLALLRENDERERS         = 1  /* choose from all available renderers          */_AGLBUFFERSIZE           = 2  /* depth of the index buffer                    */_AGLLEVEL                = 3  /* level in plane stacking                      */_AGLRGBA                 = 4  /* choose an RGBA format                        */_AGLDOUBLEBUFFER         = 5  /* double buffering supported                   */_AGLSTEREO               = 6  /* stereo buffering supported                   */_AGLAUXBUFFERS           = 7  /* number of aux buffers                        */_AGLREDSIZE              = 8  /* number of red component bits                 */_AGLGREENSIZE            = 9  /* number of green component bits               */_AGLBLUESIZE             = 10  /* number of blue component bits                */_AGLALPHASIZE            = 11  /* number of alpha component bits               */_AGLDEPTHSIZE            = 12  /* number of depth bits                         */_AGLSTENCILSIZE          = 13  /* number of stencil bits                       */_AGLACCUMREDSIZE         = 14  /* number of red accum bits                     */_AGLACCUMGREENSIZE       = 15  /* number of green accum bits                   */_AGLACCUMBLUESIZE        = 16  /* number of blue accum bits                    */_AGLACCUMALPHASIZE       = 17  /* number of alpha accum bits                   *//*** Extended attributes*/_AGLPIXELSIZE            = 50  /* frame buffer bits per pixel                  */_AGLMINIMUMPOLICY        = 51  /* never choose smaller buffers than requested  */_AGLMAXIMUMPOLICY        = 52  /* choose largest buffers of type requested     */_AGLOFFSCREEN            = 53  /* choose an off-screen capable renderer        */_AGLFULLSCREEN           = 54  /* choose a full-screen capable renderer        *//* Renderer management */_AGLRENDERERID           = 70  /* request renderer by ID                       */_AGLSINGLERENDERER       = 71  /* choose a single renderer for all screens     */_AGLNORECOVERY           = 72  /* disable all failure recovery systems         */_AGLACCELERATED          = 73  /* choose a hardware accelerated renderer       */_AGLCLOSESTPOLICY        = 74  /* choose the closest color buffer to request   */_AGLROBUST               = 75  /* renderer does not need failure recovery      */_AGLBACKINGSTORE         = 76  /* back buffer contents are valid after swap    */_AGLMPSAFE               = 78  /* renderer is multi-processor safe             *//*** Only for aglDescribePixelFormat*/_AGLWINDOW              =  80  /* can be used to render to an onscreen window  */_AGLMULTISCREEN         =  81  /* single window can span multiple screens      */_AGLVIRTUALSCREEN       =  82  /* virtual screen number                        */_AGLCOMPLIANT           =  83  /* renderer is opengl compliant                 *//*** Property names for aglDescribeRenderer*//* #define AGL_OFFSCREEN          53 *//* #define AGL_FULLSCREEN         54 *//* #define AGL_RENDERER_ID        70 *//* #define AGL_ACCELERATED        73 *//* #define AGL_ROBUST             75 *//* #define AGL_BACKING_STORE      76 *//* #define AGL_MP_SAFE            78 *//* #define AGL_WINDOW             80 *//* #define AGL_MULTISCREEN        81 *//* #define AGL_COMPLIANT          83 */_AGLBUFFERMODES        = 100_AGLMINLEVEL           = 101_AGLMAXLEVEL           = 102_AGLCOLORMODES         = 103_AGLACCUMMODES         = 104_AGLDEPTHMODES         = 105_AGLSTENCILMODES       = 106_AGLMAXAUXBUFFERS      = 107_AGLVIDEOMEMORY        = 120_AGLTEXTUREMEMORY      = 121/*** Integer parameter names*/_AGLSWAPRECT           = 200  /* Enable or set the swap rectangle              */_AGLBUFFERRECT         = 202  /* Enable or set the buffer rectangle            */_AGLCOLORMAPTRACKING   = 210  /* Enable or disable colormap tracking           */_AGLCOLORMAPENTRY      = 212  /* Set a colormap entry to {index, r, g, b}      */_AGLRASTERIZATION      = 220  /* Enable or disable all rasterization           */_AGLSWAPINTERVAL       = 222  /* 0 -> Don't sync, n -> Sync every n retrace    */_AGLSTATEVALIDATION    = 230  /* Validate state for multi-screen functionality *//*** Option names for aglConfigure.*/_AGLFORMATCACHESIZE    = 501  /* Set the size of the pixel format cache        */_AGLCLEARFORMATCACHE   = 502  /* Reset the pixel format cache                  */_AGLRETAINRENDERERS    = 503  /* Whether to retain loaded renderers in memory  *//* buffer_modes */_AGLMONOSCOPICBIT      = 0x00000001_AGLSTEREOSCOPICBIT    = 0x00000002_AGLSINGLEBUFFERBIT    = 0x00000004_AGLDOUBLEBUFFERBIT    = 0x00000008/* bit depths */_AGL0BIT               = 0x00000001_AGL1BIT               = 0x00000002_AGL2BIT               = 0x00000004_AGL3BIT               = 0x00000008_AGL4BIT               = 0x00000010_AGL5BIT               = 0x00000020_AGL6BIT               = 0x00000040_AGL8BIT               = 0x00000080_AGL10BIT              = 0x00000100_AGL12BIT              = 0x00000200_AGL16BIT              = 0x00000400_AGL24BIT              = 0x00000800_AGL32BIT              = 0x00001000_AGL48BIT              = 0x00002000_AGL64BIT              = 0x00004000_AGL96BIT              = 0x00008000_AGL128BIT             = 0x00010000/* color modes */_AGLRGB8BIT           =  0x00000001  /* 8 rgb bit/pixel,     RGB=7:0, inverse colormap         */_AGLRGB8A8BIT         = 0x00000002  /* 8-8 argb bit/pixel,  A=7:0, RGB=7:0, inverse colormap  */_AGLBGR233BIT         =  0x00000004  /* 8 rgb bit/pixel,     B=7:6, G=5:3, R=2:0               */_AGLBGR233A8BIT       = 0x00000008  /* 8-8 argb bit/pixel,  A=7:0, B=7:6, G=5:3, R=2:0        */_AGLRGB332BIT         =  0x00000010  /* 8 rgb bit/pixel,     R=7:5, G=4:2, B=1:0               */_AGLRGB332A8BIT       = 0x00000020  /* 8-8 argb bit/pixel,  A=7:0, R=7:5, G=4:2, B=1:0        */_AGLRGB444BIT         =  0x00000040  /* 16 rgb bit/pixel,    R=11:8, G=7:4, B=3:0              */_AGLARGB4444BIT       =  0x00000080  /* 16 argb bit/pixel,   A=15:12, R=11:8, G=7:4, B=3:0     */_AGLRGB444A8BIT       = 0x00000100  /* 8-16 argb bit/pixel, A=7:0, R=11:8, G=7:4, B=3:0       */_AGLRGB555BIT         =  0x00000200  /* 16 rgb bit/pixel,    R=14:10, G=9:5, B=4:0             */_AGLARGB1555BIT       =  0x00000400  /* 16 argb bit/pixel,   A=15, R=14:10, G=9:5, B=4:0       */_AGLRGB555A8BIT       = 0x00000800  /* 8-16 argb bit/pixel, A=7:0, R=14:10, G=9:5, B=4:0      */_AGLRGB565BIT         =  0x00001000  /* 16 rgb bit/pixel,    R=15:11, G=10:5, B=4:0            */_AGLRGB565A8BIT       = 0x00002000  /* 8-16 argb bit/pixel, A=7:0, R=15:11, G=10:5, B=4:0     */_AGLRGB888BIT         =  0x00004000  /* 32 rgb bit/pixel,    R=23:16, G=15:8, B=7:0            */_AGLARGB8888BIT       =  0x00008000  /* 32 argb bit/pixel,   A=31:24, R=23:16, G=15:8, B=7:0   */_AGLRGB888A8BIT       = 0x00010000  /* 8-32 argb bit/pixel, A=7:0, R=23:16, G=15:8, B=7:0     */_AGLRGB101010BIT      =  0x00020000  /* 32 rgb bit/pixel,    R=29:20, G=19:10, B=9:0           */_AGLARGB2101010BIT    =  0x00040000  /* 32 argb bit/pixel,   A=31:30  R=29:20, G=19:10, B=9:0  */_AGLRGB101010A8BIT    = 0x00080000  /* 8-32 argb bit/pixel, A=7:0  R=29:20, G=19:10, B=9:0  */_AGLRGB121212BIT      =  0x00100000  /* 48 rgb bit/pixel,    R=35:24, G=23:12, B=11:0          */_AGLARGB12121212BIT   =  0x00200000  /* 48 argb bit/pixel,   A=47:36, R=35:24, G=23:12, B=11:0 */_AGLRGB161616BIT      =  0x00400000  /* 64 rgb bit/pixel,    R=47:32, G=31:16, B=15:0          */_AGLARGB16161616BIT   =  0x00800000  /* 64 argb bit/pixel,   A=63:48, R=47:32, G=31:16, B=15:0 */_AGLINDEX8BIT         =  0x20000000  /* 8 bit color look up table                              */_AGLINDEX16BIT        =  0x40000000  /* 16 bit color look up table                             *//*** Error return values from aglGetError.*/_AGLNOERROR                = 0 /* no error                        */_AGLBADATTRIBUTE       = 10000 /* invalid pixel format attribute  */_AGLBADPROPERTY        = 10001 /* invalid renderer property       */_AGLBADPIXELFMT        = 10002 /* invalid pixel format            */_AGLBADRENDINFO        = 10003 /* invalid renderer info           */_AGLBADCONTEXT         = 10004 /* invalid context                 */_AGLBADDRAWABLE        = 10005 /* invalid drawable                */_AGLBADGDEV            = 10006 /* invalid graphics device         */_AGLBADSTATE           = 10007 /* invalid context state           */_AGLBADVALUE           = 10008 /* invalid numerical value         */_AGLBADMATCH           = 10009 /* invalid share context           */_AGLBADENUM            = 10010 /* invalid enumerant               */_AGLBADOFFSCREEN       = 10011 /* invalid offscreen drawable      */_AGLBADFULLSCREEN      = 10012 /* invalid offscreen drawable      */_AGLBADWINDOW          = 10013 /* invalid window                  */_AGLBADPOINTER         = 10014 /* invalid pointer                 */_AGLBADMODULE          = 10015 /* invalid code module             */_AGLBADALLOC           = 10016 /* memory allocation failure       */library "OpenGLLibrary"/*** Pixel format functions //*/toolbox fn aglChoosePixelFormat( pointer gdevs, GLint ndev, const GLint *attribs ) = AGLPixelFormatToolbox aglDestroyPixelFormat(AGLPixelFormat pix)toolbox fn aglNextPixelFormat(AGLPixelFormat pix) = AGLPixelFormattoolbox fn aglDescribePixelFormat(AGLPixelFormat pix, GLint attrib, GLint *value)=GLbooleantoolbox fn aglDevicesOfPixelFormat(AGLPixelFormat pix, GLint *ndevs) = long/*** Renderer information functions*/toolbox fn aglQueryRendererInfo(const AGLDevice *gdevs, GLint ndev) = AGLRendererInfoToolbox aglDestroyRendererInfo(AGLRendererInfo rend)toolbox fn aglNextRendererInfo(AGLRendererInfo rend) = AGLRendererInfotoolbox fn aglDescribeRenderer(AGLRendererInfo rend, GLint prop, GLint *value) =GLboolean/*** Context functions*/toolbox fn aglCreateContext(AGLPixelFormat pix, AGLContext share) = AGLContexttoolbox fn aglDestroyContext(AGLContext ctx) = GLbooleantoolbox fn aglCopyContext(AGLContext src, AGLContext dst, GLuint mask) = GLbooleantoolbox fn aglUpdateContext(AGLContext ctx) = GLboolean/*** Current state functions*/toolbox fn aglSetCurrentContext(AGLContext ctx) = GLbooleantoolbox fn aglGetCurrentContext() = AGLContext/*** Drawable Functions*/toolbox fn aglSetDrawable(AGLContext ctx, AGLDrawable draw) = GLbooleantoolbox fn aglSetOffScreen(AGLContext ctx, GLsizei width, GLsizei height, GLsizei rowbytes, GLvoid *baseaddr) = GLbooleantoolbox fn aglSetFullScreen(AGLContext ctx, GLsizei width, GLsizei height, GLsizei freq, GLint device) = GLbooleantoolbox fn aglGetDrawable(AGLContext ctx) = AGLDrawable/*** Virtual screen functions*/toolbox fn aglSetVirtualScreen(AGLContext ctx, GLint screen) = GLbooleantoolbox fn aglGetVirtualScreen(AGLContext ctx) = GLint/*** Obtain version numbers*/Toolbox aglGetVersion(GLint *major, GLint *minor)/*** Global library options*/toolbox fn aglConfigure(GLenum pname, GLuint param) = GLboolean/*** Swap functions*/Toolbox aglSwapBuffers(AGLContext ctx)/*** Per context options*/toolbox fn aglEnable(AGLContext ctx, GLenum pname) = GLbooleantoolbox fn aglDisable(AGLContext ctx, GLenum pname) = GLbooleantoolbox fn aglIsEnabled(AGLContext ctx, GLenum pname) = GLbooleantoolbox fn aglSetInteger(AGLContext ctx, GLenum pname, const GLint *params) = GLbooleantoolbox fn aglGetInteger(AGLContext ctx, GLenum pname, GLint *params) = GLboolean/*** Font function*/toolbox fn aglUseFont(AGLContext ctx, GLint fontID, short face, GLint size, GLint first, GLint count, GLint base) = GLboolean /*** Error functions*/toolbox fn aglGetError() = GLenumtoolbox fn aglErrorString(GLenum code) = pointer/*** Soft reset function*/Toolbox aglResetLibrary()#endif