/*ÊÊUtil_EUTCKeyFilterÊÊbw 20081003Usage: see fn EUTCKeyFilterInstall() below.Requires OS X 10.4 or higher; EUTCKeyFilterInstall() fails harmlessly in 10.3 with _errDataNotSupported*/include "Tlbx HIView.incl"// CarbonEvents.h_typeCFRange = _"cfrn"begin record EUTCKeyFilterInfo // private typedim as HIViewRef ÊÊÊÊviewdim as CFIndex ÊÊÊÊÊÊmaxdim as CFStringRef ÊÊcharsdim as Boolean ÊÊÊÊÊÊpassend recordlocal fn EUTCKeyFilter_priv( nextHandler as EventHandlerCallRef, theEvent as EventRef, userData as pointer )'~'1dim as ^EUTCKeyFilterInfo ÊÊÊinfo : info = userDatadim as CFRange ÊÊÊÊÊÊÊÊÊÊÊÊÊÊsel, range1, range2dim as CFMutableStringRef ÊÊÊreplTextdim as CFStringRef ÊÊÊÊÊÊÊÊÊÊcurrText, tempChar, candTextdim as CFIndex ÊÊÊÊÊÊÊÊÊÊÊÊÊÊcandLen, currLen, indexdim as OSStatus ÊÊÊÊÊÊÊÊÊÊÊÊÊresult : result = _eventNotHandledErrnextHandler = 0 // suppress gcc warning: unused parameterselect ( fn GetEventClass( theEvent ) )case _kEventClassTextFieldselect ( fn GetEventKind( theEvent ) )case _kEventTextShouldChangeInRangefn GetEventParameter( theEvent, _kEventParamCandidateText, _typeCFStringRef, #0, sizeof( CFStringRef ), #0, @candText )long if ( candText )fn GetEventParameter( theEvent, _kEventParamTextSelection, _typeCFRange, #0, sizeof( CFRange ), #0, @sel )candLen = fn CFStringGetLength( candText )currText = fn HIViewCopyText( info.view )long if ( currText )currLen = fn CFStringGetLength( currText )CFRelease( currText )xelsecurrLen = 0end if// maxlong if ( info.max )long if ( ( candLen + ( currLen - sel.length ) ) > info.max )result = _userCanceledErrexit fnend ifend if// pass/blocklong if ( info.chars )replText = fn CFStringCreateMutableCopy( _kCFAllocatorDefault, 0, candText )long if ( replText )long if ( info.pass ) // passindex = fn CFStringGetLength( replText ) - 1while ( index >= 0 )range1.location = indexrange1.length = 1tempChar = fn CFStringCreateWithSubstring( _kCFAllocatorDefault, replText, range1 )long if ( tempChar )range2.location = 0range2.length = fn CFStringGetLength( info.chars )long if ( fn CFStringFindWithOptions( info.chars, tempChar, range2, 0, #0 ) == _false )CFStringDelete( replText, range1 )end ifCFRelease( tempChar )end ifindex--wendxelse // blockindex = fn CFStringGetLength( info.chars ) - 1while ( index >= 0 )range1.location = indexrange1.length = 1tempChar = fn CFStringCreateWithSubstring( _kCFAllocatorDefault, info.chars, range1 )long if ( tempChar )range2.location = 0range2.length = fn CFStringGetLength( replText )fn CFStringFindAndReplace( replText, tempChar, @"", range2, 0 )CFRelease( tempChar )end ifindex--wendend iffn SetEventParameter( theEvent, _kEventParamReplacementText, _typeCFStringRef, sizeof( CFStringRef ), @replText )CFRelease( replText )result = _noErrend ifend ifend ifend selectcase _kEventClassControlselect ( fn GetEventKind( theEvent ) )case _kEventControlDisposeif ( info.chars ) then CFRelease( info.chars )free( info )end selectend selectend fn = result/*ÊÊEUTCKeyFilterInstallparametersÊÊÊÊview Ê- the EUTC HIViewRefÊÊÊÊmax ÊÊ- max character limit (0 = no limit)ÊÊÊÊchars - a CFString of characters to pass or block; argument value 0 means pass all charsÊÊÊÊpass Ê- non-zero to pass the above characters, _false to block themreturn valueÊÊÊÊan error code ( 0 == _noErr)*/local fn EUTCKeyFilterInstall( vw as HIViewRef, max as CFIndex, chars as CFStringRef, pass as Boolean )'~'1dim as ^EUTCKeyFilterInfo ÊÊinfodim as EventTypeSpec ÊÊÊÊÊÊÊeventSpec(1)dim as OSStatus ÊÊÊÊÊÊÊÊÊÊÊÊerr : err = _errDataNotSupportedlong if ( system( _sysVers ) >= 1040 )info = fn malloc( sizeof( EUTCKeyFilterInfo ) )info.view = vwinfo.max = maxlong if (chars )info.chars = fn CFStringCreateCopy( _kCFAllocatorDefault, chars )xelseinfo.chars = 0end ifinfo.pass = passeventSpec.eventClass(0) = _kEventClassTextFieldeventSpec.eventKind(0) = _kEventTextShouldChangeInRangeeventSpec.eventClass(1) = _kEventClassControleventSpec.eventKind(1) = _kEventControlDisposeerr = fn InstallEventHandler( fn GetControlEventTarget( vw ), @fn EUTCKeyFilter_priv, 2, @eventSpec( 0 ), #info, #0 )end ifend fn = err