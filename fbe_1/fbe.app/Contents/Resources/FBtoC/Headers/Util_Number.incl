/*  Util_Number.incl  Bernie Wylde 20140424  1.0.1*/#if ndef _DEFINEDINCOCOA#define NSComparisonResult as SInt64#endifsystem NSComparisonResult NSOrderedAscendingsystem NSComparisonResult NSOrderedSamesystem NSComparisonResult NSOrderedDescendingBeginCDeclarationCFNumberRef NumberWithBool( Boolean value );CFNumberRef NumberWithChar( char value );CFNumberRef NumberWithSInt8( SInt8 value );CFNumberRef NumberWithShort( short value );CFNumberRef NumberWithSInt16( SInt16 value );CFNumberRef NumberWithLong( long value );CFNumberRef NumberWithSInt32( SInt32 value );CFNumberRef NumberWithLongLong( SInt64 value );CFNumberRef NumberWithSInt64( SInt64 value );CFNumberRef NumberWithUnsignedChar( unsigned char value );CFNumberRef NumberWithUInt8( UInt8 value );CFNumberRef NumberWithUnsignedShort( unsigned short value );CFNumberRef NumberWithUInt16( UInt16 value );CFNumberRef NumberWithUnsignedLong( unsigned long value );CFNumberRef NumberWithUInt32( UInt32 value );CFNumberRef NumberWithUnsignedLongLong( unsigned long long value );CFNumberRef NumberWithUInt64( UInt64 value );CFNumberRef NumberWithFloat( float value );CFNumberRef NumberWithFloat32( float value );CFNumberRef NumberWithDouble( double value );CFNumberRef NumberWithFloat64( double value );Boolean NumberBoolValue( CFNumberRef number );char NumberCharValue( CFNumberRef number );SInt8 NumberSInt8Value( CFNumberRef number );short NumberShortValue( CFNumberRef number );SInt16 NumberSInt16Value( CFNumberRef number );long NumberLongValue( CFNumberRef number );SInt32 NumberSInt32Value( CFNumberRef number );SInt64 NumberLongLongValue( CFNumberRef number );SInt64 NumberSInt64Value( CFNumberRef number );unsigned char NumberUnsignedCharValue( CFNumberRef number );UInt8 NumberUInt8Value( CFNumberRef number );unsigned short NumberUnsignedShortValue( CFNumberRef number );UInt16 NumberUInt16Value( CFNumberRef number );unsigned long NumberUnsignedLongValue( CFNumberRef number );UInt32 NumberUInt32Value( CFNumberRef number );UInt64 NumberUnsignedLongLongValue( CFNumberRef number );UInt64 NumberUInt64Value( CFNumberRef number );float NumberFloatValue( CFNumberRef number );float NumberFloat32Value( CFNumberRef number );double NumberDoubleValue( CFNumberRef number );double NumberFloat64Value( CFNumberRef number );CFStringRef NumberStringValue( CFNumberRef number );NSComparisonResult NumberCompare( CFNumberRef number1, CFNumberRef number2 );Boolean NumberIsEqualToNumber( CFNumberRef number1, CFNumberRef number2 );EndCBeginCFunctionCFNumberRef NumberWithBool( Boolean value ){ return (CFNumberRef)[NSNumber numberWithBool:value]; }CFNumberRef NumberWithChar( char value ){ return (CFNumberRef)[NSNumber numberWithChar:value]; }CFNumberRef NumberWithSInt8( SInt8 value ){ return (CFNumberRef)[NSNumber numberWithChar:value]; }CFNumberRef NumberWithShort( short value ){ return (CFNumberRef)[NSNumber numberWithShort:value]; }CFNumberRef NumberWithSInt16( SInt16 value ){ return (CFNumberRef)[NSNumber numberWithShort:value]; }CFNumberRef NumberWithLong( long value ){ return (CFNumberRef)[NSNumber numberWithInt:value]; }CFNumberRef NumberWithSInt32( SInt32 value ){ return (CFNumberRef)[NSNumber numberWithInt:value]; }CFNumberRef NumberWithLongLong( SInt64 value ){ return (CFNumberRef)[NSNumber numberWithLongLong:value]; }CFNumberRef NumberWithSInt64( SInt64 value ){ return (CFNumberRef)[NSNumber numberWithLongLong:value]; }CFNumberRef NumberWithUnsignedChar( unsigned char value ){ return (CFNumberRef)[NSNumber numberWithUnsignedChar:value]; }CFNumberRef NumberWithUInt8( UInt8 value ){ return (CFNumberRef)[NSNumber numberWithUnsignedChar:value]; }CFNumberRef NumberWithUnsignedShort( unsigned short value ){ return (CFNumberRef)[NSNumber numberWithUnsignedShort:value]; }CFNumberRef NumberWithUInt16( UInt16 value ){ return (CFNumberRef)[NSNumber numberWithUnsignedShort:value]; }CFNumberRef NumberWithUnsignedLong( unsigned long value ){ return (CFNumberRef)[NSNumber numberWithUnsignedInt:value]; }CFNumberRef NumberWithUInt32( UInt32 value ){ return (CFNumberRef)[NSNumber numberWithUnsignedInt:value]; }CFNumberRef NumberWithUnsignedLongLong( unsigned long long value ){ return (CFNumberRef)[NSNumber numberWithUnsignedLongLong:value]; }CFNumberRef NumberWithUInt64( UInt64 value ){ return (CFNumberRef)[NSNumber numberWithUnsignedLongLong:value]; }CFNumberRef NumberWithFloat( float value ){ return (CFNumberRef)[NSNumber numberWithFloat:value]; }CFNumberRef NumberWithFloat32( float value ){ return (CFNumberRef)[NSNumber numberWithFloat:value]; }CFNumberRef NumberWithDouble( double value ){ return (CFNumberRef)[NSNumber numberWithDouble:value]; }CFNumberRef NumberWithFloat64( double value ){ return (CFNumberRef)[NSNumber numberWithDouble:value]; }Boolean NumberBoolValue( CFNumberRef number ){ return [(NSNumber *)number boolValue]; }char NumberCharValue( CFNumberRef number ){ return [(NSNumber *)number charValue]; }SInt8 NumberSInt8Value( CFNumberRef number ){ return [(NSNumber *)number charValue]; }short NumberShortValue( CFNumberRef number ){ return [(NSNumber *)number shortValue]; }SInt16 NumberSInt16Value( CFNumberRef number ){ return [(NSNumber *)number shortValue]; }long NumberLongValue( CFNumberRef number ){ return [(NSNumber *)number intValue]; }SInt32 NumberSInt32Value( CFNumberRef number ){ return [(NSNumber *)number intValue]; }SInt64 NumberLongLongValue( CFNumberRef number ){ return [(NSNumber *)number longLongValue]; }SInt64 NumberSInt64Value( CFNumberRef number ){ return [(NSNumber *)number longLongValue]; }unsigned char NumberUnsignedCharValue( CFNumberRef number ){ return [(NSNumber *)number unsignedCharValue]; }UInt8 NumberUInt8Value( CFNumberRef number ){ return [(NSNumber *)number unsignedCharValue]; }unsigned short NumberUnsignedShortValue( CFNumberRef number ){ return [(NSNumber *)number unsignedShortValue]; }UInt16 NumberUInt16Value( CFNumberRef number ){ return [(NSNumber *)number unsignedShortValue]; }unsigned long NumberUnsignedLongValue( CFNumberRef number ){ return [(NSNumber *)number unsignedLongValue]; }UInt32 NumberUInt32Value( CFNumberRef number ){ return [(NSNumber *)number unsignedLongValue]; }UInt64 NumberUnsignedLongLongValue( CFNumberRef number ){ return [(NSNumber *)number unsignedLongLongValue]; }UInt64 NumberUInt64Value( CFNumberRef number ){ return [(NSNumber *)number unsignedLongLongValue]; }float NumberFloatValue( CFNumberRef number ){ return [(NSNumber *)number floatValue]; }float NumberFloat32Value( CFNumberRef number ){ return [(NSNumber *)number floatValue]; }double NumberDoubleValue( CFNumberRef number ){ return [(NSNumber *)number doubleValue]; }double NumberFloat64Value( CFNumberRef number ){ return [(NSNumber *)number doubleValue]; }CFStringRef NumberStringValue( CFNumberRef number ){ return (CFStringRef)[(NSNumber *)number stringValue]; }NSComparisonResult NumberCompare( CFNumberRef number1, CFNumberRef number2 ){ return [(NSNumber *)number1 compare:(NSNumber *)number2]; }Boolean NumberIsEqualToNumber( CFNumberRef number1, CFNumberRef number2 ){ return [(NSNumber *)number1 isEqualToNumber:(NSNumber *)number2]; }EndCtoolbox fn NumberWithBool( Boolean value ) = CFNumberReftoolbox fn NumberWithChar( char value ) = CFNumberReftoolbox fn NumberWithSInt8( SInt8 value ) = CFNumberReftoolbox fn NumberWithShort( short value ) = CFNumberReftoolbox fn NumberWithSInt16( SInt16 value ) = CFNumberReftoolbox fn NumberWithLong( long value ) = CFNumberReftoolbox fn NumberWithSInt32( SInt32 value ) = CFNumberReftoolbox fn NumberWithLongLong( SInt64 value ) = CFNumberReftoolbox fn NumberWithSInt64( SInt64 value ) = CFNumberReftoolbox fn NumberWithUnsignedChar( unsigned char value ) = CFNumberReftoolbox fn NumberWithUInt8( UInt8 value ) = CFNumberReftoolbox fn NumberWithUnsignedShort( unsigned short value ) = CFNumberReftoolbox fn NumberWithUInt16( UInt16 value ) = CFNumberReftoolbox fn NumberWithUnsignedLong( unsigned long value ) = CFNumberReftoolbox fn NumberWithUInt32( UInt32 value ) = CFNumberReftoolbox fn NumberWithUnsignedLongLong( UInt64 value ) = CFNumberReftoolbox fn NumberWithUInt64( UInt64 value ) = CFNumberReftoolbox fn NumberWithFloat( float value ) = CFNumberReftoolbox fn NumberWithFloat32( float value ) = CFNumberReftoolbox fn NumberWithDouble( double value ) = CFNumberReftoolbox fn NumberWithFloat64( double value ) = CFNumberReftoolbox fn NumberBoolValue( CFNumberRef number ) = Booleantoolbox fn NumberCharValue( CFNumberRef number ) = chartoolbox fn NumberSInt8Value( CFNumberRef number ) = SInt8toolbox fn NumberShortValue( CFNumberRef number ) = shorttoolbox fn NumberSInt16Value( CFNumberRef number ) = SInt16toolbox fn NumberLongValue( CFNumberRef number ) = longtoolbox fn NumberSInt32Value( CFNumberRef number ) = SInt32toolbox fn NumberLongLongValue( CFNumberRef number ) = SInt64toolbox fn NumberSInt64Value( CFNumberRef number ) = SInt64toolbox fn NumberUnsignedCharValue( CFNumberRef number ) = unsigned chartoolbox fn NumberUInt8Value( CFNumberRef number ) = UInt8toolbox fn NumberUnsignedShortValue( CFNumberRef number ) = unsigned shorttoolbox fn NumberUInt16Value( CFNumberRef number ) = UInt16toolbox fn NumberUnsignedLongValue( CFNumberRef number ) = unsigned longtoolbox fn NumberUInt32Value( CFNumberRef number ) = UInt32toolbox fn NumberUnsignedLongLongValue( CFNumberRef number ) = UInt64toolbox fn NumberUInt64Value( CFNumberRef number ) = UInt64toolbox fn NumberFloatValue( CFNumberRef number ) = floattoolbox fn NumberFloat32Value( CFNumberRef number ) = floattoolbox fn NumberDoubleValue( CFNumberRef number ) = doubletoolbox fn NumberFloat64Value( CFNumberRef number ) = doubletoolbox fn NumberStringValue( CFNumberRef number ) = CFStringReftoolbox fn NumberCompare( CFNumberRef number1, CFNumberRef number2 ) = NSComparisonResulttoolbox fn NumberIsEqualToNumber( CFNumberRef number1, CFNumberRef number2 ) = Boolean